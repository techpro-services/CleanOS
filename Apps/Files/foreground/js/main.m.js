import{loadTimeData}from"chrome://resources/js/load_time_data.m.js";import{a as assert,i as isMac,b as isChromeOS,d as dispatchPropertyChange,g as getPropertyDescriptor,c as define,P as PropertyKind,e as dispatchSimpleEvent,w as wrappedVolumeManagerCommon,V as VolumeManagerCommon$3,f as assertNotReached,h as wrappedUtil,s as strf,j as str,u as util$3,A as AsyncUtil,k as isRTL,l as assertInstanceof,q as queryRequiredElement,m as decorate,n as swallowDoubleClick,F as FakeEntryImpl,C as CombinedReaders,o as VolumeEntry,E as EntryList,p as isWindows,r as isLinux,t as isLacros,v as limitInputWidth,x as AllowedPaths$1,y as hasKeyModifiers,z as isIOS,B as getDeepActiveElement,D as FocusOutlineManager,G as FilesTooltip,H as FilesPasswordDialog,$,I as IronButtonState,J as IronControlState,K as getRequiredElement}from"./shared.m.rollup.js";import{Polymer,html,dom}from"chrome://resources/polymer/v3_0/polymer/polymer_bundled.min.js";// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
(function(){window.JSErrorCount=0;window.onerror=(message,url)=>{window.JSErrorCount++};window.addEventListener("unhandledrejection",(event=>{console.error(event.reason)}));console.error=(()=>{const orig=console.error;return(...args)=>{window.JSErrorCount++;const currentStack=new Error("current stack").stack;const originalStack=args&&args[0]&&args[0].stack;const prefix="[unhandled-error]: ";if(args.length){args[0]=prefix+args[0]}else{args.push(prefix)}args.push([currentStack]);if(originalStack){args.push("Original stack:\n"+originalStack)}return orig.apply(this,[args.join("\n")])}})();console.assert=(()=>{const orig=console.assert;return(condition,...args)=>{const stack=new Error("original stack").stack;args.push(stack);if(!condition){window.JSErrorCount++}return orig.apply(this,[condition].concat(args.join("\n")))}})();Function.prototype.wrap=function(thisObject,...bindArgs){const func=this;const bindStack=new Error("Stack trace before async call").stack;if(thisObject===undefined){thisObject=null}return function wrappedCallback(...args){try{const finalArgs=bindArgs.concat(args);return func.apply(thisObject,finalArgs)}catch(e){console.error(e.stack||e,"Exception happened in callback which was bound at:",bindStack);throw e}}}})();// Copyright (c) 2014 The Chromium Authors. All rights reserved.
const metricsBase={};metricsBase.intervals={};metricsBase.validEnumValues_={};metricsBase.startInterval=name=>{metricsBase.intervals[name]=Date.now()};metricsBase.convertName_=name=>{throw new Error("metricsBase.convertName_() must be overrideen by subclass.")};metricsBase.call_=(methodName,args)=>{try{chrome.metricsPrivate[methodName].apply(chrome.metricsPrivate,args)}catch(e){console.error(e.stack)}if(metricsBase.log){console.log("chrome.metricsPrivate."+methodName,args)}};metricsBase.recordMediumCount=(name,value)=>{metricsBase.call_("recordMediumCount",[metricsBase.convertName_(name),value])};metricsBase.recordSmallCount=(name,value)=>{metricsBase.call_("recordSmallCount",[metricsBase.convertName_(name),value])};metricsBase.recordTime=(name,time)=>{metricsBase.call_("recordTime",[metricsBase.convertName_(name),time])};metricsBase.recordBoolean=(name,value)=>{metricsBase.call_("recordBoolean",[metricsBase.convertName_(name),value])};metricsBase.recordUserAction=name=>{metricsBase.call_("recordUserAction",[metricsBase.convertName_(name)])};metricsBase.recordValue=(name,type,min,max,buckets,value)=>{metricsBase.call_("recordValue",[{metricName:metricsBase.convertName_(name),type:type,min:min,max:max,buckets:buckets},value])};metricsBase.recordInterval=name=>{if(name in metricsBase.intervals){metricsBase.recordTime(name,Date.now()-metricsBase.intervals[name])}else{console.error("Unknown interval: "+name)}};metricsBase.recordEnum=(name,value,opt_validValues)=>{let boundaryValue;let index;let validValues=opt_validValues;if(metricsBase.validEnumValues_&&name in metricsBase.validEnumValues_){console.assert(validValues===undefined);validValues=metricsBase.validEnumValues_[name]}console.assert(validValues!==undefined);if(validValues.constructor.name=="Array"){index=validValues.indexOf(value);boundaryValue=validValues.length}else{index=value;boundaryValue=validValues}if(index<0||index>=boundaryValue){index=boundaryValue-1}const metricDescr={metricName:metricsBase.convertName_(name),type:chrome.metricsPrivate.MetricTypeType.HISTOGRAM_LINEAR,min:1,max:boundaryValue-1,buckets:boundaryValue};metricsBase.call_("recordValue",[metricDescr,index])};var wrappedMetricsBase=Object.freeze({__proto__:null,metricsBase:metricsBase});// Copyright (c) 2012 The Chromium Authors. All rights reserved.
const{metricsBase:metricsBase$1}=wrappedMetricsBase;var metrics=metrics||metricsBase$1;metrics.convertName_=name=>"FileBrowser."+name;// Copyright (c) 2015 The Chromium Authors. All rights reserved.
metrics.startInterval("Load.Total");metrics.startInterval("Load.Script");// Copyright (c) 2010 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
const NativeEventTarget=self["EventTarget"];// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class ArrayDataModel extends NativeEventTarget{constructor(array){super();this.array_=array;this.indexes_=[];this.compareFunctions_={};this.sortStatus_;for(let i=0;i<array.length;i++){this.indexes_.push(i)}}get length(){return this.array_.length}item(index){if(index>=0&&index<this.length){return this.array_[this.indexes_[index]]}return undefined}compareFunction(field){return this.compareFunctions_[field]}setCompareFunction(field,compareFunction){if(!this.compareFunctions_){this.compareFunctions_={}}this.compareFunctions_[field]=compareFunction}isSortable(field){return this.compareFunctions_&&field in this.compareFunctions_}get sortStatus(){if(this.sortStatus_){return this.createSortStatus(this.sortStatus_.field,this.sortStatus_.direction)}else{return this.createSortStatus(null,null)}}indexOf(item,opt_fromIndex){for(let i=opt_fromIndex||0;i<this.indexes_.length;i++){if(item===this.item(i)){return i}}return-1}slice(opt_from,opt_to){const arr=this.array_;return this.indexes_.slice(opt_from,opt_to).map((function(index){return arr[index]}))}splice(index,deleteCount,var_args){const addCount=arguments.length-2;const newIndexes=[];const deletePermutation=[];const deletedItems=[];const newArray=[];index=Math.min(index,this.indexes_.length);deleteCount=Math.min(deleteCount,this.indexes_.length-index);let i;for(i=0;i<index;i++){newIndexes.push(newArray.length);deletePermutation.push(i);newArray.push(this.array_[this.indexes_[i]])}for(;i<index+deleteCount;i++){deletePermutation.push(-1);deletedItems.push(this.array_[this.indexes_[i]])}for(let j=0;j<addCount;j++){newIndexes.push(newArray.length);newArray.push(arguments[j+2])}for(;i<this.indexes_.length;i++){newIndexes.push(newArray.length);deletePermutation.push(i-deleteCount+addCount);newArray.push(this.array_[this.indexes_[i]])}this.indexes_=newIndexes;this.array_=newArray;const spliceEvent=new Event("splice");spliceEvent.removed=deletedItems;spliceEvent.added=Array.prototype.slice.call(arguments,2);const status=this.sortStatus;const sortPermutation=this.doSort_(this.sortStatus.field,this.sortStatus.direction);if(sortPermutation){const splicePermutation=deletePermutation.map((function(element){return element!==-1?sortPermutation[element]:-1}));this.dispatchPermutedEvent_(splicePermutation);spliceEvent.index=sortPermutation[index]}else{this.dispatchPermutedEvent_(deletePermutation);spliceEvent.index=index}this.dispatchEvent(spliceEvent);if(status.field){this.delayedSort_(status.field,status.direction)}return deletedItems}push(var_args){const args=Array.prototype.slice.call(arguments);args.unshift(this.length,0);this.splice.apply(this,args);return this.length}replaceItem(oldItem,newItem){const index=this.indexOf(oldItem);if(index<0){return}this.array_[this.indexes_[index]]=newItem;this.updateIndex(index)}updateIndex(index){this.updateIndexes([index])}updateIndexes(indexes){indexes.forEach((function(index){assert(index>=0&&index<this.length,"Invalid index")}),this);for(let i=0;i<indexes.length;i++){const e=new Event("change");e.index=indexes[i];this.dispatchEvent(e)}if(this.sortStatus.field){const status=this.sortStatus;const sortPermutation=this.doSort_(this.sortStatus.field,this.sortStatus.direction);if(sortPermutation){this.dispatchPermutedEvent_(sortPermutation)}this.delayedSort_(status.field,status.direction)}}createSortStatus(field,direction){return{field:field,direction:direction}}prepareSort(field,callback){callback()}delayedSort_(field,direction){const self=this;setTimeout((function(){if(field===self.sortStatus.field&&direction===self.sortStatus.direction){self.sort(field,direction)}}),0)}sort(field,direction){const self=this;this.prepareSort(field,(function(){const sortPermutation=self.doSort_(field,direction);if(sortPermutation){self.dispatchPermutedEvent_(sortPermutation)}self.dispatchSortEvent_()}))}doSort_(field,direction){const compareFunction=this.sortFunction_(field,direction);const positions=[];for(let i=0;i<this.length;i++){positions[this.indexes_[i]]=i}const sorted=this.indexes_.every((function(element,index,array){return index===0||compareFunction(element,array[index-1])>=0}));if(!sorted){this.indexes_.sort(compareFunction)}this.sortStatus_=this.createSortStatus(field,direction);const sortPermutation=[];let changed=false;for(let i=0;i<this.length;i++){if(positions[this.indexes_[i]]!==i){changed=true}sortPermutation[positions[this.indexes_[i]]]=i}if(changed){return sortPermutation}return null}dispatchSortEvent_(){const e=new Event("sorted");this.dispatchEvent(e)}dispatchPermutedEvent_(permutation){const e=new Event("permuted");e.permutation=permutation;e.newLength=this.length;this.dispatchEvent(e)}createCompareFunction_(field){const compareFunction=this.compareFunctions_?this.compareFunctions_[field]:null;const defaultValuesCompareFunction=this.defaultValuesCompareFunction;if(compareFunction){return compareFunction}else{return function(a,b){return defaultValuesCompareFunction.call(null,a[field],b[field])}}}sortFunction_(field,direction){let compareFunction=null;if(field!==null){compareFunction=this.createCompareFunction_(field)}const dirMultiplier=direction==="desc"?-1:1;return function(index1,index2){const item1=this.array_[index1];const item2=this.array_[index2];let compareResult=0;if(typeof compareFunction==="function"){compareResult=compareFunction.call(null,item1,item2)}if(compareResult!==0){return dirMultiplier*compareResult}return dirMultiplier*this.defaultValuesCompareFunction(index1,index2)}.bind(this)}defaultValuesCompareFunction(a,b){if(a<b){return-1}if(a>b){return 1}return 0}}// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class ListSelectionModel extends NativeEventTarget{constructor(opt_length){super();this.length_=opt_length||0;this.selectedIndexes_=[];this.independentLeadItem_=!isMac&&!isChromeOS;this.leadIndex_=-1;this.oldLeadIndex_=null;this.anchorIndex_=-1;this.oldAnchorIndex_=null;this.changeCount_;this.changedIndexes_}get length(){return this.length_}get selectedIndexes(){return Object.keys(this.selectedIndexes_).map(Number)}set selectedIndexes(selectedIndexes){this.beginChange();const unselected={};for(const index in this.selectedIndexes_){unselected[index]=true}for(let i=0;i<selectedIndexes.length;i++){const index=selectedIndexes[i];if(index in this.selectedIndexes_){delete unselected[index]}else{this.selectedIndexes_[index]=true;if(index in this.changedIndexes_){delete this.changedIndexes_[index]}else{this.changedIndexes_[index]=true}}}for(let index in unselected){index=+index;delete this.selectedIndexes_[index];if(index in this.changedIndexes_){delete this.changedIndexes_[index]}else{this.changedIndexes_[index]=false}}if(selectedIndexes.length){this.leadIndex=this.anchorIndex=selectedIndexes[0]}else{this.leadIndex=this.anchorIndex=-1}this.endChange()}get selectedIndex(){for(const i in this.selectedIndexes_){return Number(i)}return-1}set selectedIndex(selectedIndex){this.selectedIndexes=selectedIndex!==-1?[selectedIndex]:[]}getNearestSelectedIndex_(index){if(index===-1){if(this.selectedIndexes.length){return this.selectedIndexes[0]}return-1}let result=Infinity;for(const i in this.selectedIndexes_){if(Math.abs(i-index)<Math.abs(result-index)){result=i}}return result<this.length?Number(result):-1}selectRange(start,end){if(start>end){const tmp=start;start=end;end=tmp}this.beginChange();for(let index=start;index!==end;index++){this.setIndexSelected(index,true)}this.setIndexSelected(end,true);this.endChange()}selectAll(){if(this.length===0){return}this.selectRange(0,this.length-1)}clear(){this.beginChange();this.length_=0;this.anchorIndex=this.leadIndex=-1;this.unselectAll();this.endChange()}unselectAll(){this.beginChange();for(const i in this.selectedIndexes_){this.setIndexSelected(+i,false)}this.endChange()}setIndexSelected(index,b){const oldSelected=index in this.selectedIndexes_;if(oldSelected===b){return}if(b){this.selectedIndexes_[index]=true}else{delete this.selectedIndexes_[index]}this.beginChange();this.changedIndexes_[index]=b;this.endChange()}getIndexSelected(index){return index in this.selectedIndexes_}beginChange(){if(!this.changeCount_){this.changeCount_=0;this.changedIndexes_={};this.oldLeadIndex_=this.leadIndex_;this.oldAnchorIndex_=this.anchorIndex_}this.changeCount_++}endChange(){this.changeCount_--;if(!this.changeCount_){this.leadIndex_=this.adjustIndex_(this.leadIndex_);if(this.leadIndex_!==this.oldLeadIndex_){dispatchPropertyChange(this,"leadIndex",this.leadIndex_,this.oldLeadIndex_)}this.oldLeadIndex_=null;this.anchorIndex_=this.adjustIndex_(this.anchorIndex_);if(this.anchorIndex_!==this.oldAnchorIndex_){dispatchPropertyChange(this,"anchorIndex",this.anchorIndex_,this.oldAnchorIndex_)}this.oldAnchorIndex_=null;const indexes=Object.keys(this.changedIndexes_);if(indexes.length){const e=new Event("change");e.changes=indexes.map((function(index){return{index:Number(index),selected:this.changedIndexes_[index]}}),this);this.dispatchEvent(e)}this.changedIndexes_={}}}get leadIndex(){return this.leadIndex_}set leadIndex(leadIndex){const oldValue=this.leadIndex_;const newValue=this.adjustIndex_(leadIndex);this.leadIndex_=newValue;if(!this.changeCount_&&newValue!==oldValue){dispatchPropertyChange(this,"leadIndex",newValue,oldValue)}}get anchorIndex(){return this.anchorIndex_}set anchorIndex(anchorIndex){const oldValue=this.anchorIndex_;const newValue=this.adjustIndex_(anchorIndex);this.anchorIndex_=newValue;if(!this.changeCount_&&newValue!==oldValue){dispatchPropertyChange(this,"anchorIndex",newValue,oldValue)}}adjustIndex_(index){index=Math.max(-1,Math.min(this.length_-1,index));if(!this.changeCount_&&!this.independentLeadItem_&&!this.getIndexSelected(index)){const index2=this.getNearestSelectedIndex_(index);index=index2}return index}get multiple(){return true}adjustToReordering(permutation){this.beginChange();const oldLeadIndex=this.leadIndex;const oldAnchorIndex=this.anchorIndex;const oldSelectedItemsCount=this.selectedIndexes.length;this.selectedIndexes=this.selectedIndexes.map((function(oldIndex){return permutation[oldIndex]})).filter((function(index){return index!==-1}));if(oldLeadIndex!==-1){this.leadIndex=permutation[oldLeadIndex]}if(oldAnchorIndex!==-1){this.anchorIndex=permutation[oldAnchorIndex]}if(oldSelectedItemsCount&&!this.selectedIndexes.length&&this.length_&&oldLeadIndex!==-1){let newSelectedIndex=Math.min(oldLeadIndex,this.length_-1);for(let i=oldLeadIndex+1;i<permutation.length;++i){if(permutation[i]!==-1){newSelectedIndex=permutation[i];break}}this.selectedIndexes=[newSelectedIndex]}this.endChange()}adjustLength(length){this.length_=length}}// Copyright (c) 2012 The Chromium Authors. All rights reserved.
function ListSelectionController(selectionModel){this.selectionModel_=selectionModel}ListSelectionController.prototype={get selectionModel(){return this.selectionModel_},getIndexBelow(index){if(index===this.getLastIndex()){return-1}return index+1},getIndexAbove(index){return index-1},getIndexBefore(index){return-1},getIndexAfter(index){return-1},getNextIndex(index){if(index===this.getLastIndex()){return-1}return index+1},getPreviousIndex(index){return index-1},getFirstIndex(){return 0},getLastIndex(){return this.selectionModel.length-1},handlePointerDownUp(e,index){const sm=this.selectionModel;const anchorIndex=sm.anchorIndex;const isDown=e.type==="mousedown";sm.beginChange();if(index===-1){if(isMac||isChromeOS){sm.leadIndex=sm.anchorIndex=-1;sm.unselectAll()}else if(!isDown&&!e.shiftKey&&!e.ctrlKey){if(sm.multiple){sm.unselectAll()}}}else{if(sm.multiple&&(isMac?e.metaKey:e.ctrlKey&&!e.shiftKey)){if(isMac?isDown:!isDown){sm.setIndexSelected(index,!sm.getIndexSelected(index));sm.leadIndex=index;sm.anchorIndex=index}}else if(e.shiftKey&&anchorIndex!==-1&&anchorIndex!==index){if(isDown){sm.unselectAll();sm.leadIndex=index;if(sm.multiple){sm.selectRange(anchorIndex,index)}else{sm.setIndexSelected(index,true)}}}else{const isRightClick=e.button===2;const indexSelected=sm.getIndexSelected(index);if((indexSelected&&!isDown||!indexSelected&&isDown)&&!(indexSelected&&isRightClick)){sm.selectedIndex=index}}}sm.endChange()},handleTouchEvents(e,index){},handleKeyDown(e){const tagName=e.target.tagName;if(tagName==="INPUT"){const inputType=e.target.type;if(inputType==="checkbox"||inputType==="radio"){if(e.key===" "){return}}else if(e.key!=="ArrowUp"&&e.key!=="ArrowDown"){return}}if(tagName==="SELECT"){return}const sm=this.selectionModel;let newIndex=-1;const leadIndex=sm.leadIndex;let prevent=true;if(sm.multiple&&e.keyCode===65&&(isMac&&e.metaKey||!isMac&&e.ctrlKey)){sm.selectAll();e.preventDefault();return}if(e.key===" "){if(leadIndex!==-1){const selected=sm.getIndexSelected(leadIndex);if(e.ctrlKey||!selected){sm.setIndexSelected(leadIndex,!selected||!sm.multiple);return}}}switch(e.key){case"Home":newIndex=this.getFirstIndex();break;case"End":newIndex=this.getLastIndex();break;case"ArrowUp":newIndex=leadIndex===-1?this.getLastIndex():this.getIndexAbove(leadIndex);break;case"ArrowDown":newIndex=leadIndex===-1?this.getFirstIndex():this.getIndexBelow(leadIndex);break;case"ArrowLeft":case"MediaPreviousTrack":newIndex=leadIndex===-1?this.getLastIndex():this.getIndexBefore(leadIndex);break;case"ArrowRight":case"MediaNextTrack":newIndex=leadIndex===-1?this.getFirstIndex():this.getIndexAfter(leadIndex);break;default:prevent=false}if(newIndex!==-1){sm.beginChange();sm.leadIndex=newIndex;if(e.shiftKey){const anchorIndex=sm.anchorIndex;if(sm.multiple){sm.unselectAll()}if(anchorIndex===-1){sm.setIndexSelected(newIndex,true);sm.anchorIndex=newIndex}else{sm.selectRange(anchorIndex,newIndex)}}else if(e.ctrlKey&&!isMac&&!isChromeOS);else{if(sm.multiple){sm.unselectAll()}sm.setIndexSelected(newIndex,true);sm.anchorIndex=newIndex}sm.endChange();if(prevent){e.preventDefault()}}}};// Copyright (c) 2012 The Chromium Authors. All rights reserved.
const ListItem=define("li");ListItem.nextUniqueIdSuffix_=0;ListItem.prototype={__proto__:HTMLLIElement.prototype,get label(){return this.textContent},set label(label){this.textContent=label},listIndex_:-1,decorate(){this.setAttribute("role","listitem");if(!this.id){this.id="listitem-"+ListItem.nextUniqueIdSuffix_++}},selectionChanged(){}};ListItem.prototype.selected;Object.defineProperty(ListItem.prototype,"selected",getPropertyDescriptor("selected",PropertyKind.BOOL_ATTR,(function(){this.selectionChanged()})));ListItem.prototype.lead;Object.defineProperty(ListItem.prototype,"lead",getPropertyDescriptor("lead",PropertyKind.BOOL_ATTR));ListItem.prototype.listIndex;Object.defineProperty(ListItem.prototype,"listIndex",getPropertyDescriptor("listIndex"));// Copyright (c) 2012 The Chromium Authors. All rights reserved.
function inViewport(el,e){const rect=el.getBoundingClientRect();const x=e.clientX;const y=e.clientY;return x>=rect.left+el.clientLeft&&x<rect.left+el.clientLeft+el.clientWidth&&y>=rect.top+el.clientTop&&y<rect.top+el.clientTop+el.clientHeight}function getComputedStyle$1(el){return el.ownerDocument.defaultView.getComputedStyle(el)}const List=define("list");List.prototype={__proto__:HTMLUListElement.prototype,measured_:null,autoExpands_:false,fixedHeight_:true,remainingSpace_:true,itemConstructor_:ListItem,get itemConstructor(){return this.itemConstructor_},set itemConstructor(func){if(func!==this.itemConstructor_){this.itemConstructor_=func;this.cachedItems_={};this.redraw()}},dataModel_:null,set dataModel(dataModel){if(this.dataModel_===dataModel){return}if(!this.boundHandleDataModelPermuted_){this.boundHandleDataModelPermuted_=this.handleDataModelPermuted_.bind(this);this.boundHandleDataModelChange_=this.handleDataModelChange_.bind(this)}if(this.dataModel_){this.dataModel_.removeEventListener("permuted",this.boundHandleDataModelPermuted_);this.dataModel_.removeEventListener("change",this.boundHandleDataModelChange_)}this.dataModel_=dataModel;this.cachedItems_={};this.cachedItemHeights_={};this.selectionModel.clear();if(dataModel){this.selectionModel.adjustLength(dataModel.length)}if(this.dataModel_){this.dataModel_.addEventListener("permuted",this.boundHandleDataModelPermuted_);this.dataModel_.addEventListener("change",this.boundHandleDataModelChange_)}this.redraw();this.onSetDataModelComplete()},get dataModel(){return this.dataModel_},onSetDataModelComplete(){},cachedMeasuredItem_:null,get selectionModel(){return this.selectionModel_},set selectionModel(sm){const oldSm=this.selectionModel_;if(oldSm===sm){return}if(!this.boundHandleOnChange_){this.boundHandleOnChange_=this.handleOnChange_.bind(this);this.boundHandleLeadChange_=this.handleLeadChange.bind(this)}if(oldSm){oldSm.removeEventListener("change",this.boundHandleOnChange_);oldSm.removeEventListener("leadIndexChange",this.boundHandleLeadChange_)}this.selectionModel_=sm;this.selectionController_=this.createSelectionController(sm);if(sm){sm.addEventListener("change",this.boundHandleOnChange_);sm.addEventListener("leadIndexChange",this.boundHandleLeadChange_)}},get autoExpands(){return this.autoExpands_},set autoExpands(autoExpands){if(this.autoExpands_===autoExpands){return}this.autoExpands_=autoExpands;this.redraw()},get fixedHeight(){return this.fixedHeight_},set fixedHeight(fixedHeight){if(this.fixedHeight_===fixedHeight){return}this.fixedHeight_=fixedHeight;this.redraw()},get selectedItem(){const dataModel=this.dataModel;if(dataModel){const index=this.selectionModel.selectedIndex;if(index!==-1){return dataModel.item(index)}}return null},set selectedItem(selectedItem){const dataModel=this.dataModel;if(dataModel){const index=this.dataModel.indexOf(selectedItem);this.selectionModel.selectedIndex=index}},get selectedItems(){const indexes=this.selectionModel.selectedIndexes;const dataModel=this.dataModel;if(dataModel){return indexes.map((function(i){return dataModel.item(i)}))}return[]},get items(){return Array.prototype.filter.call(this.children,this.isItem,this)},isItem(child){return child.nodeType===Node.ELEMENT_NODE&&child!==this.beforeFiller_&&child!==this.afterFiller_},batchCount_:0,startBatchUpdates(){this.batchCount_++},endBatchUpdates(){this.batchCount_--;if(this.batchCount_===0){this.redraw()}},decorate(){this.beforeFiller_=this.ownerDocument.createElement("div");this.afterFiller_=this.ownerDocument.createElement("div");this.beforeFiller_.className="spacer";this.afterFiller_.className="spacer";this.textContent="";this.appendChild(this.beforeFiller_);this.appendChild(this.afterFiller_);const length=this.dataModel?this.dataModel.length:0;this.selectionModel=new ListSelectionModel(length);this.addEventListener("dblclick",this.handleDoubleClick_);this.addEventListener("mousedown",handleMouseDown);this.addEventListener("dragstart",handleDragStart,true);this.addEventListener("mouseup",this.handlePointerDownUp_);this.addEventListener("keydown",this.handleKeyDown);this.addEventListener("focus",this.handleElementFocus_,true);this.addEventListener("blur",this.handleElementBlur_,true);this.addEventListener("scroll",this.handleScroll.bind(this));this.addEventListener("touchstart",this.handleTouchEvents_);this.addEventListener("touchmove",this.handleTouchEvents_);this.addEventListener("touchend",this.handleTouchEvents_);this.addEventListener("touchcancel",this.handleTouchEvents_);this.setAttribute("role","list");if(!this.hasAttribute("tabindex")){this.tabIndex=0}},measureItemHeight_(item){return this.measureItem(item).height},getDefaultItemHeight_(){return this.getDefaultItemSize_().height},getItemHeightByIndex_(index){if(this.fixedHeight_){return this.getDefaultItemHeight_()}if(this.cachedItemHeights_[index]){return this.cachedItemHeights_[index]}const item=this.getListItemByIndex(index);if(item){const h=this.measureItemHeight_(item);this.cachedItemHeights_[index]=h;return h}return this.getDefaultItemHeight_()},getDefaultItemSize_(){if(!this.measured_||!this.measured_.height){this.measured_=this.measureItem()}return this.measured_},measureItem(opt_item){const dataModel=this.dataModel;if(!dataModel||!dataModel.length){return{height:0,marginTop:0,marginBottom:0,width:0,marginLeft:0,marginRight:0}}const item=opt_item||this.cachedMeasuredItem_||this.createItem(dataModel.item(0));if(!opt_item){this.cachedMeasuredItem_=item;this.appendChild(item)}const rect=item.getBoundingClientRect();const cs=getComputedStyle$1(item);const mt=parseFloat(cs.marginTop);const mb=parseFloat(cs.marginBottom);const ml=parseFloat(cs.marginLeft);const mr=parseFloat(cs.marginRight);let h=rect.height;let w=rect.width;let mh=0;let mv=0;if(mt<0&&mb<0){mv=Math.min(mt,mb)}else if(mt>=0&&mb>=0){mv=Math.max(mt,mb)}else{mv=mt+mb}h+=mv;if(ml<0&&mr<0){mh=Math.min(ml,mr)}else if(ml>=0&&mr>=0){mh=Math.max(ml,mr)}else{mh=ml+mr}w+=mh;if(!opt_item){this.removeChild(item)}return{height:Math.max(0,h),marginTop:mt,marginBottom:mb,width:Math.max(0,w),marginLeft:ml,marginRight:mr}},handleDoubleClick_(e){if(this.disabled){return}const target=e.target;const ancestor=this.getListItemAncestor(target);let index=-1;if(ancestor){index=this.getIndexOfListItem(ancestor);this.activateItemAtIndex(index)}const sm=this.selectionModel;const indexSelected=sm.getIndexSelected(index);if(!indexSelected){this.handlePointerDownUp_(e)}},handlePointerDownUp_(e){if(this.disabled){return}let target=e.target;if(target===this){if(inViewport(target,e)){this.selectionController_.handlePointerDownUp(e,-1)}return}target=this.getListItemAncestor(target);if(!target){return}const index=this.getIndexOfListItem(target);this.selectionController_.handlePointerDownUp(e,index)},handleElementFocus_(e){if(!this.hasElementFocus){this.hasElementFocus=true}},handleElementBlur_(e){if(!this.contains(e.relatedTarget)){this.hasElementFocus=false}},getListItemAncestor(element){let container=element;while(container&&container.parentNode!==this){container=container.parentNode}return container instanceof HTMLLIElement?container:null},handleKeyDown(e){if(!this.disabled){this.selectionController_.handleKeyDown(e)}},handleScroll(e){requestAnimationFrame(this.redraw.bind(this))},handleTouchEvents_(e){if(this.disabled){return}let target=e.target;if(target===this){this.selectionController_.handleTouchEvents(e,-1);return}target=this.getListItemAncestor(target);if(!target){return}const index=this.getIndexOfListItem(target);this.selectionController_.handleTouchEvents(e,index)},handleOnChange_(ce){ce.changes.forEach((function(change){const listItem=this.getListItemByIndex(change.index);if(listItem){listItem.selected=change.selected;listItem.setAttribute("aria-selected",listItem.selected);if(change.selected){listItem.setAttribute("aria-posinset",change.index+1);listItem.setAttribute("aria-setsize",this.dataModel.length)}else{listItem.removeAttribute("aria-posinset");listItem.removeAttribute("aria-setsize")}}}),this);dispatchSimpleEvent(this,"change")},handleLeadChange(e){let element;if(e.oldValue!==-1){if(element=this.getListItemByIndex(e.oldValue)){element.lead=false}}if(e.newValue!==-1){if(element=this.getListItemByIndex(e.newValue)){element.lead=true}if(e.oldValue!==e.newValue){if(element){this.setAttribute("aria-activedescendant",element.id)}this.scrollIndexIntoView(e.newValue);const self=this;window.setTimeout((function(){self.scrollIndexIntoView(e.newValue)}),0)}}else{this.removeAttribute("aria-activedescendant")}},handleDataModelPermuted_(e){const newCachedItems={};for(const index in this.cachedItems_){if(e.permutation[index]!==-1){const newIndex=e.permutation[index];newCachedItems[newIndex]=this.cachedItems_[index];newCachedItems[newIndex].listIndex=newIndex}}this.cachedItems_=newCachedItems;this.pinnedItem_=null;const newCachedItemHeights={};for(const index in this.cachedItemHeights_){if(e.permutation[index]!==-1){newCachedItemHeights[e.permutation[index]]=this.cachedItemHeights_[index]}}this.cachedItemHeights_=newCachedItemHeights;this.startBatchUpdates();const sm=this.selectionModel;sm.adjustLength(e.newLength);sm.adjustToReordering(e.permutation);this.endBatchUpdates()},handleDataModelChange_(e){delete this.cachedItems_[e.index];delete this.cachedItemHeights_[e.index];this.cachedMeasuredItem_=null;if(e.index>=this.firstIndex_&&(e.index<this.lastIndex_||this.remainingSpace_)){this.redraw()}},getItemTop(index){if(this.fixedHeight_){const itemHeight=this.getDefaultItemHeight_();return index*itemHeight}else{this.ensureAllItemSizesInCache();let top=0;for(let i=0;i<index;i++){top+=this.getItemHeightByIndex_(i)}return top}},getItemRow(index){return index},getFirstItemInRow(row){return row},scrollIndexIntoView(index){const dataModel=this.dataModel;if(!dataModel||index<0||index>=dataModel.length){return}const itemHeight=this.getItemHeightByIndex_(index);const scrollTop=this.scrollTop;const top=this.getItemTop(index);const clientHeight=this.clientHeight;const cs=getComputedStyle$1(this);const paddingY=parseInt(cs.paddingTop,10)+parseInt(cs.paddingBottom,10);const availableHeight=clientHeight-paddingY;const self=this;function scrollToAdjustTop(){self.scrollTop=top}function scrollToAdjustBottom(){self.scrollTop=top+itemHeight-availableHeight}if(itemHeight<=availableHeight){if(top<scrollTop){scrollToAdjustTop()}else if(scrollTop+availableHeight<top+itemHeight){scrollToAdjustBottom()}}else{if(scrollTop<top){scrollToAdjustTop()}else if(top+itemHeight<scrollTop+availableHeight){scrollToAdjustBottom()}}},getRectForContextMenu(){const index=this.selectionModel.selectedIndex;const el=this.getListItemByIndex(index);if(el){return el.getBoundingClientRect()}return this.getBoundingClientRect()},getListItem(value){const dataModel=this.dataModel;if(dataModel){const index=dataModel.indexOf(value);return this.getListItemByIndex(index)}return null},getListItemByIndex(index){return this.cachedItems_[index]||null},getIndexOfListItem(item){const index=item.listIndex;if(this.cachedItems_[index]===item){return index}return-1},createItem(value){const item=new this.itemConstructor_(value);item.label=value;if(typeof item.decorate==="function"){item.decorate()}return item},createSelectionController(sm){return new ListSelectionController(sm)},getHeightsForIndex(index){const itemHeight=this.getItemHeightByIndex_(index);const top=this.getItemTop(index);return{top:top,height:itemHeight}},getIndexForListOffset_(offset){const itemHeight=this.getDefaultItemHeight_();if(!itemHeight){return this.dataModel.length}if(this.fixedHeight_){return this.getFirstItemInRow(Math.floor(offset/itemHeight))}let lastHeight=0;if(this.dataModel.length){const h=this.getHeightsForIndex(this.dataModel.length-1);lastHeight=h.top+h.height}if(lastHeight<offset){return this.dataModel.length}let estimatedIndex=Math.min(Math.floor(offset/itemHeight),this.dataModel.length-1);const isIncrementing=this.getItemTop(estimatedIndex)<offset;do{const heights=this.getHeightsForIndex(estimatedIndex);const top=heights.top;const height=heights.height;if(top<=offset&&offset<=top+height){break}isIncrementing?++estimatedIndex:--estimatedIndex}while(0<estimatedIndex&&estimatedIndex<this.dataModel.length);return estimatedIndex},countItemsInRange_(startIndex,endOffset){const endIndex=this.getIndexForListOffset_(endOffset);return endIndex-startIndex+1},getItemsInViewPort(scrollTop,clientHeight){if(this.autoExpands_){return{first:0,length:this.dataModel.length,last:this.dataModel.length}}else{const firstIndex=this.getIndexForListOffset_(scrollTop);const lastIndex=this.getIndexForListOffset_(scrollTop+clientHeight);return{first:firstIndex,length:lastIndex-firstIndex+1,last:lastIndex+1}}},mergeItems(firstIndex,lastIndex){const self=this;const dataModel=this.dataModel;let currentIndex=firstIndex;function insert(){const dataItem=dataModel.item(currentIndex);const newItem=self.cachedItems_[currentIndex]||self.createItem(dataItem);newItem.listIndex=currentIndex;self.cachedItems_[currentIndex]=newItem;self.insertBefore(newItem,item);currentIndex++}function remove(){const next=item.nextSibling;if(item!==self.pinnedItem_){self.removeChild(item)}item=next}let item;for(item=this.beforeFiller_.nextSibling;item!==this.afterFiller_&&currentIndex<lastIndex;){if(!this.isItem(item)){item=item.nextSibling;continue}const index=item.listIndex;if(this.cachedItems_[index]!==item||index<currentIndex){remove()}else if(index===currentIndex){this.cachedItems_[currentIndex]=item;item=item.nextSibling;currentIndex++}else{insert()}}while(item!==this.afterFiller_){if(this.isItem(item)){remove()}else{item=item.nextSibling}}if(this.pinnedItem_){const index=this.pinnedItem_.listIndex;this.pinnedItem_.hidden=index<firstIndex||index>=lastIndex;this.cachedItems_[index]=this.pinnedItem_;if(index>=lastIndex){item=this.pinnedItem_}}while(currentIndex<lastIndex){insert()}},ensureAllItemSizesInCache(){const measuringIndexes=[];const isElementAppended=[];for(let y=0;y<this.dataModel.length;y++){if(!this.cachedItemHeights_[y]){measuringIndexes.push(y);isElementAppended.push(false)}}const measuringItems=[];for(let y=0;y<measuringIndexes.length;y++){const index=measuringIndexes[y];const dataItem=this.dataModel.item(index);const listItem=this.cachedItems_[index]||this.createItem(dataItem);listItem.listIndex=index;if(!listItem.parentNode){this.appendChild(listItem);isElementAppended[y]=true}this.cachedItems_[index]=listItem;measuringItems.push(listItem)}for(let y=0;y<measuringIndexes.length;y++){const index=measuringIndexes[y];this.cachedItemHeights_[index]=this.measureItemHeight_(measuringItems[y])}for(let y=0;y<measuringIndexes.length;y++){if(isElementAppended[y]){this.removeChild(measuringItems[y])}}},getAfterFillerHeight(lastIndex){if(this.fixedHeight_){const itemHeight=this.getDefaultItemHeight_();return(this.dataModel.length-lastIndex)*itemHeight}let height=0;for(let i=lastIndex;i<this.dataModel.length;i++){height+=this.getItemHeightByIndex_(i)}return height},redraw(){if(this.batchCount_!==0){return}const dataModel=this.dataModel;if(!dataModel||!this.autoExpands_&&this.clientHeight===0){this.cachedItems_={};this.firstIndex_=0;this.lastIndex_=0;this.remainingSpace_=this.clientHeight!==0;this.mergeItems(0,0);return}const scrollTop=this.scrollTop;const clientHeight=this.clientHeight;if(!this.fixedHeight_){this.ensureAllItemSizesInCache()}const autoExpands=this.autoExpands_;const itemsInViewPort=this.getItemsInViewPort(scrollTop,clientHeight);const firstIndex=Math.max(0,Math.min(dataModel.length-1,itemsInViewPort.first-1));const lastIndex=Math.min(itemsInViewPort.last+1,dataModel.length);const beforeFillerHeight=this.autoExpands?0:this.getItemTop(firstIndex);const afterFillerHeight=this.autoExpands?0:this.getAfterFillerHeight(lastIndex);this.beforeFiller_.style.height=beforeFillerHeight+"px";const sm=this.selectionModel;const leadIndex=sm.leadIndex;if(this.pinnedItem_&&this.pinnedItem_!==this.cachedItems_[leadIndex]){if(this.pinnedItem_.hidden){this.removeChild(this.pinnedItem_);this.pinnedItem_.hidden=false}this.pinnedItem_=undefined}this.mergeItems(firstIndex,lastIndex);if(!this.pinnedItem_&&this.cachedItems_[leadIndex]&&this.cachedItems_[leadIndex].parentNode===this){this.pinnedItem_=this.cachedItems_[leadIndex]}this.afterFiller_.style.height=afterFillerHeight+"px";this.scrollTop=scrollTop;if(leadIndex!==-1&&this.cachedItems_[leadIndex]){this.cachedItems_[leadIndex].lead=true}for(let y=firstIndex;y<lastIndex;y++){if(sm.getIndexSelected(y)!==this.cachedItems_[y].selected){this.cachedItems_[y].selected=!this.cachedItems_[y].selected}}this.firstIndex_=firstIndex;this.lastIndex_=lastIndex;this.remainingSpace_=itemsInViewPort.last>dataModel.length;if(!this.fixedHeight_){for(let y=firstIndex;y<lastIndex;y++){this.cachedItemHeights_[y]=this.measureItemHeight_(this.cachedItems_[y])}}},restoreLeadItem(leadItem){delete this.cachedItems_[leadItem.listIndex];leadItem.listIndex=this.selectionModel.leadIndex;this.pinnedItem_=this.cachedItems_[leadItem.listIndex]=leadItem},invalidate(){this.cachedItems_={};this.cachedItemSized_={}},redrawItem(index){if(index>=this.firstIndex_&&(index<this.lastIndex_||this.remainingSpace_)){delete this.cachedItems_[index];this.redraw()}},activateItemAtIndex(index){},ensureLeadItemExists(){const index=this.selectionModel.leadIndex;if(index<0){return null}const cachedItems=this.cachedItems_||{};const item=cachedItems[index]||this.createItem(this.dataModel.item(index));if(this.pinnedItem_!==item&&this.pinnedItem_&&this.pinnedItem_.hidden){this.removeChild(this.pinnedItem_)}this.pinnedItem_=item;cachedItems[index]=item;item.listIndex=index;if(item.parentNode===this){return item}if(this.batchCount_!==0){item.hidden=true}if(index<=this.firstIndex_){this.insertBefore(item,this.beforeFiller_.nextSibling)}else{this.insertBefore(item,this.afterFiller_)}this.redraw();return item},startDragSelection(event){event.preventDefault();const border=document.createElement("div");border.className="drag-selection-border";const rect=this.getBoundingClientRect();const startX=event.clientX-rect.left+this.scrollLeft;const startY=event.clientY-rect.top+this.scrollTop;border.style.left=startX+"px";border.style.top=startY+"px";const onMouseMove=function(event){const inRect=this.getBoundingClientRect();const x=event.clientX-inRect.left+this.scrollLeft;const y=event.clientY-inRect.top+this.scrollTop;border.style.left=Math.min(startX,x)+"px";border.style.top=Math.min(startY,y)+"px";border.style.width=Math.abs(startX-x)+"px";border.style.height=Math.abs(startY-y)+"px"}.bind(this);const onMouseUp=function(){this.removeChild(border);document.removeEventListener("mousemove",onMouseMove,true);document.removeEventListener("mouseup",onMouseUp,true)}.bind(this);document.addEventListener("mousemove",onMouseMove,true);document.addEventListener("mouseup",onMouseUp,true);this.appendChild(border)}};List.prototype.disabled;Object.defineProperty(List.prototype,"disabled",getPropertyDescriptor("disabled",PropertyKind.BOOL_ATTR));List.prototype.hasElementFocus;Object.defineProperty(List.prototype,"hasElementFocus",getPropertyDescriptor("hasElementFocus",PropertyKind.BOOL_ATTR));function handleMouseDown(e){const target=e.target;const listItem=this.getListItemAncestor(target);const wasSelected=listItem&&listItem.selected;this.handlePointerDownUp_(e);if(e.defaultPrevented||e.button!==0){return}if(!listItem||wasSelected||!listItem.selected){return}if(!containsFocusableElement(target,listItem)&&listItem.contains(listItem.ownerDocument.activeElement)){e.preventDefault()}}function handleDragStart(e){e=e;const element=e.target.ownerDocument.elementFromPoint(e.clientX,e.clientY);const listItem=this.getListItemAncestor(element);if(!listItem){return}const index=this.getIndexOfListItem(listItem);if(index===-1){return}const isAlreadySelected=this.selectionModel_.getIndexSelected(index);if(!isAlreadySelected){this.selectionModel_.selectedIndex=index}}function containsFocusableElement(start,root){for(let element=start;element&&element!==root;element=element.parentElement){if(element.tabIndex>=0&&!element.disabled){return true}}return false}// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class ListSingleSelectionModel extends NativeEventTarget{constructor(opt_length){super();this.length_=opt_length||0;this.selectedIndex=-1;this.independentLeadItem_=!isMac&&!isChromeOS;this.leadIndex_=-1;this.selectedIndex_;this.selectedIndexBefore_;this.changeCount_}get length(){return this.length_}get selectedIndexes(){const i=this.selectedIndex;return i!==-1?[this.selectedIndex]:[]}set selectedIndexes(indexes){this.selectedIndex=indexes.length?indexes[0]:-1}get selectedIndex(){return this.selectedIndex_}set selectedIndex(selectedIndex){const oldSelectedIndex=this.selectedIndex;const i=Math.max(-1,Math.min(this.length_-1,selectedIndex));if(i!==oldSelectedIndex){this.beginChange();this.selectedIndex_=i;this.leadIndex=i>=0?i:this.leadIndex;this.endChange()}}selectRange(start,end){this.selectedIndex=Math.min(start,end)}selectAll(){}clear(){this.beginChange();this.length_=0;this.selectedIndex=this.anchorIndex=this.leadIndex=-1;this.endChange()}unselectAll(){this.selectedIndex=-1}setIndexSelected(index,b){const oldSelected=index===this.selectedIndex_;if(oldSelected===b){return}if(b){this.selectedIndex=index}else if(index===this.selectedIndex_){this.selectedIndex=-1}}getIndexSelected(index){return index===this.selectedIndex_}beginChange(){if(!this.changeCount_){this.changeCount_=0;this.selectedIndexBefore_=this.selectedIndex_}this.changeCount_++}endChange(){this.changeCount_--;if(!this.changeCount_){if(this.selectedIndexBefore_!==this.selectedIndex_){const beforeChange=this.createChangeEvent("beforeChange");if(this.dispatchEvent(beforeChange)){this.dispatchEvent(this.createChangeEvent("change"))}else{this.selectedIndex_=this.selectedIndexBefore_}}}}createChangeEvent(eventName){const e=new Event(eventName);const indexes=[this.selectedIndexBefore_,this.selectedIndex_];e.changes=indexes.filter((function(index){return index!==-1})).map((function(index){return{index:index,selected:index===this.selectedIndex_}}),this);return e}get leadIndex(){return this.leadIndex_}set leadIndex(leadIndex){const li=this.adjustIndex_(leadIndex);if(li!==this.leadIndex_){const oldLeadIndex=this.leadIndex_;this.leadIndex_=li;dispatchPropertyChange(this,"leadIndex",li,oldLeadIndex);dispatchPropertyChange(this,"anchorIndex",li,oldLeadIndex)}}adjustIndex_(index){index=Math.max(-1,Math.min(this.length_-1,index));if(!this.independentLeadItem_){index=this.selectedIndex}return index}get anchorIndex(){return this.leadIndex}set anchorIndex(anchorIndex){this.leadIndex=anchorIndex}get multiple(){return false}adjustToReordering(permutation){if(this.leadIndex!==-1){this.leadIndex=permutation[this.leadIndex]}const oldSelectedIndex=this.selectedIndex;if(oldSelectedIndex!==-1){this.selectedIndex=permutation[oldSelectedIndex]}}adjustLength(length){this.length_=length}}// Copyright 2015 The Chromium Authors. All rights reserved.
class FileListSelectionModel extends ListSelectionModel{constructor(opt_length){super(opt_length);this.independentLeadItem_=true;this.isCheckSelectMode_=false;this.addEventListener("change",this.onChangeEvent_.bind(this))}setCheckSelectMode(enabled){this.isCheckSelectMode_=enabled}selectAll(){super.selectAll();if(this.isCheckSelectMode_&&this.selectedIndexes.length===1){const e=new Event("change");e.changes=[];this.dispatchEvent(e);if(this.leadIndex<0){this.leadIndex=this.selectedIndexes[0]}}}getCheckSelectMode(){return this.isCheckSelectMode_}adjustToReordering(permutation){const oldSelectedItemsCount=this.selectedIndexes.length;const oldLeadIndex=this.leadIndex;const newSelectedItemsCount=this.selectedIndexes.filter((i=>permutation[i]!=-1)).length;super.adjustToReordering(permutation);if(oldSelectedItemsCount&&!newSelectedItemsCount&&this.length_){this.isCheckSelectMode_=false}}onChangeEvent_(event){const selectedIndexes=this.selectedIndexes;if(selectedIndexes.length===0){this.isCheckSelectMode_=false}else if(selectedIndexes.length>=2){this.isCheckSelectMode_=true}}}class FileListSingleSelectionModel extends ListSingleSelectionModel{setCheckSelectMode(enabled){}getCheckSelectMode(){return false}}// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
const ProgressItemState={PROGRESSING:"progressing",COMPLETED:"completed",ERROR:"error",CANCELED:"canceled"};Object.freeze(ProgressItemState);const ProgressItemType={COPY:"copy",MOVE:"move",DELETE:"delete",ZIP:"zip",SYNC:"sync",TRANSFER:"transfer",FORMAT:"format",MOUNT_ARCHIVE:"mount_archive",PARTITION:"partition"};Object.freeze(ProgressItemType);class ProgressCenterItem{constructor(){this.id_="";this.state=ProgressItemState.PROGRESSING;this.message="";this.sourceMessage="";this.destinationMessage="";this.itemCount=0;this.progressMax=0;this.progressValue=0;this.type=null;this.single=true;this.quiet=false;this.cancelCallback=null;this.currentSpeed;this.averageSpeed;this.remainingTime}set id(value){if(!this.id_){this.id_=value}else{console.error("The ID is already set. (current ID: "+this.id_+")")}}get id(){return this.id_}get progressRateInPercent(){switch(this.state){case ProgressItemState.CANCELED:return 0;case ProgressItemState.COMPLETED:return 100;default:return~~(100*this.progressValue/this.progressMax)}}get cancelable(){return!!(this.state==ProgressItemState.PROGRESSING&&this.cancelCallback&&this.single)}clone(){const clonedItem=Object.assign(new ProgressCenterItem,this);return clonedItem}}// Copyright (c) 2012 The Chromium Authors. All rights reserved.
const{VolumeManagerCommon:VolumeManagerCommon}=wrappedVolumeManagerCommon;function FileType(){}FileType.types=[{type:"image",name:"IMAGE_FILE_TYPE",subtype:"JPEG",pattern:/\.jpe?g$/i,mimePattern:/image\/jpeg/i},{type:"image",name:"IMAGE_FILE_TYPE",subtype:"BMP",pattern:/\.bmp$/i,mimePattern:/image\/bmp/i},{type:"image",name:"IMAGE_FILE_TYPE",subtype:"GIF",pattern:/\.gif$/i,mimePattern:/image\/gif/i},{type:"image",name:"IMAGE_FILE_TYPE",subtype:"ICO",pattern:/\.ico$/i,mimePattern:/image\/x\-icon/i},{type:"image",name:"IMAGE_FILE_TYPE",subtype:"PNG",pattern:/\.png$/i,mimePattern:/image\/png/i},{type:"image",name:"IMAGE_FILE_TYPE",subtype:"WebP",pattern:/\.webp$/i,mimePattern:/image\/webp/i},{type:"image",name:"IMAGE_FILE_TYPE",subtype:"TIFF",pattern:/\.tiff?$/i,mimePattern:/image\/tiff/i},{type:"image",name:"IMAGE_FILE_TYPE",subtype:"SVG",pattern:/\.svg$/i,mimePattern:/image\/svg\+xml/i},{type:"raw",name:"IMAGE_FILE_TYPE",subtype:"ARW",pattern:/\.arw$/i,icon:"image"},{type:"raw",name:"IMAGE_FILE_TYPE",subtype:"CR2",pattern:/\.cr2$/i,icon:"image"},{type:"raw",name:"IMAGE_FILE_TYPE",subtype:"DNG",pattern:/\.dng$/i,icon:"image"},{type:"raw",name:"IMAGE_FILE_TYPE",subtype:"NEF",pattern:/\.nef$/i,icon:"image"},{type:"raw",name:"IMAGE_FILE_TYPE",subtype:"NRW",pattern:/\.nrw$/i,icon:"image"},{type:"raw",name:"IMAGE_FILE_TYPE",subtype:"ORF",pattern:/\.orf$/i,icon:"image"},{type:"raw",name:"IMAGE_FILE_TYPE",subtype:"RAF",pattern:/\.raf$/i,icon:"image"},{type:"raw",name:"IMAGE_FILE_TYPE",subtype:"RW2",pattern:/\.rw2$/i,icon:"image"},{type:"video",name:"VIDEO_FILE_TYPE",subtype:"3GP",pattern:/\.3gpp?$/i,mimePattern:/video\/3gpp/i},{type:"video",name:"VIDEO_FILE_TYPE",subtype:"AVI",pattern:/\.avi$/i,mimePattern:/video\/x\-msvideo/i},{type:"video",name:"VIDEO_FILE_TYPE",subtype:"QuickTime",pattern:/\.mov$/i,mimePattern:/video\/quicktime/i},{type:"video",name:"VIDEO_FILE_TYPE",subtype:"MKV",pattern:/\.mkv$/i,mimePattern:/video\/x\-matroska/i},{type:"video",name:"VIDEO_FILE_TYPE",subtype:"MPEG",pattern:/\.m(p4|4v|pg|peg|pg4|peg4)$/i,mimePattern:/video\/mp(4|eg)/i},{type:"video",name:"VIDEO_FILE_TYPE",subtype:"OGG",pattern:/\.og(m|v|x)$/i,mimePattern:/(application|video)\/ogg/i},{type:"video",name:"VIDEO_FILE_TYPE",subtype:"WebM",pattern:/\.webm$/i,mimePattern:/video\/webm/i},{type:"audio",name:"AUDIO_FILE_TYPE",subtype:"AMR",pattern:/\.amr$/i,mimePattern:/audio\/amr/i},{type:"audio",name:"AUDIO_FILE_TYPE",subtype:"FLAC",pattern:/\.flac$/i,mimePattern:/audio\/flac/i},{type:"audio",name:"AUDIO_FILE_TYPE",subtype:"MP3",pattern:/\.mp3$/i,mimePattern:/audio\/mpeg/i},{type:"audio",name:"AUDIO_FILE_TYPE",subtype:"MPEG",pattern:/\.m4a$/i,mimePattern:/audio\/mp4a-latm/i},{type:"audio",name:"AUDIO_FILE_TYPE",subtype:"OGG",pattern:/\.o(g(a|g)|pus)$/i,mimePattern:/audio\/ogg/i},{type:"audio",name:"AUDIO_FILE_TYPE",subtype:"WAV",pattern:/\.wav$/i,mimePattern:/audio\/x\-wav/i},{type:"text",name:"PLAIN_TEXT_FILE_TYPE",subtype:"TXT",pattern:/\.txt$/i,mimePattern:/text\/plain/i},{type:"archive",name:"ZIP_ARCHIVE_FILE_TYPE",subtype:"ZIP",pattern:/\.zip$/i,mimePattern:/application\/zip/i},{type:"archive",name:"RAR_ARCHIVE_FILE_TYPE",subtype:"RAR",pattern:/\.rar$/i,mimePattern:/application\/x\-rar\-compressed/i},{type:"archive",name:"TAR_ARCHIVE_FILE_TYPE",subtype:"TAR",pattern:/\.tar$/i,mimePattern:/application\/x\-tar/i},{type:"archive",name:"TAR_BZIP2_ARCHIVE_FILE_TYPE",subtype:"TBZ2",pattern:/\.(tar\.bz2|tbz|tbz2)$/i,mimePattern:/application\/x\-bzip2/i},{type:"archive",name:"TAR_GZIP_ARCHIVE_FILE_TYPE",subtype:"TGZ",pattern:/\.(tar\.|t)gz$/i,mimePattern:/application\/x\-gzip/i},{type:"hosted",icon:"gdoc",name:"GDOC_DOCUMENT_FILE_TYPE",subtype:"doc",pattern:/\.gdoc$/i},{type:"hosted",icon:"gsheet",name:"GSHEET_DOCUMENT_FILE_TYPE",subtype:"sheet",pattern:/\.gsheet$/i},{type:"hosted",icon:"gslides",name:"GSLIDES_DOCUMENT_FILE_TYPE",subtype:"slides",pattern:/\.gslides$/i},{type:"hosted",icon:"gdraw",name:"GDRAW_DOCUMENT_FILE_TYPE",subtype:"draw",pattern:/\.gdraw$/i},{type:"hosted",icon:"gtable",name:"GTABLE_DOCUMENT_FILE_TYPE",subtype:"table",pattern:/\.gtable$/i},{type:"hosted",icon:"glink",name:"GLINK_DOCUMENT_FILE_TYPE",subtype:"glink",pattern:/\.glink$/i},{type:"hosted",icon:"gform",name:"GFORM_DOCUMENT_FILE_TYPE",subtype:"form",pattern:/\.gform$/i},{type:"hosted",icon:"gmap",name:"GMAP_DOCUMENT_FILE_TYPE",subtype:"map",pattern:/\.gmap$/i},{type:"hosted",icon:"gsite",name:"GSITE_DOCUMENT_FILE_TYPE",subtype:"site",pattern:/\.gsite$/i},{type:"document",icon:"pdf",name:"PDF_DOCUMENT_FILE_TYPE",subtype:"PDF",pattern:/\.pdf$/i,mimePattern:/application\/pdf/i},{type:"document",name:"HTML_DOCUMENT_FILE_TYPE",subtype:"HTML",pattern:/\.(html?|mht(ml)?|shtml|xht(ml)?)$/i,mimePattern:/text\/html/i},{type:"document",icon:"word",name:"WORD_DOCUMENT_FILE_TYPE",subtype:"Word",pattern:/\.(doc|docx)$/i,mimePattern:new RegExp("application/(msword|vnd\\."+"openxmlformats-officedocument\\.wordprocessingml\\.document)","i")},{type:"document",icon:"ppt",name:"POWERPOINT_PRESENTATION_FILE_TYPE",subtype:"PPT",pattern:/\.(ppt|pptx)$/i,mimePattern:new RegExp("application/vnd\\.(ms-powerpoint|"+"openxmlformats-officedocument\\.presentationml\\.presentation)","i")},{type:"document",icon:"excel",name:"EXCEL_FILE_TYPE",subtype:"Excel",pattern:/\.(xls|xlsx)$/i,mimePattern:new RegExp("application/vnd\\.(ms-excel|"+"openxmlformats-officedocument\\.spreadsheetml\\.sheet)","i")},{type:"archive",icon:"tini",name:"TINI_FILE_TYPE",subtype:"TGZ",pattern:/\.tini$/i}];FileType.DIRECTORY={name:"FOLDER",type:".folder",icon:"folder",subtype:""};FileType.PLACEHOLDER={name:"NO_EXTENSION_FILE_TYPE",type:"UNKNOWN",icon:"",subtype:""};FileType.getExtension=entry=>{if(entry.isDirectory){return""}const extensionStartIndex=entry.name.lastIndexOf(".");if(extensionStartIndex===-1||extensionStartIndex===entry.name.length-1){return""}return entry.name.substr(extensionStartIndex)};FileType.getTypeForName=name=>{const types=FileType.types;for(let i=0;i<types.length;i++){if(types[i].pattern.test(name)){return types[i]}}const match=/\.[^\/\.]+$/.exec(name);const extension=match?match[0]:"";if(extension===""){return FileType.PLACEHOLDER}return{name:"GENERIC_FILE_TYPE",type:"UNKNOWN",subtype:extension.substr(1).toUpperCase(),icon:""}};FileType.getType=(entry,opt_mimeType)=>{if(entry.isDirectory){if(entry.volumeInfo&&entry.volumeInfo.diskFileSystemType){return{name:"",type:"partition",subtype:assert(entry.volumeInfo.diskFileSystemType),icon:""}}return FileType.DIRECTORY}if(opt_mimeType){for(let i=0;i<FileType.types.length;i++){if(FileType.types[i].mimePattern&&FileType.types[i].mimePattern.test(opt_mimeType)){return FileType.types[i]}}}for(let i=0;i<FileType.types.length;i++){if(FileType.types[i].pattern.test(entry.name)){return FileType.types[i]}}const extension=FileType.getExtension(entry);if(extension===""){return FileType.PLACEHOLDER}return{name:"GENERIC_FILE_TYPE",type:"UNKNOWN",subtype:extension.substr(1).toUpperCase(),icon:""}};FileType.getMediaType=(entry,opt_mimeType)=>FileType.getType(entry,opt_mimeType).type;FileType.isAudio=(entry,opt_mimeType)=>FileType.getMediaType(entry,opt_mimeType)==="audio";FileType.isImage=(entry,opt_mimeType)=>FileType.getMediaType(entry,opt_mimeType)==="image";FileType.isVideo=(entry,opt_mimeType)=>FileType.getMediaType(entry,opt_mimeType)==="video";FileType.isRaw=(entry,opt_mimeType)=>FileType.getMediaType(entry,opt_mimeType)==="raw";FileType.isPDF=(entry,opt_mimeType)=>FileType.getType(entry,opt_mimeType).subtype==="PDF";FileType.isType=(types,entry,opt_mimeType)=>{const type=FileType.getMediaType(entry,opt_mimeType);return!!type&&types.indexOf(type)!==-1};FileType.isHosted=(entry,opt_mimeType)=>FileType.getType(entry,opt_mimeType).type==="hosted";FileType.getIcon=(entry,opt_mimeType,opt_rootType)=>{const fileType=FileType.getType(entry,opt_mimeType);const overridenIcon=FileType.getIconOverrides(entry,opt_rootType);return entry.iconName||overridenIcon||fileType.icon||fileType.type||"unknown"};FileType.getIconOverrides=(entry,opt_rootType)=>{const overrides={[VolumeManagerCommon.RootType.DOWNLOADS]:{"/Camera":"camera-folder","/Downloads":VolumeManagerCommon.VolumeType.DOWNLOADS,"/PvmDefault":"plugin_vm"}};const root=overrides[opt_rootType];return root?root[entry.fullPath]:""};// Copyright 2014 The Chromium Authors. All rights reserved.
var importer=importer||{};importer.UpdateType={PROGRESS:"PROGRESS",COMPLETE:"COMPLETE",ERROR:"ERROR",CANCELED:"CANCELED"};importer.ScanEvent={FINALIZED:"finalized",INVALIDATED:"invalidated",UPDATED:"updated"};importer.ScanMode={HISTORY:"HISTORY",CONTENT:"CONTENT"};importer.Disposition={CONTENT_DUPLICATE:"content-dupe",HISTORY_DUPLICATE:"history-dupe",ORIGINAL:"original",SCAN_DUPLICATE:"scan-dupe"};importer.Setting={HAS_COMPLETED_IMPORT:"importer-has-completed-import",MACHINE_ID:"importer-machine-id",PHOTOS_APP_ENABLED:"importer-photo-app-enabled",LAST_KNOWN_LOG_ID:"importer-last-known-log-id"};importer.ELIGIBLE_VOLUME_TYPES_=[VolumeManagerCommon$3.VolumeType.MTP,VolumeManagerCommon$3.VolumeType.REMOVABLE];importer.ValidImportRoots_={DCIM:"DCIM",MP_ROOT:"MP_ROOT"};importer.Destination={DEVICE:"device",GOOGLE_DRIVE:"google-drive"};importer.isEligibleType=entry=>!!entry&&entry.isFile&&FileType.isType(["image","raw","video"],entry);importer.splitPath_=entry=>{const splitPath=entry.fullPath.toUpperCase().split("/");splitPath.splice(0,1);if(splitPath[splitPath.length-1]===""){splitPath.length=splitPath.length-1}return splitPath};importer.isEligiblePath_=splitPath=>{const MISSING=-264512121;return splitPath.some((dirname=>{if(dirname.length==0){return false}let no=0;for(let i=0;i<dirname.length;i++){no=(no<<5)-no+dirname.charCodeAt(i);no=no&no}return MISSING===no}))};importer.isBeneathMediaDir=(entry,volumeManager)=>{if(!entry||!entry.fullPath){return false}const splitPath=importer.splitPath_(entry);if(importer.isEligiblePath_(splitPath)){return true}if(!(splitPath[0]in importer.ValidImportRoots_)){return false}const volumeInfo=volumeManager.getVolumeInfo(entry);return importer.isEligibleVolume(volumeInfo)};importer.isEligibleVolume=volumeInfo=>!!volumeInfo&&!!volumeInfo.volumeType&&importer.ELIGIBLE_VOLUME_TYPES_.indexOf(volumeInfo.volumeType)!==-1;importer.isEligibleEntry=(volumeManager,entry)=>importer.isEligibleType(entry)&&importer.isBeneathMediaDir(entry,volumeManager);importer.isMediaDirectory=(entry,volumeManager)=>{if(!entry||!entry.isDirectory||!entry.fullPath){return false}const splitPath=importer.splitPath_(entry);if(importer.isEligiblePath_(splitPath)){return true}if(splitPath[0]in importer.ValidImportRoots_&&splitPath.length===1){const volumeInfo=volumeManager.getVolumeInfo(entry);return importer.isEligibleVolume(volumeInfo)}return false};importer.getMediaDirectory=directory=>{const dirNames=Object.keys(importer.ValidImportRoots_);return Promise.all(dirNames.map(importer.getDirectory_.bind(null,directory))).then((results=>{for(let i=0;i<results.length;i++){if(!!results[i]&&results[i].isDirectory){return Promise.resolve(results[i])}}return importer.getDirectory_(directory,"dcim").then((directory=>{if(!!directory&&directory.isDirectory){return Promise.resolve(directory)}else{return Promise.reject("Unable to local media directory.")}}))}))};importer.hasMediaDirectory=directory=>importer.getMediaDirectory(directory).then((result=>Promise.resolve(!!result)),(()=>Promise.resolve(false)));importer.getDirectory_=(parent,name)=>new Promise(((resolve,reject)=>{parent.getDirectory(name,{create:false,exclusive:false},resolve,(()=>{resolve(null)}))}));importer.handlePhotosAppMessage=message=>{if(typeof message!=="boolean"){console.error("Unrecognized message type received from photos app: "+message);return Promise.reject()}const storage=importer.ChromeLocalStorage.getInstance();return storage.set(importer.Setting.PHOTOS_APP_ENABLED,message)};importer.isPhotosAppImportEnabled=()=>{const storage=importer.ChromeLocalStorage.getInstance();return storage.get(importer.Setting.PHOTOS_APP_ENABLED,false)};importer.getDirectoryNameForDate=date=>{const padAndConvert=i=>(i<10?"0":"")+i.toString();const year=date.getFullYear().toString();const month=padAndConvert(date.getMonth()+1);const day=padAndConvert(date.getDate());return year+"-"+month+"-"+day};importer.getMachineId=()=>{const storage=importer.ChromeLocalStorage.getInstance();return storage.get(importer.Setting.MACHINE_ID).then((id=>{if(id){return id}id=importer.generateId();return storage.set(importer.Setting.MACHINE_ID,id).then((()=>id))}))};importer.getHistoryFilename=()=>importer.getMachineId().then((machineId=>machineId+"-import-history.log"));importer.getDebugLogFilename=logId=>importer.getMachineId().then((machineId=>machineId+"-import-debug-"+logId+".log"));importer.generateId=()=>Math.floor(Math.random()*899999)+1e5;importer.getUnownedHistoryFiles_=machineId=>{const historyFiles=[];return importer.ChromeSyncFilesystem.getRoot().then((root=>importer.listEntries_(root,(entry=>{if(entry.isFile&&entry.name.indexOf(machineId.toString())===-1&&/^([0-9]{6}-import-history.log)$/.test(entry.name)){historyFiles.push(entry)}})).then((()=>historyFiles))))};importer.getOrCreateHistoryFile=()=>importer.ChromeSyncFilesystem.getOrCreateFileEntry(importer.getHistoryFilename());importer.getHistoryFiles=()=>Promise.all([importer.getOrCreateHistoryFile(),importer.getMachineId().then(importer.getUnownedHistoryFiles_)]).then((entries=>{const historyFiles=entries[1];historyFiles.unshift(entries[0]);return historyFiles}));importer.listEntries_=(directory,callback)=>new Promise(((resolve,reject)=>{const reader=directory.createReader();const readEntries=()=>{reader.readEntries((entries=>{if(entries.length===0){resolve(undefined);return}entries.forEach(callback);readEntries()}),reject)};readEntries()}));importer.Resolver=class{constructor(){this.settled_=false;this.resolve_;this.reject_;this.promise_=new Promise(((resolve,reject)=>{this.resolve_=resolve;this.reject_=reject}));const settler=()=>{this.settled_=true};this.promise_.then(settler,settler)}get resolve(){return this.resolve_}get reject(){return this.reject_}get promise(){return this.promise_}get settled(){return this.settled_}};importer.demandChildDirectory=(parent,name)=>new Promise(((resolve,reject)=>{parent.getDirectory(name,{create:true,exclusive:false},resolve,reject)}));importer.PromisingFileEntry=class{constructor(fileEntry){this.fileEntry_=fileEntry}static create(entry){return new importer.PromisingFileEntry(entry)}createWriter(){return new Promise(this.fileEntry_.createWriter.bind(this.fileEntry_))}file(){return new Promise(this.fileEntry_.file.bind(this.fileEntry_))}getMetadata(){return new Promise(this.fileEntry_.getMetadata.bind(this.fileEntry_))}};importer.APP_URL_PREFIX_="filesystem:chrome-extension://hhaomjibdihmijegdhdafkllkbggdgoj/external";importer.deflateAppUrl=url=>{if(url.substring(0,importer.APP_URL_PREFIX_.length)===importer.APP_URL_PREFIX_){return"$"+url.substring(importer.APP_URL_PREFIX_.length)}return url};importer.inflateAppUrl=deflated=>{if(deflated.substring(0,1)==="$"){return importer.APP_URL_PREFIX_+deflated.substring(1)}return deflated};importer.toSecondsFromEpoch=date=>{const milliseconds=String(Date.parse(date));return milliseconds.substring(0,milliseconds.length-3)};importer.ChromeSyncFilesystem={};importer.ChromeSyncFilesystem.getFileSystem_=()=>new Promise(((resolve,reject)=>{chrome.syncFileSystem.requestFileSystem((filesystem=>{if(chrome.runtime.lastError){reject(chrome.runtime.lastError.message)}else{resolve(filesystem)}}))}));importer.ChromeSyncFilesystem.getRoot=()=>new Promise(((resolve,reject)=>{importer.ChromeSyncFilesystem.getFileSystem_().then((filesystem=>{if(!filesystem.root){reject("Unable to access ChromeSyncFilesystem root")}resolve(filesystem.root)}))}));importer.ChromeSyncFilesystem.getOrCreateFileEntry=fileNamePromise=>{const promise=importer.ChromeSyncFilesystem.getRoot().then((directory=>fileNamePromise.then((fileName=>new Promise(((resolve,reject)=>{directory.getFile(fileName,{create:true,exclusive:false},resolve,reject)}))))));return promise};importer.Logger=function(){};importer.Logger.prototype.info;importer.Logger.prototype.error;importer.Logger.prototype.catcher;importer.RuntimeLogger=class{constructor(fileEntryPromise){this.fileEntryPromise_=fileEntryPromise.then((fileEntry=>new importer.PromisingFileEntry(fileEntry)))}info(content){this.write_("INFO",content);console.log(content)}error(content){this.write_("ERROR",content);console.error(content)}catcher(context){const prefix="("+context+") ";return error=>{let message=prefix+"Caught error in promise chain.";if(error){message+=" Error: "+(error.message||error)}this.error(message);if(error&&error.stack){this.write_("STACK",prefix+error.stack)}}}write_(type,message){return this.fileEntryPromise_.then((fileEntry=>fileEntry.createWriter())).then(this.writeLine_.bind(this,type,message))}writeLine_(type,line,writer){const blob=new Blob(["["+type+" @ "+(new Date).toString()+"] "+line+"\n"],{type:"text/plain; charset=UTF-8"});return new Promise(((resolve,reject)=>{writer.onwriteend=resolve;writer.onerror=reject;writer.seek(writer.length);writer.write(blob)}))}};importer.logger_=null;importer.getLogger=()=>{if(!importer.logger_){const nextLogId=importer.getNextDebugLogId_();const rotator=()=>importer.rotateLogs(nextLogId,importer.ChromeSyncFilesystem.getOrCreateFileEntry);importer.logger_=new importer.RuntimeLogger(importer.ChromeSyncFilesystem.getOrCreateFileEntry(rotator().then(importer.getDebugLogFilename.bind(null,nextLogId))))}return importer.logger_};importer.getNextDebugLogId_=()=>(new Date).getMonth()%2;importer.rotateLogs=(nextLogId,fileFactory)=>{const storage=importer.ChromeLocalStorage.getInstance();const rememberLogId=()=>storage.set(importer.Setting.LAST_KNOWN_LOG_ID,nextLogId);return storage.get(importer.Setting.LAST_KNOWN_LOG_ID).then((lastKnownLogId=>{if(nextLogId===lastKnownLogId||lastKnownLogId===undefined){return Promise.resolve()}return fileFactory(importer.getDebugLogFilename(nextLogId)).then((entry=>new Promise(entry.remove.bind(entry))))})).then(rememberLogId).catch(rememberLogId)};importer.ChromeLocalStorage=class{set(key,value){return new Promise(((resolve,reject)=>{const values={};values[key]=value;chrome.storage.local.set(values,(()=>{if(chrome.runtime.lastError){reject(chrome.runtime.lastError)}else{resolve(undefined)}}))}))}get(key,opt_default){return new Promise(((resolve,reject)=>{chrome.storage.local.get(key,(values=>{if(chrome.runtime.lastError){reject(chrome.runtime.lastError)}else if(key in values){resolve(values[key])}else{resolve(opt_default)}}))}))}static getInstance(){return importer.ChromeLocalStorage.INSTANCE_}};importer.ChromeLocalStorage.INSTANCE_=new importer.ChromeLocalStorage;// Copyright 2017 The Chromium Authors. All rights reserved.
var importerHistoryInterfaces={};importerHistoryInterfaces.ImportHistory=class{whenReady(){}wasCopied(entry,destination){}wasImported(entry,destination){}markCopied(entry,destination,destinationUrl){}listUnimportedUrls(destination){}markImported(entry,destination){}markImportedByUrl(destinationUrl){}addObserver(observer){}removeObserver(observer){}};importerHistoryInterfaces.ImportHistoryState={COPIED:"copied",IMPORTED:"imported"};importerHistoryInterfaces.ImportHistory.ChangedEvent;importerHistoryInterfaces.ImportHistory.Observer;importerHistoryInterfaces.HistoryLoader=class{getHistory(){}addHistoryLoadedListener(listener){}};// Copyright 2019 The Chromium Authors. All rights reserved.
const duplicateFinderInterfaces={};duplicateFinderInterfaces.DispositionChecker=class{static createChecker(historyLoader){}};duplicateFinderInterfaces.DispositionChecker.CheckerFunction;// Copyright 2017 The Chromium Authors. All rights reserved.
const mediaScannerInterfaces={};mediaScannerInterfaces.MediaScanner=class{scanDirectory(directory,mode){}scanFiles(entries,mode){}addObserver(observer){}removeObserver(observer){}};mediaScannerInterfaces.ScanResult=class{isFinal(){}cancel(){}canceled(){}setCandidateCount(count){}onCandidatesProcessed(count){}getFileEntries(){}getDuplicateFileEntries(){}whenFinal(){}getStatistics(){}};mediaScannerInterfaces.ScanResult.Statistics;// Copyright 2019 The Chromium Authors. All rights reserved.
const taskQueueInterfaces={};taskQueueInterfaces.TaskQueue=class{queueTask(task){}addUpdateCallback(callback){}setActiveCallback(callback){}setIdleCallback(callback){}};taskQueueInterfaces.Task=class{constructor(){}addObserver(observer){}run(){}};taskQueueInterfaces.BaseTask=class extends taskQueueInterfaces.Task{constructor(taskId){super()}get taskId(){}get whenFinished(){}notify(updateType,opt_data){}};taskQueueInterfaces.Task.Observer;// Copyright 2017 The Chromium Authors. All rights reserved.
const mediaImportInterfaces={};mediaImportInterfaces.ImportRunner=class{importFromScanResult(scanResult,destination,directoryPromise){}};mediaImportInterfaces.MediaImportHandler=class extends mediaImportInterfaces.ImportRunner{constructor(progressCenter,historyLoader,dispositionChecker,driveSyncHandler){super()}};mediaImportInterfaces.MediaImportHandler.ImportTask=class{constructor(taskId,historyLoader,scanResult,directoryPromise,destination,dispositionChecker){}get whenFinished(){}requestCancel(){}};mediaImportInterfaces.MediaImportHandler.ImportTask.EntryChangedInfo;// Copyright 2015 The Chromium Authors. All rights reserved.
class MetadataItem{constructor(){this.size;this.modificationTime;this.modificationTimeError;this.modificationByMeTime;this.thumbnailUrl;this.croppedThumbnailUrl;this.croppedThumbnailUrlError;this.thumbnailUrlError;this.imageWidth;this.imageHeight;this.imageRotation;this.contentThumbnailUrl;this.contentThumbnailUrlError;this.contentThumbnailTransform;this.contentThumbnailTransformError;this.contentImageTransform;this.contentImageTransformError;this.pinned;this.present;this.presentError;this.hosted;this.dirty;this.availableOffline;this.availableWhenMetered;this.customIconUrl;this.customIconUrlError;this.contentMimeType;this.sharedWithMe;this.shared;this.externalFileUrl;this.mediaAlbum;this.mediaArtist;this.mediaDuration;this.mediaGenre;this.mediaTitle;this.mediaTrack;this.mediaYearRecorded;this.mediaMimeType;this.ifd;this.exifLittleEndian;this.canCopy;this.canDelete;this.canRename;this.canAddChildren;this.canShare;this.alternateUrl;this.isMachineRoot;this.isArbitrarySyncFolder;this.isExternalMedia}}// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
class MetadataRequest{constructor(entry,names){this.entry=entry;this.names=names}}// Copyright 2015 The Chromium Authors. All rights reserved.
class MetadataProvider{constructor(validPropertyNames){this.validPropertyNames_={};for(let i=0;i<validPropertyNames.length;i++){this.validPropertyNames_[validPropertyNames[i]]=true}}checkPropertyNames(names){for(let i=0;i<names.length;i++){assert(this.validPropertyNames_[names[i]],names[i])}}get(requests){}}// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
class LRUCacheNode{constructor(key,value,size){this.key=key;this.value=value;this.size=size;this.next=null;this.prev=null}}class LRUCacheList{constructor(){this.sentinelTail_=new LRUCacheNode("sentinel",null,0);this.head_=this.sentinelTail_}remove(node){if(node.prev){node.prev.next=node.next}if(node.next){node.next.prev=node.prev}if(node===this.head_){this.head_=node.next}node.prev=null;node.next=null}prepend(node){node.prev=null;node.next=this.head_;node.next.prev=node;this.head_=node}lastNode(){return this.sentinelTail_.prev}}class LRUCache{constructor(maxSize){this.totalSize_=0;this.maxSize_=maxSize;this.list_=new LRUCacheList;this.nodes_={}}get(key){const node=this.nodes_[key];if(!node){return null}this.moveNodeToHead_(node);return node.value}peek(key){const node=this.nodes_[key];if(!node){return null}return node.value}hasKey(key){return key in this.nodes_}put(key,value,opt_size){const size=opt_size?opt_size:1;if(size>this.maxSize_){return}let node=this.nodes_[key];while(this.totalSize_+size-(node?node.size:0)>this.maxSize_){this.evictLastNode_();node=this.nodes_[key]}if(node){this.updateNode_(node,value,size);this.moveNodeToHead_(node)}else{node=new LRUCacheNode(key,value,size);this.prependNode_(node)}}remove(key){const node=this.nodes_[key];if(node){this.removeNode_(node)}}size(){return this.totalSize_}setMaxSize(value){this.maxSize_=value;while(this.totalSize_>this.maxSize_){this.evictLastNode_()}}getMaxSize(){return this.maxSize_}evictLastNode_(){const lastNode=this.list_.lastNode();if(!lastNode){throw new Error("No more nodes to evict.")}this.removeNode_(lastNode)}removeNode_(node){this.list_.remove(node);this.totalSize_-=node.size;console.assert(this.totalSize_>=0);console.assert(!!this.nodes_[node.key]);delete this.nodes_[node.key]}prependNode_(node){this.list_.prepend(node);this.totalSize_+=node.size;console.assert(this.totalSize_<=this.maxSize_);console.assert(!this.nodes_[node.key]);this.nodes_[node.key]=node}updateNode_(node,value,size){this.totalSize_+=size-node.size;console.assert(this.totalSize_>=0&&this.totalSize_<=this.maxSize_);node.value=value;node.size=size}moveNodeToHead_(node){this.list_.remove(node);this.list_.prepend(node)}}// Copyright 2018 The Chromium Authors. All rights reserved.
const LoadImageResponseStatus={SUCCESS:"success",ERROR:"error"};class LoadImageResponse{constructor(status,taskId,opt_result){this.status=status;this.taskId=taskId;if(status===LoadImageResponseStatus.ERROR){return}assert(opt_result);this.width=opt_result.width;this.height=opt_result.height;this.ifd=opt_result.ifd;this.data=opt_result.data}static cacheValue(response,timestamp){if(response.status===LoadImageResponseStatus.ERROR){return null}assert(response.width);assert(response.height);assert(response.data);return{timestamp:timestamp||null,width:response.width,height:response.height,ifd:response.ifd,data:response.data}}}class LoadImageRequest{constructor(){this.url;this.orientation;this.scale;this.width;this.height;this.maxWidth;this.maxHeight;this.taskId;this.cancel;this.crop;this.timestamp;this.cache;this.priority}static cacheKey(request){if(/^data:/i.test(request.url)){return null}return JSON.stringify({url:request.url,orientation:request.orientation,scale:request.scale,width:request.width,height:request.height,maxWidth:request.maxWidth,maxHeight:request.maxHeight})}static createCancel(taskId){return{taskId:taskId,cancel:true}}static createRequest(params){return params}static createFullImageRequest(params){return params}static createForUrl(url){return{url:url}}}// Copyright 2013 The Chromium Authors. All rights reserved.
function ImageLoaderClient(){this.lastTaskId_=0;this.cache_=new LRUCache(ImageLoaderClient.CACHE_MEMORY_LIMIT)}ImageLoaderClient.EXTENSION_ID="pmfjbimdmchhbnneeidfognadeopoehp";ImageLoaderClient.getInstance=function(){if(!ImageLoaderClient.instance_){ImageLoaderClient.instance_=new ImageLoaderClient}return ImageLoaderClient.instance_};ImageLoaderClient.recordBinary=function(name,value){chrome.metricsPrivate.recordValue({metricName:"ImageLoader.Client."+name,type:chrome.metricsPrivate.MetricTypeType.HISTOGRAM_LINEAR,min:1,max:2,buckets:3},value?1:0)};ImageLoaderClient.recordPercentage=function(name,value){chrome.metricsPrivate.recordPercentage("ImageLoader.Client."+name,Math.round(value))};ImageLoaderClient.sendMessage_=function(request,callback){chrome.runtime.sendMessage(ImageLoaderClient.EXTENSION_ID,request,callback)};ImageLoaderClient.CLIENT_URL_REGEX=/filesystem:chrome-extension:\/\/[a-z]+/;ImageLoaderClient.CLIENT_SWA_REGEX=/filesystem:chrome:\/\/file-manager/;ImageLoaderClient.IMAGE_LOADER_URL="filesystem:chrome-extension://"+ImageLoaderClient.EXTENSION_ID;ImageLoaderClient.prototype.load=function(request,callback){ImageLoaderClient.recordPercentage("Cache.Usage",this.cache_.size()/ImageLoaderClient.CACHE_MEMORY_LIMIT*100);request.url=request.url.replace(ImageLoaderClient.CLIENT_URL_REGEX,ImageLoaderClient.IMAGE_LOADER_URL);request.url=request.url.replace(ImageLoaderClient.CLIENT_SWA_REGEX,ImageLoaderClient.IMAGE_LOADER_URL);const cacheKey=LoadImageRequest.cacheKey(request);if(cacheKey){if(request.cache){ImageLoaderClient.recordBinary("Cached",true);let cachedValue=this.cache_.get(cacheKey);if(cachedValue&&cachedValue.timestamp!=request.timestamp){this.cache_.remove(cacheKey);cachedValue=null}if(cachedValue&&cachedValue.data&&cachedValue.width&&cachedValue.height){ImageLoaderClient.recordBinary("Cache.HitMiss",true);callback(new LoadImageResponse(LoadImageResponseStatus.SUCCESS,null,{width:cachedValue.width,height:cachedValue.height,ifd:cachedValue.ifd,data:cachedValue.data}));return null}else{ImageLoaderClient.recordBinary("Cache.HitMiss",false)}}else{ImageLoaderClient.recordBinary("Cached",false);this.cache_.remove(cacheKey)}}this.lastTaskId_++;request.taskId=this.lastTaskId_;ImageLoaderClient.sendMessage_(request,function(result_data){const result=result_data;if(cacheKey&&request.cache){const value=LoadImageResponse.cacheValue(result,request.timestamp);if(value){this.cache_.put(cacheKey,value,value.data.length)}}callback(result)}.bind(this));return request.taskId};ImageLoaderClient.prototype.cancel=function(taskId){ImageLoaderClient.sendMessage_(LoadImageRequest.createCancel(taskId),(function(result){}))};ImageLoaderClient.CACHE_MEMORY_LIMIT=20*1024*1024;ImageLoaderClient.loadToImage=function(request,image,onSuccess,onError){const callback=function(result){if(result.status==LoadImageResponseStatus.ERROR){onError();return}image.src=result.data;onSuccess()};return ImageLoaderClient.getInstance().load(request,callback)};// Copyright 2014 The Chromium Authors. All rights reserved.
class ThumbnailLoader{constructor(entry,opt_loaderType,opt_metadata,opt_mediaType,opt_loadTargets,opt_priority){this.canvasUpToDate_=false;this.image_=null;this.taskId_=null;this.canvas_=null;const loadTargets=opt_loadTargets||[ThumbnailLoader.LoadTarget.CONTENT_METADATA,ThumbnailLoader.LoadTarget.EXTERNAL_METADATA,ThumbnailLoader.LoadTarget.FILE_ENTRY];this.entry_=entry;this.mediaType_=opt_mediaType||FileType.getMediaType(entry);this.loaderType_=opt_loaderType||ThumbnailLoader.LoaderType.IMAGE;this.metadata_=opt_metadata;this.priority_=opt_priority!==undefined?opt_priority:2;this.transform_=null;this.loadTarget_=null;if(!opt_metadata){this.thumbnailUrl_=entry.toURL();this.loadTarget_=ThumbnailLoader.LoadTarget.FILE_ENTRY;return}this.fallbackUrl_=null;this.thumbnailUrl_=null;if(opt_metadata.external&&opt_metadata.external.customIconUrl){this.fallbackUrl_=opt_metadata.external.customIconUrl}const mimeType=opt_metadata&&opt_metadata.contentMimeType;for(let i=0;i<loadTargets.length;i++){switch(loadTargets[i]){case ThumbnailLoader.LoadTarget.CONTENT_METADATA:if(opt_metadata.thumbnail&&opt_metadata.thumbnail.url){this.thumbnailUrl_=opt_metadata.thumbnail.url;this.transform_=opt_metadata.thumbnail&&opt_metadata.thumbnail.transform;this.loadTarget_=ThumbnailLoader.LoadTarget.CONTENT_METADATA}break;case ThumbnailLoader.LoadTarget.EXTERNAL_METADATA:if(opt_metadata.external&&opt_metadata.external.thumbnailUrl&&(!opt_metadata.external.present||!FileType.isImage(entry,mimeType))){this.thumbnailUrl_=opt_metadata.external.thumbnailUrl;this.croppedThumbnailUrl_=opt_metadata.external.croppedThumbnailUrl;this.loadTarget_=ThumbnailLoader.LoadTarget.EXTERNAL_METADATA}break;case ThumbnailLoader.LoadTarget.FILE_ENTRY:if(FileType.isImage(entry,mimeType)||FileType.isVideo(entry,mimeType)||FileType.isRaw(entry,mimeType)||FileType.isPDF(entry,mimeType)){this.thumbnailUrl_=entry.toURL();this.transform_=opt_metadata.media&&opt_metadata.media.imageTransform;this.loadTarget_=ThumbnailLoader.LoadTarget.FILE_ENTRY}break;default:assertNotReached("Unkonwn load type: "+loadTargets[i])}if(this.thumbnailUrl_){break}}if(!this.thumbnailUrl_&&this.fallbackUrl_){this.thumbnailUrl_=this.fallbackUrl_;this.fallbackUrl_=null}}getLoadTarget(){return this.loadTarget_}load(box,fillMode,onSuccess,autoFillThreshold,boxWidth,boxHeight){if(!this.thumbnailUrl_){box.setAttribute("generic-thumbnail",this.mediaType_);return}this.cancel();this.canvasUpToDate_=false;this.image_=new Image;this.image_.setAttribute("alt",this.entry_.name);this.image_.onload=()=>{this.attachImage_(box,fillMode,autoFillThreshold,boxWidth,boxHeight);onSuccess(this.image_)};this.image_.onerror=()=>{if(this.fallbackUrl_){this.thumbnailUrl_=this.fallbackUrl_;this.fallbackUrl_=null;this.load(box,fillMode,onSuccess,ThumbnailLoader.AUTO_FILL_THRESHOLD_DEFAULT_VALUE,box.clientWidth,box.clientHeight)}else{box.setAttribute("generic-thumbnail",this.mediaType_)}};if(this.image_.src){console.warn("Thumbnail already loaded: "+this.thumbnailUrl_);return}const wasAttached=box.ownerDocument.contains(box);const modificationTime=this.metadata_&&this.metadata_.filesystem&&this.metadata_.filesystem.modificationTime&&this.metadata_.filesystem.modificationTime.getTime();this.taskId_=ImageLoaderClient.loadToImage(LoadImageRequest.createRequest({url:this.thumbnailUrl_,maxWidth:ThumbnailLoader.THUMBNAIL_MAX_WIDTH,maxHeight:ThumbnailLoader.THUMBNAIL_MAX_HEIGHT,cache:true,priority:this.priority_,timestamp:modificationTime,orientation:this.transform_}),this.image_,(()=>{}),(()=>{this.image_.onerror(new Event("load-error"))}))}loadAsDataUrl(fillMode){assert(fillMode===ThumbnailLoader.FillMode.FIT||fillMode===ThumbnailLoader.FillMode.OVER_FILL);return new Promise(((resolve,reject)=>{let requestUrl=this.thumbnailUrl_;if(fillMode===ThumbnailLoader.FillMode.OVER_FILL){requestUrl=this.croppedThumbnailUrl_||this.thumbnailUrl_}if(!requestUrl){const error=LoadImageResponseStatus.ERROR;reject(new LoadImageResponse(error,0));return}const modificationTime=this.metadata_&&this.metadata_.filesystem&&this.metadata_.filesystem.modificationTime&&this.metadata_.filesystem.modificationTime.getTime();const request=LoadImageRequest.createRequest({url:requestUrl,maxWidth:ThumbnailLoader.THUMBNAIL_MAX_WIDTH,maxHeight:ThumbnailLoader.THUMBNAIL_MAX_HEIGHT,cache:true,priority:this.priority_,timestamp:modificationTime,orientation:this.transform_});if(fillMode===ThumbnailLoader.FillMode.OVER_FILL){request.width=360;request.height=360;request.crop=true}ImageLoaderClient.getInstance().load(request,(result=>{if(result.status===LoadImageResponseStatus.SUCCESS){resolve(result)}else{reject(result)}}))}))}cancel(){if(this.taskId_){this.image_.onload=()=>{};this.image_.onerror=()=>{};ImageLoaderClient.getInstance().cancel(this.taskId_);this.taskId_=null}}hasValidImage(){return!!(this.image_&&this.image_.width&&this.image_.height)}getWidth(){return this.image_.width}getHeight(){return this.image_.height}loadDetachedImage(callback){if(!this.thumbnailUrl_){callback(true);return}this.cancel();this.canvasUpToDate_=false;this.image_=new Image;this.image_.onload=callback.bind(null,true);this.image_.onerror=callback.bind(null,false);const modificationTime=this.metadata_&&this.metadata_.filesystem&&this.metadata_.filesystem.modificationTime&&this.metadata_.filesystem.modificationTime.getTime();this.taskId_=ImageLoaderClient.loadToImage(LoadImageRequest.createRequest({url:this.thumbnailUrl_,maxWidth:ThumbnailLoader.THUMBNAIL_MAX_WIDTH,maxHeight:ThumbnailLoader.THUMBNAIL_MAX_HEIGHT,cache:true,priority:this.priority_,timestamp:modificationTime,orientation:this.transform_}),this.image_,(()=>{}),(()=>{this.image_.onerror(new Event("load-error"))}))}renderMedia_(){if(this.loaderType_!==ThumbnailLoader.LoaderType.CANVAS){return}if(!this.canvas_){this.canvas_=document.createElement("canvas")}if(!this.canvasUpToDate_){this.canvas_.width=this.image_.width;this.canvas_.height=this.image_.height;const context=this.canvas_.getContext("2d");context.drawImage(this.image_,0,0);this.canvasUpToDate_=true}}attachImage_(box,fillMode,autoFillThreshold,boxWidth,boxHeight){if(!this.hasValidImage()){box.setAttribute("generic-thumbnail",this.mediaType_);return}this.renderMedia_();const attachableMedia=this.loaderType_===ThumbnailLoader.LoaderType.CANVAS?this.canvas_:this.image_;ThumbnailLoader.centerImage_(box,attachableMedia,fillMode,autoFillThreshold,boxWidth,boxHeight);if(attachableMedia.parentNode!==box){box.textContent="";box.appendChild(attachableMedia)}if(!this.taskId_){attachableMedia.classList.add("cached")}}getImage(){this.renderMedia_();return this.loaderType_===ThumbnailLoader.LoaderType.IMAGE?this.image_:this.canvas_}static centerImage_(box,img,fillMode,autoFillThreshold,boxWidth,boxHeight){const imageWidth=img.width;const imageHeight=img.height;let fractionX;let fractionY;let fill;switch(fillMode){case ThumbnailLoader.FillMode.FILL:case ThumbnailLoader.FillMode.OVER_FILL:fill=true;break;case ThumbnailLoader.FillMode.FIT:fill=false;break;case ThumbnailLoader.FillMode.AUTO:const imageRatio=imageWidth/imageHeight;let boxRatio=1;if(boxWidth&&boxHeight){boxRatio=boxWidth/boxHeight}const ratioFactor=boxRatio/imageRatio;fill=ratioFactor>=1-autoFillThreshold&&ratioFactor<=1+autoFillThreshold;break}if(boxWidth&&boxHeight){const fitScaleX=boxWidth/imageWidth;const fitScaleY=boxHeight/imageHeight;let scale=fill?Math.max(fitScaleX,fitScaleY):Math.min(fitScaleX,fitScaleY);if(fillMode!==ThumbnailLoader.FillMode.OVER_FILL){scale=Math.min(scale,1)}fractionX=imageWidth*scale/boxWidth;fractionY=imageHeight*scale/boxHeight}else{fractionX=imageWidth/imageHeight;fractionY=1;if(fractionX<1===!!fill){fractionY=1/fractionX;fractionX=1}}function percent(fraction){return(fraction*100).toFixed(2)+"%"}img.style.width=percent(fractionX);img.style.height=percent(fractionY);img.style.left=percent((1-fractionX)/2);img.style.top=percent((1-fractionY)/2)}}ThumbnailLoader.AUTO_FILL_THRESHOLD_DEFAULT_VALUE=.3;ThumbnailLoader.FillMode={FILL:0,FIT:1,OVER_FILL:2,AUTO:3};ThumbnailLoader.LoaderType={IMAGE:0,CANVAS:1};ThumbnailLoader.LoadTarget={EXTERNAL_METADATA:"externalMetadata",CONTENT_METADATA:"contentMetadata",FILE_ENTRY:"fileEntry"};ThumbnailLoader.THUMBNAIL_MAX_WIDTH=500;ThumbnailLoader.THUMBNAIL_MAX_HEIGHT=500;// Copyright 2015 The Chromium Authors. All rights reserved.
const{util:util}=wrappedUtil;class ContentMetadataProvider extends MetadataProvider{constructor(opt_messagePort){super(ContentMetadataProvider.PROPERTY_NAMES);this.urlFilter_=/.*/;this.initialized_=false;this.callbacks_={};this.dispatcher_=this.createSharedWorker_(opt_messagePort);this.dispatcher_.onmessage=this.onMessage_.bind(this);this.dispatcher_.onmessageerror=error=>{console.error("ContentMetadataProvider worker msg error:",error)};this.dispatcher_.postMessage({verb:"init"});this.dispatcher_.start()}createSharedWorker_(opt_messagePort){if(opt_messagePort){return opt_messagePort}const script=ContentMetadataProvider.getWorkerScript();const options=ContentMetadataProvider.loadAsModule_?{type:"module"}:{};const worker=new SharedWorker(script,options);worker.onerror=()=>{console.error("Error to initialize the ContentMetadataProvider "+"SharedWorker: "+script)};return worker.port}static configure(scriptURL,isModule){ContentMetadataProvider.workerScript_=scriptURL;ContentMetadataProvider.loadAsModule_=!!isModule}static getWorkerScript(){return ContentMetadataProvider.workerScript_?ContentMetadataProvider.workerScript_:ContentMetadataProvider.DEFAULT_WORKER_SCRIPT_}static convertContentMetadata(metadata){const item=new MetadataItem;item.contentImageTransform=metadata["imageTransform"];item.contentThumbnailTransform=metadata["thumbnailTransform"];item.contentThumbnailUrl=metadata["thumbnailURL"];item.exifLittleEndian=metadata["littleEndian"];item.ifd=metadata["ifd"];item.imageHeight=metadata["height"];item.imageWidth=metadata["width"];item.mediaMimeType=metadata["mimeType"];return item}get(requests){if(!requests.length){return Promise.resolve([])}const promises=[];for(let i=0;i<requests.length;i++){promises.push(new Promise(function(request,fulfill){this.getImpl_(request.entry,request.names,fulfill)}.bind(this,requests[i])))}return Promise.all(promises)}getImpl_(entry,names,callback){if(entry.isDirectory){const cause="Directories do not have a thumbnail.";const error=this.createError_(entry.toURL(),"get",cause);setTimeout(callback,0,error);return}const type=FileType.getType(entry);if(type&&type.type==="image"){const url=entry.toURL();if(this.callbacks_[url]){this.callbacks_[url].push(callback)}else{this.callbacks_[url]=[callback];this.dispatcher_.postMessage({verb:"request",arguments:[url]})}return}if(type&&type.type==="raw"&&names.includes("ifd")){names.splice(names.indexOf("ifd"),1);function createIfdError(fileEntry,error){const url=fileEntry.toURL();const step="read file entry";const item=new MetadataItem;item.ifdError=new ContentMetadataProvider.Error(url,step,error);return item}new Promise(((resolve,reject)=>{entry.file((file=>{const request=LoadImageRequest.createForUrl(entry.toURL());request.maxWidth=ThumbnailLoader.THUMBNAIL_MAX_WIDTH;request.maxHeight=ThumbnailLoader.THUMBNAIL_MAX_HEIGHT;request.timestamp=file.lastModified;request.cache=true;request.priority=0;ImageLoaderClient.getInstance().load(request,resolve)}),(error=>{callback(createIfdError(entry,error.toString()));reject()}))})).then((result=>{if(result.status===LoadImageResponseStatus.SUCCESS){const item=new MetadataItem;if(result.ifd){item.ifd=JSON.parse(result.ifd)}callback(item)}else{callback(createIfdError(entry,"raw file has no ifd data"))}}));if(!names.length){return}}const fileEntry=entry;this.getContentMetadata_(fileEntry,names).then(callback)}getContentMetadata_(entry,names){const getContentMimeType=new Promise(((resolve,reject)=>{chrome.fileManagerPrivate.getContentMimeType(entry,resolve)})).then((mimeType=>{if(chrome.runtime.lastError){const error=chrome.runtime.lastError.toString();return this.createError_(entry.toURL(),"sniff mime type",error)}const item=new MetadataItem;item.contentMimeType=mimeType;item.mediaMimeType=mimeType;return item}));function getMediaMetadataType(names,type){if(!type||!names.length){return null}else if(!type.startsWith("audio/")&&!type.startsWith("video/")){return null}else if(names.includes("contentThumbnailUrl")){return true}else if(names.find((name=>name.startsWith("media")&&name!=="mediaMimeType"))){return false}return null}return getContentMimeType.then((item=>{const extract=getMediaMetadataType(names,item.contentMimeType);if(extract===null){return item}return new Promise(((resolve,reject)=>{const contentMimeType=assert(item.contentMimeType);chrome.fileManagerPrivate.getContentMetadata(entry,contentMimeType,!!extract,resolve)})).then((metadata=>{if(chrome.runtime.lastError){const error=chrome.runtime.lastError.toString();return this.createError_(entry.toURL(),"content metadata",error)}return this.convertMediaMetadataToMetadataItem_(entry,metadata)})).catch(((_,error="Conversion failed")=>this.createError_(entry.toURL(),"convert metadata",error)))}))}onMessage_(event){const data=event.data;switch(data.verb){case"initialized":this.onInitialized_(data.arguments[0]);break;case"result":this.onResult_(data.arguments[0],data.arguments[1]?ContentMetadataProvider.convertContentMetadata(data.arguments[1]):new MetadataItem);break;case"error":const error=this.createError_(data.arguments[0],data.arguments[1],data.arguments[2]);this.onResult_(data.arguments[0],error);break;case"log":this.onLog_(data.arguments[0]);break;default:assertNotReached();break}}onInitialized_(regexp){this.urlFilter_=regexp;util.testSendMessage("worker-initialized");this.initialized_=true}onResult_(url,metadataItem){const callbacks=this.callbacks_[url];delete this.callbacks_[url];for(let i=0;i<callbacks.length;i++){callbacks[i](metadataItem)}}onLog_(arglist){console.log.apply(console,["ContentMetadataProvider log:"].concat(arglist))}convertMediaMetadataToMetadataItem_(entry,metadata){return new Promise(((resolve,reject)=>{if(!metadata){resolve(this.createError_(entry.toURL(),"metadata result","Failed to parse metadata"));return}const item=new MetadataItem;const mimeType=metadata["mimeType"];item.contentMimeType=mimeType;item.mediaMimeType=mimeType;const trans={scaleX:1,scaleY:1,rotate90:0};if(metadata.rotation){switch(metadata.rotation){case 0:break;case 90:trans.rotate90=1;break;case 180:trans.scaleX*=-1;trans.scaleY*=-1;break;case 270:trans.rotate90=1;trans.scaleX*=-1;trans.scaleY*=-1;break;default:console.error("Unknown rotation angle: ",metadata.rotation)}}if(metadata.rotation){item.contentImageTransform=item.contentThumbnailTransform=trans}item.imageHeight=metadata["height"];item.imageWidth=metadata["width"];item.mediaAlbum=metadata["album"];item.mediaArtist=metadata["artist"];item.mediaDuration=metadata["duration"];item.mediaGenre=metadata["genre"];item.mediaTitle=metadata["title"];if(metadata["track"]){item.mediaTrack=""+metadata["track"]}if(metadata.rawTags){metadata.rawTags.forEach((entry=>{if(entry.type==="mp3"){if(entry.tags["date"]){item.mediaYearRecorded=entry.tags["date"]}if(entry.tags["track"]){item.mediaTrack=entry.tags["track"]}}}))}if(metadata.attachedImages&&metadata.attachedImages.length>0){item.contentThumbnailUrl=metadata.attachedImages[0].data}resolve(item)}))}createError_(url,step,cause){const error=new ContentMetadataProvider.Error(url,step,cause);const item=new MetadataItem;item.contentImageTransformError=error;item.contentThumbnailTransformError=error;item.contentThumbnailUrlError=error;return item}}ContentMetadataProvider.Error=class extends Error{constructor(url,step,cause){super(cause);this.url=url;this.step=step;this.errorDescription=cause}};ContentMetadataProvider.PROPERTY_NAMES=["contentImageTransform","contentThumbnailTransform","contentThumbnailUrl","exifLittleEndian","ifd","imageHeight","imageWidth","mediaAlbum","mediaArtist","mediaDuration","mediaGenre","mediaMimeType","mediaTitle","mediaTrack","mediaYearRecorded"];ContentMetadataProvider.DEFAULT_WORKER_SCRIPT_="chrome-extension://hhaomjibdihmijegdhdafkllkbggdgoj/"+"foreground/js/metadata/metadata_dispatcher.js";ContentMetadataProvider.workerScript_=null;ContentMetadataProvider.loadAsModule_=false;// Copyright 2015 The Chromium Authors. All rights reserved.
class ExternalMetadataProvider extends MetadataProvider{constructor(){super(ExternalMetadataProvider.PROPERTY_NAMES)}get(requests){if(!requests.length){return Promise.resolve([])}return new Promise((fulfill=>{const entries=requests.map((request=>request.entry));const nameMap={};for(let i=0;i<requests.length;i++){for(let j=0;j<requests[i].names.length;j++){nameMap[requests[i].names[j]]=true}}chrome.fileManagerPrivate.getEntryProperties(entries,Object.keys(nameMap),(results=>{if(!chrome.runtime.lastError){fulfill(this.convertResults_(requests,nameMap,assert(results)))}else{fulfill(requests.map((()=>new MetadataItem)))}}))}))}convertResults_(requests,nameMap,propertiesList){const results=[];for(let i=0;i<propertiesList.length;i++){const prop=propertiesList[i];const item=new MetadataItem;if(prop.alternateUrl!==undefined||nameMap["alternateUrl"]){item.alternateUrl=prop.alternateUrl}if(prop.availableOffline!==undefined||nameMap["availableOffline"]){item.availableOffline=prop.availableOffline}if(prop.availableWhenMetered!==undefined||nameMap["availableWhenMetered"]){item.availableWhenMetered=prop.availableWhenMetered}if(prop.contentMimeType!==undefined||nameMap["contentMimeType"]){item.contentMimeType=prop.contentMimeType||""}if(prop.croppedThumbnailUrl!==undefined||nameMap["croppedThumbnailUrl"]){item.croppedThumbnailUrl=prop.croppedThumbnailUrl}if(prop.customIconUrl!==undefined||nameMap["customIconUrl"]){item.customIconUrl=prop.customIconUrl||""}if(prop.dirty!==undefined||nameMap["dirty"]){item.dirty=prop.dirty}if(prop.externalFileUrl!==undefined||nameMap["externalFileUrl"]){item.externalFileUrl=prop.externalFileUrl}if(prop.hosted!==undefined||nameMap["hosted"]){item.hosted=prop.hosted}if(prop.imageHeight!==undefined||nameMap["imageHeight"]){item.imageHeight=prop.imageHeight}if(prop.imageRotation!==undefined||nameMap["imageRotation"]){item.imageRotation=prop.imageRotation}if(prop.imageWidth!==undefined||nameMap["imageWidth"]){item.imageWidth=prop.imageWidth}if(prop.modificationTime!==undefined||nameMap["modificationTime"]){item.modificationTime=new Date(prop.modificationTime)}if(prop.modificationByMeTime!==undefined||nameMap["modificationByMeTime"]){item.modificationByMeTime=new Date(prop.modificationByMeTime)}if(prop.pinned!==undefined||nameMap["pinned"]){item.pinned=prop.pinned}if(prop.present!==undefined||nameMap["present"]){item.present=prop.present}if(prop.shared!==undefined||nameMap["shared"]){item.shared=prop.shared}if(prop.sharedWithMe!==undefined||nameMap["sharedWithMe"]){item.sharedWithMe=prop.sharedWithMe}if(prop.size!==undefined||nameMap["size"]){item.size=requests[i].entry.isFile?prop.size||0:-1}if(prop.thumbnailUrl!==undefined||nameMap["thumbnailUrl"]){item.thumbnailUrl=prop.thumbnailUrl}if(prop.canCopy!==undefined||nameMap["canCopy"]){item.canCopy=prop.canCopy}if(prop.canDelete!==undefined||nameMap["canDelete"]){item.canDelete=prop.canDelete}if(prop.canRename!==undefined||nameMap["canRename"]){item.canRename=prop.canRename}if(prop.canAddChildren!==undefined||nameMap["canAddChildren"]){item.canAddChildren=prop.canAddChildren}if(prop.canShare!==undefined||nameMap["canShare"]){item.canShare=prop.canShare}if(prop.isMachineRoot!==undefined||nameMap["isMachineRoot"]){item.isMachineRoot=prop.isMachineRoot}if(prop.isExternalMedia!==undefined||nameMap["isExternalMedia"]){item.isExternalMedia=prop.isExternalMedia}if(prop.isArbitrarySyncFolder!==undefined||nameMap["isArbitrarySyncFolder"]){item.isArbitrarySyncFolder=prop.isArbitrarySyncFolder}results.push(item)}return results}}ExternalMetadataProvider.PROPERTY_NAMES=["alternateUrl","availableOffline","availableWhenMetered","contentMimeType","croppedThumbnailUrl","customIconUrl","dirty","externalFileUrl","hosted","imageHeight","imageRotation","imageWidth","modificationTime","modificationByMeTime","pinned","present","shared","sharedWithMe","size","thumbnailUrl","canCopy","canDelete","canRename","canAddChildren","canShare","isMachineRoot","isExternalMedia","isArbitrarySyncFolder"];// Copyright 2015 The Chromium Authors. All rights reserved.
class FileSystemMetadataProvider extends MetadataProvider{constructor(){super(FileSystemMetadataProvider.PROPERTY_NAMES)}get(requests){if(!requests.length){return Promise.resolve([])}return Promise.all(requests.map((request=>new Promise(((fulfill,reject)=>{request.entry.getMetadata(fulfill,reject)})).then((result=>{const item=new MetadataItem;item.modificationTime=result.modificationTime;item.size=request.entry.isDirectory?-1:result.size;item.present=true;item.availableOffline=true;return item}),(error=>{console.warn("getMetadata failure for: "+request.entry.toURL(),error);return new MetadataItem})))))}}FileSystemMetadataProvider.PROPERTY_NAMES=["modificationTime","size","present","availableOffline"];// Copyright 2015 The Chromium Authors. All rights reserved.
class MetadataCacheItem{constructor(){this.properties_={}}createRequests(names){const loadRequested=[];for(let i=0;i<names.length;i++){const name=names[i];assert(!/Error$/.test(name));if(this.properties_[name]&&this.properties_[name].state!==MetadataCacheItemPropertyState.INVALIDATED){continue}loadRequested.push(name)}return loadRequested}startRequests(requestId,names){for(let i=0;i<names.length;i++){const name=names[i];assert(!/Error$/.test(name));if(!this.properties_[name]){this.properties_[name]=new MetadataCacheItemProperty}this.properties_[name].requestId=requestId;this.properties_[name].state=MetadataCacheItemPropertyState.LOADING}}storeProperties(requestId,typedObject){let changed=false;const object=typedObject;for(const name in object){if(/.Error$/.test(name)&&object[name]){object[name.substr(0,name.length-5)]=undefined}}for(const name in object){if(/.Error$/.test(name)){continue}if(!this.properties_[name]){this.properties_[name]=new MetadataCacheItemProperty}if(requestId<this.properties_[name].requestId||this.properties_[name].state===MetadataCacheItemPropertyState.FULFILLED){continue}changed=true;this.properties_[name].requestId=requestId;this.properties_[name].value=object[name];this.properties_[name].error=object[name+"Error"];this.properties_[name].state=MetadataCacheItemPropertyState.FULFILLED}return changed}invalidate(requestId){for(const name in this.properties_){assert(this.properties_[name].requestId<requestId);this.properties_[name].requestId=requestId;this.properties_[name].state=MetadataCacheItemPropertyState.INVALIDATED}}get(names){const result=new MetadataItem;for(let i=0;i<names.length;i++){const name=names[i];assert(!/Error$/.test(name));if(this.properties_[name]){result[name]=this.properties_[name].value;result[name+"Error"]=this.properties_[name].error}}return result}clone(){const clonedItem=new MetadataCacheItem;for(const name in this.properties_){const property=this.properties_[name];clonedItem.properties_[name]=new MetadataCacheItemProperty;clonedItem.properties_[name].value=property.value;clonedItem.properties_[name].error=property.error;clonedItem.properties_[name].requestId=property.requestId;clonedItem.properties_[name].state=property.state}return clonedItem}hasFreshCache(names){for(let i=0;i<names.length;i++){if(!(this.properties_[names[i]]&&this.properties_[names[i]].state===MetadataCacheItemPropertyState.FULFILLED)){return false}}return true}}const MetadataCacheItemPropertyState={INVALIDATED:"invalidated",LOADING:"loading",FULFILLED:"fulfilled"};class MetadataCacheItemProperty{constructor(){this.value=null;this.error=null;this.requestId=-1;this.state=MetadataCacheItemPropertyState.INVALIDATED}}// Copyright 2015 The Chromium Authors. All rights reserved.
const{util:util$1}=wrappedUtil;class MetadataCacheSet extends NativeEventTarget{constructor(items){super();this.items_=items}createRequests(entries,names){const urls=util$1.entriesToURLs(entries);const requests=[];for(let i=0;i<entries.length;i++){const item=this.items_.peek(urls[i]);const requestedNames=item?item.createRequests(names):names;if(requestedNames.length){requests.push(new MetadataRequest(entries[i],requestedNames))}}return requests}startRequests(requestId,requests){for(let i=0;i<requests.length;i++){const request=requests[i];const url=requests[i].entry["cachedUrl"]||requests[i].entry.toURL();let item=this.items_.peek(url);if(!item){item=new MetadataCacheItem;this.items_.put(url,item)}item.startRequests(requestId,request.names)}}storeProperties(requestId,entries,results,names){const changedEntries=[];const urls=util$1.entriesToURLs(entries);const entriesMap=new Map;for(let i=0;i<entries.length;i++){const url=urls[i];const item=this.items_.peek(url);if(item&&item.storeProperties(requestId,results[i])){changedEntries.push(entries[i]);entriesMap.set(url,entries[i])}}if(!changedEntries.length){return false}const event=new Event("update");event.entries=changedEntries;event.entriesMap=entriesMap;event.names=new Set(names);this.dispatchEvent(event);return true}get(entries,names){const results=[];const urls=util$1.entriesToURLs(entries);for(let i=0;i<entries.length;i++){const item=this.items_.get(urls[i]);results.push(item?item.get(names):{})}return results}invalidate(requestId,entries){const urls=util$1.entriesToURLs(entries);for(let i=0;i<entries.length;i++){const item=this.items_.peek(urls[i]);if(item){item.invalidate(requestId)}}}clear(urls){for(let i=0;i<urls.length;i++){this.items_.remove(urls[i])}}clearAll(){this.items_.removeAll()}createSnapshot(entries){const items={};const urls=util$1.entriesToURLs(entries);for(let i=0;i<entries.length;i++){const url=urls[i];const item=this.items_.peek(url);if(item){items[url]=item.clone()}}return new MetadataCacheSet(new MetadataCacheSetStorageForObject(items))}hasFreshCache(entries,names){if(!names.length){return true}const urls=util$1.entriesToURLs(entries);for(let i=0;i<entries.length;i++){const item=this.items_.peek(urls[i]);if(!(item&&item.hasFreshCache(names))){return false}}return true}}class MetadataCacheSetStorageForObject{constructor(items){this.items_=items}get(url){return this.items_[url]}peek(url){return this.items_[url]}put(url,item){this.items_[url]=item}remove(url){delete this.items_[url]}removeAll(){for(const url in this.items_){delete this.items_[url]}}}// Copyright 2015 The Chromium Authors. All rights reserved.
const{VolumeManagerCommon:VolumeManagerCommon$1}=wrappedVolumeManagerCommon;class MultiMetadataProvider extends MetadataProvider{constructor(fileSystemMetadataProvider,externalMetadataProvider,contentMetadataProvider,volumeManager){super(FileSystemMetadataProvider.PROPERTY_NAMES.concat(ExternalMetadataProvider.PROPERTY_NAMES).concat(ContentMetadataProvider.PROPERTY_NAMES));this.fileSystemMetadataProvider_=fileSystemMetadataProvider;this.externalMetadataProvider_=externalMetadataProvider;this.contentMetadataProvider_=contentMetadataProvider;this.volumeManager_=volumeManager}get(requests){const fileSystemRequests=[];const externalRequests=[];const contentRequests=[];const fallbackContentRequests=[];requests.forEach((request=>{const fileSystemPropertyNames=[];const externalPropertyNames=[];const contentPropertyNames=[];const fallbackContentPropertyNames=[];for(let i=0;i<request.names.length;i++){const name=request.names[i];const isFileSystemProperty=FileSystemMetadataProvider.PROPERTY_NAMES.indexOf(name)!==-1;const isExternalProperty=ExternalMetadataProvider.PROPERTY_NAMES.indexOf(name)!==-1;const isContentProperty=ContentMetadataProvider.PROPERTY_NAMES.indexOf(name)!==-1;assert(isFileSystemProperty||isExternalProperty||isContentProperty);assert(!(isFileSystemProperty&&isContentProperty));if(isExternalProperty&&isContentProperty){externalPropertyNames.push(name);fallbackContentPropertyNames.push(name);continue}if(isFileSystemProperty){fileSystemPropertyNames.push(name)}if(isExternalProperty){externalPropertyNames.push(name)}if(isContentProperty){contentPropertyNames.push(name)}}const volumeInfo=this.volumeManager_.getVolumeInfo(request.entry);const addRequests=(list,names)=>{if(names.length){list.push(new MetadataRequest(request.entry,names))}};if(volumeInfo&&(volumeInfo.volumeType===VolumeManagerCommon$1.VolumeType.DRIVE||volumeInfo.volumeType===VolumeManagerCommon$1.VolumeType.PROVIDED)){if(fallbackContentPropertyNames.length&&externalPropertyNames.indexOf("present")===-1){externalPropertyNames.push("present")}addRequests(externalRequests,externalPropertyNames);addRequests(contentRequests,contentPropertyNames);addRequests(fallbackContentRequests,fallbackContentPropertyNames)}else if(volumeInfo&&volumeInfo.volumeType===VolumeManagerCommon$1.VolumeType.DOCUMENTS_PROVIDER){addRequests(externalRequests,MultiMetadataProvider.DOCUMENTS_PROVIDER_EXTERNAL_PROPERTY_NAMES)}else{addRequests(fileSystemRequests,fileSystemPropertyNames);addRequests(contentRequests,contentPropertyNames.concat(fallbackContentPropertyNames))}}));const get=(provider,inRequests)=>provider.get(inRequests).then((results=>({requests:inRequests,results:results})));const fileSystemPromise=get(this.fileSystemMetadataProvider_,fileSystemRequests);const externalPromise=get(this.externalMetadataProvider_,externalRequests);const contentPromise=get(this.contentMetadataProvider_,contentRequests);const fallbackContentPromise=externalPromise.then((requestsAndResults=>{const requests=requestsAndResults.requests;const results=requestsAndResults.results;const dirtyMap=[];for(let i=0;i<results.length;i++){dirtyMap[requests[i].entry.toURL()]=results[i].present}return get(this.contentMetadataProvider_,fallbackContentRequests.filter((request=>dirtyMap[request.entry.toURL()])))}));return Promise.all([fileSystemPromise,externalPromise,contentPromise,fallbackContentPromise]).then((resultsList=>{const integratedResults={};for(let i=0;i<resultsList.length;i++){const inRequests=resultsList[i].requests;const results=resultsList[i].results;assert(inRequests.length===results.length);for(let j=0;j<results.length;j++){const url=inRequests[j].entry.toURL();integratedResults[url]=integratedResults[url]||new MetadataItem;for(const name in results[j]){integratedResults[url][name]=results[j][name]}}}return requests.map((request=>integratedResults[request.entry.toURL()]||new MetadataItem))}))}}MultiMetadataProvider.DOCUMENTS_PROVIDER_EXTERNAL_PROPERTY_NAMES=["canCopy","canDelete","canRename","canAddChildren","modificationTime","size"];// Copyright 2015 The Chromium Authors. All rights reserved.
const{util:util$2}=wrappedUtil;class MetadataStats{constructor(){this.fromCache=0;this.fullFetch=0;this.invalidateCount=0;this.clearCacheCount=0;this.clearAllCount=0}}class MetadataModel{constructor(rawProvider){this.rawProvider_=rawProvider;this.cache_=new MetadataProviderCache;this.callbackRequests_=[];this.stats_=window.IN_TEST?new MetadataStats:null}static create(volumeManager){return new MetadataModel(new MultiMetadataProvider(new FileSystemMetadataProvider,new ExternalMetadataProvider,new ContentMetadataProvider,volumeManager))}getProvider(){return this.rawProvider_}get(entries,names){this.rawProvider_.checkPropertyNames(names);if(this.cache_.hasFreshCache(entries,names)){if(window.IN_TEST){this.stats_.fromCache+=entries.length}return Promise.resolve(this.getCache(entries,names))}if(window.IN_TEST){this.stats_.fullFetch+=entries.length}const requestId=this.cache_.generateRequestId();const snapshot=this.cache_.createSnapshot(entries);const requests=snapshot.createRequests(entries,names);snapshot.startRequests(requestId,requests);this.cache_.startRequests(requestId,requests);const promise=new Promise((fulfill=>{this.callbackRequests_.push(new MetadataProviderCallbackRequest(entries,names,snapshot,fulfill))}));if(requests.length){this.rawProvider_.get(requests).then((list=>{const requestedEntries=[];for(let i=0;i<requests.length;i++){requestedEntries.push(requests[i].entry);for(let j=0;j<requests[i].names.length;j++){const name=requests[i].names[j];if(!(name in list[i])){list[i][name]=undefined}}}this.cache_.storeProperties(requestId,requestedEntries,list,names);let i=0;while(i<this.callbackRequests_.length){if(this.callbackRequests_[i].storeProperties(requestId,requestedEntries,list)){this.callbackRequests_.splice(i,1)}else{i++}}}))}return promise}getCache(entries,names){this.rawProvider_.checkPropertyNames(names);return this.cache_.get(entries,names)}notifyEntriesCreated(entries){this.cache_.clear(util$2.entriesToURLs(entries));if(window.IN_TEST){this.stats_.clearCacheCount+=entries.length}}notifyEntriesRemoved(urls){this.cache_.clear(urls);if(window.IN_TEST){this.stats_.clearCacheCount+=urls.length}}notifyEntriesChanged(entries){this.cache_.invalidate(this.cache_.generateRequestId(),entries);if(window.IN_TEST){this.stats_.invalidateCount+=entries.length}}clearAllCache(){this.cache_.clearAll();if(window.IN_TEST){this.stats_.clearAllCount++}}getStats(){return this.stats_}addEventListener(type,callback){this.cache_.addEventListener(type,callback)}removeEventListener(type,callback){this.cache_.removeEventListener(type,callback)}}class MetadataProviderCallbackRequest{constructor(entries,names,cache,fulfill){this.entries_=entries;this.names_=names;this.cache_=cache;this.fulfill_=fulfill}storeProperties(requestId,entries,objects){this.cache_.storeProperties(requestId,entries,objects,this.names_);if(this.cache_.hasFreshCache(this.entries_,this.names_)){this.fulfill_(this.cache_.get(this.entries_,this.names_));return true}return false}}class MetadataProviderCache extends MetadataCacheSet{constructor(){super(new MetadataCacheSetStorageForObject({}));this.requestIdCounter_=0}generateRequestId(){return this.requestIdCounter_++}}// Copyright 2016 The Chromium Authors. All rights reserved.
class FileListModel extends ArrayDataModel{constructor(metadataModel){super([]);this.metadataModel_=metadataModel;this.setCompareFunction("name",this.compareName_.bind(this));this.setCompareFunction("modificationTime",this.compareMtime_.bind(this));this.setCompareFunction("size",this.compareSize_.bind(this));this.setCompareFunction("type",this.compareType_.bind(this));this.isDescendingOrder_=false;this.numFolders_=0;this.numFiles_=0;this.numImageFiles_=0;this.useModificationByMeTime_=false;this.volumeManager_=null;this.locationInfo_=null}static getFileTypeString(fileType){if(fileType.type==="partition"){return fileType.subtype}if(fileType.subtype){return strf(fileType.name,fileType.subtype)}else{return str(fileType.name)}}sort(field,direction){this.isDescendingOrder_=direction==="desc";ArrayDataModel.prototype.sort.call(this,field,direction)}prepareSort(field,callback){callback()}splice(index,deleteCount,var_args){const insertPos=Math.max(0,Math.min(index,this.indexes_.length));deleteCount=Math.min(deleteCount,this.indexes_.length-insertPos);for(let i=insertPos;i<insertPos+deleteCount;i++){this.onRemoveEntryFromList_(this.array_[this.indexes_[i]])}for(let i=2;i<arguments.length;i++){this.onAddEntryToList_(arguments[i])}let comp=null;if(this.sortStatus.field&&this.compareFunctions_){const compareFunction=this.compareFunctions_[this.sortStatus.field];if(compareFunction){const dirMultiplier=this.sortStatus.direction==="desc"?-1:1;comp=(a,b)=>compareFunction(a,b)*dirMultiplier}}const newItems=[];for(let i=0;i<arguments.length-2;i++){newItems.push(arguments[i+2])}if(comp){newItems.sort(comp)}const deletedItems=[];const currentItems=[];for(let i=0;i<this.indexes_.length;i++){const item=this.array_[this.indexes_[i]];if(insertPos<=i&&i<insertPos+deleteCount){deletedItems.push(item)}else{currentItems.push(item)}}const permutation=new Array(this.indexes_.length);for(let i=0;i<permutation.length;i++){permutation[i]=-1}this.indexes_=[];this.array_=[];let p=0;let q=0;while(p<currentItems.length||q<newItems.length){const currentIndex=p+q;this.indexes_.push(currentIndex);let shouldPushCurrentItem;if(q===newItems.length){shouldPushCurrentItem=true}else if(p===currentItems.length){shouldPushCurrentItem=false}else{if(comp){shouldPushCurrentItem=comp(currentItems[p],newItems[q])<=0}else{shouldPushCurrentItem=p<insertPos}}if(shouldPushCurrentItem){this.array_.push(currentItems[p]);if(p<insertPos){permutation[p]=currentIndex}else{permutation[p+deleteCount]=currentIndex}p++}else{this.array_.push(newItems[q]);q++}}let spliceIndex=insertPos;if(arguments.length>2){for(let i=0;i<this.indexes_.length;i++){if(this.array_[this.indexes_[i]]===arguments[2]){spliceIndex=i;break}}}this.dispatchPermutedEvent_(permutation);const spliceEvent=new Event("splice");spliceEvent.removed=deletedItems;spliceEvent.added=Array.prototype.slice.call(arguments,2);spliceEvent.index=spliceIndex;this.dispatchEvent(spliceEvent);return deletedItems}replaceItem(oldItem,newItem){this.onRemoveEntryFromList_(oldItem);this.onAddEntryToList_(newItem);ArrayDataModel.prototype.replaceItem.apply(this,arguments)}getFileCount(){return this.numFiles_}getFolderCount(){return this.numFolders_}isImageDominant(){return this.numFiles_>0&&this.numImageFiles_*10>=this.numFiles_*8}setUseModificationByMeTime(useModificationByMeTime){this.useModificationByMeTime_=useModificationByMeTime}onAddEntryToList_(entry){if(entry.isDirectory){this.numFolders_++}else{this.numFiles_++}const mimeType=this.metadataModel_.getCache([entry],["contentMimeType"])[0].contentMimeType;if(FileType.isImage(entry,mimeType)||FileType.isRaw(entry,mimeType)){this.numImageFiles_++}}onRemoveEntryFromList_(entry){if(entry.isDirectory){this.numFolders_--}else{this.numFiles_--}const mimeType=this.metadataModel_.getCache([entry],["contentMimeType"])[0].contentMimeType;if(FileType.isImage(entry,mimeType)||FileType.isRaw(entry,mimeType)){this.numImageFiles_--}}compareName_(a,b){if(a.isDirectory!==b.isDirectory){return a.isDirectory===this.isDescendingOrder_?1:-1}return util$3.compareName(a,b)}compareLabel_(a,b){if(!this.locationInfo_&&this.volumeManager_){this.locationInfo_=this.volumeManager_.getLocationInfo(a)}if(a.isDirectory!==b.isDirectory){return a.isDirectory===this.isDescendingOrder_?1:-1}return util$3.compareLabel(this.locationInfo_,a,b)}compareMtime_(a,b){if(a.isDirectory!==b.isDirectory){return a.isDirectory===this.isDescendingOrder_?1:-1}const properties=this.metadataModel_.getCache([a,b],["modificationTime","modificationByMeTime"]);const aTime=this.getMtime_(properties[0]);const bTime=this.getMtime_(properties[1]);if(aTime>bTime){return 1}if(aTime<bTime){return-1}return util$3.compareName(a,b)}getMtime_(properties){if(this.useModificationByMeTime_){return properties.modificationByMeTime||properties.modificationTime||0}return properties.modificationTime||0}compareSize_(a,b){if(a.isDirectory!==b.isDirectory){return a.isDirectory===this.isDescendingOrder_?1:-1}const properties=this.metadataModel_.getCache([a,b],["size"]);const aSize=properties[0].size||0;const bSize=properties[1].size||0;return aSize!==bSize?aSize-bSize:util$3.compareName(a,b)}compareType_(a,b){if(a.isDirectory!==b.isDirectory){return a.isDirectory===this.isDescendingOrder_?1:-1}const properties=this.metadataModel_.getCache([a,b],["contentMimeType"]);const aType=FileListModel.getFileTypeString(FileType.getType(a,properties[0].contentMimeType));const bType=FileListModel.getFileTypeString(FileType.getType(b,properties[1].contentMimeType));const result=util$3.collator.compare(aType,bType);return result!==0?result:util$3.compareName(a,b)}InitNewDirContents(volumeManager){this.volumeManager_=volumeManager;this.locationInfo_=null;this.setCompareFunction("name",this.compareLabel_.bind(this))}}// Copyright 2015 The Chromium Authors. All rights reserved.
class ThumbnailModel{constructor(metadataModel){this.metadataModel_=metadataModel}get(entries){const results={};return this.metadataModel_.get(entries,["modificationTime","customIconUrl","contentMimeType","thumbnailUrl","croppedThumbnailUrl","present"]).then((metadataList=>{const contentRequestEntries=[];for(let i=0;i<entries.length;i++){const url=entries[i].toURL();results[url]={filesystem:{modificationTime:metadataList[i].modificationTime,modificationTimeError:metadataList[i].modificationTimeError},external:{thumbnailUrl:metadataList[i].thumbnailUrl,thumbnailUrlError:metadataList[i].thumbnailUrlError,croppedThumbnailUrl:metadataList[i].croppedThumbnailUrl,croppedThumbnailUrlError:metadataList[i].croppedThumbnailUrlError,customIconUrl:metadataList[i].customIconUrl,customIconUrlError:metadataList[i].customIconUrlError,present:metadataList[i].present,presentError:metadataList[i].presentError},thumbnail:{},media:{}};const canUseContentThumbnail=metadataList[i].present&&(FileType.isImage(entries[i],metadataList[i].contentMimeType)||FileType.isAudio(entries[i],metadataList[i].contentMimeType));if(canUseContentThumbnail){contentRequestEntries.push(entries[i])}}if(contentRequestEntries.length){return this.metadataModel_.get(contentRequestEntries,["contentThumbnailUrl","contentThumbnailTransform","contentImageTransform"]).then((contentMetadataList=>{for(let i=0;i<contentRequestEntries.length;i++){const url=contentRequestEntries[i].toURL();results[url].thumbnail.url=contentMetadataList[i].contentThumbnailUrl;results[url].thumbnail.urlError=contentMetadataList[i].contentThumbnailUrlError;results[url].thumbnail.transform=contentMetadataList[i].contentThumbnailTransform;results[url].thumbnail.transformError=contentMetadataList[i].contentThumbnailTransformError;results[url].media.imageTransform=contentMetadataList[i].contentImageTransform;results[url].media.imageTransformError=contentMetadataList[i].contentImageTransformError}}))}})).then((()=>entries.map((entry=>results[entry.toURL()]))))}}// Copyright 2013 The Chromium Authors. All rights reserved.
class FileWatcher extends NativeEventTarget{constructor(){super();this.queue_=new AsyncUtil.Queue;this.watchedDirectoryEntry_=null;this.onDirectoryChangedBound_=this.onDirectoryChanged_.bind(this);chrome.fileManagerPrivate.onDirectoryChanged.addListener(this.onDirectoryChangedBound_)}dispose(){chrome.fileManagerPrivate.onDirectoryChanged.removeListener(this.onDirectoryChangedBound_);if(this.watchedDirectoryEntry_){this.resetWatchedEntry_()}}onDirectoryChanged_(event){const fireWatcherDirectoryChanged=changedFiles=>{const e=new Event("watcher-directory-changed");if(changedFiles){e.changedFiles=changedFiles}this.dispatchEvent(e)};if(this.watchedDirectoryEntry_){const eventURL=event.entry.toURL();const watchedDirURL=this.watchedDirectoryEntry_.toURL();if(eventURL===watchedDirURL){fireWatcherDirectoryChanged(event.changedFiles)}else if(watchedDirURL.match(new RegExp("^"+eventURL))){this.watchedDirectoryEntry_.getDirectory(this.watchedDirectoryEntry_.fullPath,{create:false},null,(()=>{fireWatcherDirectoryChanged(null)}))}}}changeWatchedDirectory(entry){if(!util$3.isFakeEntry(entry)){return this.changeWatchedEntry_(entry)}else{return this.resetWatchedEntry_()}}resetWatchedEntry_(){return new Promise(((fulfill,reject)=>{this.queue_.run((callback=>{if(this.watchedDirectoryEntry_){chrome.fileManagerPrivate.removeFileWatch(this.watchedDirectoryEntry_,(result=>{if(chrome.runtime.lastError){console.error("Failed to remove the watcher because of: "+chrome.runtime.lastError.message)}this.watchedDirectoryEntry_=null;fulfill();callback()}))}else{fulfill();callback()}}))}))}changeWatchedEntry_(entry){return new Promise(((fulfill,reject)=>{const setEntryClosure=()=>{this.queue_.run((callback=>{chrome.fileManagerPrivate.addFileWatch(entry,(result=>{if(chrome.runtime.lastError){console.info("File watchers not supported for: "+entry.toURL());this.watchedDirectoryEntry_=null;fulfill()}else{this.watchedDirectoryEntry_=assert(entry);fulfill()}callback()}))}))};return this.resetWatchedEntry_().then(setEntryClosure)}))}getWatchedDirectoryEntry(){return this.watchedDirectoryEntry_}}// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
const constants={};constants.ACTIONS_MODEL_METADATA_PREFETCH_PROPERTY_NAMES=["hosted","pinned"];constants.EXECUTABLE_EXTENSIONS=Object.freeze([".exe",".lnk",".deb",".dmg",".jar",".msi"]);constants.FILE_SELECTION_METADATA_PREFETCH_PROPERTY_NAMES=["availableOffline","contentMimeType","hosted"];constants.LIST_CONTAINER_METADATA_PREFETCH_PROPERTY_NAMES=["availableOffline","contentMimeType","customIconUrl","hosted","modificationTime","modificationByMeTime","pinned","shared","size","canCopy","canDelete","canRename","canAddChildren","canShare","isMachineRoot","isExternalMedia","isArbitrarySyncFolder"];constants.FILES_QUICK_VIEW_HTML="foreground/elements/files_quick_view.html";constants.DRIVE_WELCOME_CSS="foreground/css/drive_welcome.css";constants.HOLDING_SPACE_WELCOME_CSS="foreground/css/holding_space_welcome.css";constants.DEFAULT_CROSTINI_VM="termina";constants.PLUGIN_VM="PvmDefault";constants.CROSTINI_CONNECT_ERR="CrostiniConnectErr";// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class ContentScanner{constructor(){this.cancelled_=false}scan(entriesCallback,successCallback,errorCallback){}cancel(){this.cancelled_=true}}class DirectoryContentScanner extends ContentScanner{constructor(entry){super();this.entry_=entry}scan(entriesCallback,successCallback,errorCallback){if(!this.entry_||!this.entry_.createReader){errorCallback(util$3.createDOMError(util$3.FileError.INVALID_MODIFICATION_ERR));return}metrics.startInterval("DirectoryScan");const reader=this.entry_.createReader();const readEntries=()=>{reader.readEntries((entries=>{if(this.cancelled_){errorCallback(util$3.createDOMError(util$3.FileError.ABORT_ERR));return}if(entries.length===0){metrics.recordInterval("DirectoryScan");successCallback();return}entriesCallback(entries);readEntries()}),errorCallback)};readEntries()}}class DriveSearchContentScanner extends ContentScanner{constructor(query){super();this.query_=query}scan(entriesCallback,successCallback,errorCallback){setTimeout((()=>{if(this.cancelled_){errorCallback(util$3.createDOMError(util$3.FileError.ABORT_ERR));return}chrome.fileManagerPrivate.searchDrive({query:this.query_,nextFeed:""},((entries,nextFeed)=>{if(chrome.runtime.lastError){console.error(chrome.runtime.lastError.message)}if(this.cancelled_){errorCallback(util$3.createDOMError(util$3.FileError.ABORT_ERR));return}if(!entries){console.error("Drive search encountered an error.");errorCallback(util$3.createDOMError(util$3.FileError.INVALID_MODIFICATION_ERR));return}if(entries.length>=DriveSearchContentScanner.MAX_RESULTS_){entries=entries.slice(0,DriveSearchContentScanner.MAX_RESULTS_)}if(entries.length>0){entriesCallback(entries)}successCallback()}))}),DriveSearchContentScanner.SCAN_DELAY_)}}DriveSearchContentScanner.SCAN_DELAY_=200;DriveSearchContentScanner.MAX_RESULTS_=100;class LocalSearchContentScanner extends ContentScanner{constructor(entry,query){super();this.entry_=entry;this.query_=query.toLowerCase()}scan(entriesCallback,successCallback,errorCallback){util$3.readEntriesRecursively(assert(this.entry_),(entries=>{const matchEntries=entries.filter((entry=>entry.name.toLowerCase().indexOf(this.query_)>=0));if(matchEntries.length>0){entriesCallback(matchEntries)}}),successCallback,errorCallback,(()=>this.cancelled_))}}class DriveMetadataSearchContentScanner extends ContentScanner{constructor(searchType){super();this.searchType_=searchType}scan(entriesCallback,successCallback,errorCallback){chrome.fileManagerPrivate.searchDriveMetadata({query:"",types:this.searchType_,maxResults:100},(results=>{if(chrome.runtime.lastError){console.error(chrome.runtime.lastError.message)}if(this.cancelled_){errorCallback(util$3.createDOMError(util$3.FileError.ABORT_ERR));return}if(!results){console.error("Drive search encountered an error.");errorCallback(util$3.createDOMError(util$3.FileError.INVALID_MODIFICATION_ERR));return}const entries=results.map((result=>result.entry));if(entries.length>0){entriesCallback(entries)}successCallback()}))}}class RecentContentScanner extends ContentScanner{constructor(query,opt_sourceRestriction,opt_recentFileType){super();this.query_=query.toLowerCase();this.sourceRestriction_=opt_sourceRestriction||chrome.fileManagerPrivate.SourceRestriction.ANY_SOURCE;this.recentFileType_=opt_recentFileType||chrome.fileManagerPrivate.RecentFileType.ALL}scan(entriesCallback,successCallback,errorCallback){chrome.fileManagerPrivate.getRecentFiles(this.sourceRestriction_,this.recentFileType_,(entries=>{if(chrome.runtime.lastError){console.error(chrome.runtime.lastError.message);errorCallback(util$3.createDOMError(util$3.FileError.INVALID_MODIFICATION_ERR));return}if(entries.length>0){entriesCallback(entries.filter((entry=>entry.name.toLowerCase().indexOf(this.query_)>=0)))}successCallback()}))}}class MediaViewContentScanner extends ContentScanner{constructor(rootEntry){super();this.rootEntry_=rootEntry}scan(entriesCallback,successCallback,errorCallback){util$3.readEntriesRecursively(this.rootEntry_,(entries=>entriesCallback(entries.filter((entry=>!entry.isDirectory)))),successCallback,errorCallback,(()=>false))}}class CrostiniMounter extends ContentScanner{scan(entriesCallback,successCallback,errorCallback){chrome.fileManagerPrivate.mountCrostini((()=>{if(chrome.runtime.lastError){console.error("mountCrostini error: ",chrome.runtime.lastError.message);errorCallback(util$3.createDOMError(constants.CROSTINI_CONNECT_ERR,chrome.runtime.lastError.message));return}successCallback()}))}}class FileFilter extends NativeEventTarget{constructor(volumeManager){super();this.filters_={};this.setHiddenFilesVisible(false);this.setAllAndroidFoldersVisible(false);this.volumeManager_=volumeManager;this.hideAndroidDownload()}addFilter(name,callback){this.filters_[name]=callback;dispatchSimpleEvent(this,"changed")}removeFilter(name){delete this.filters_[name];dispatchSimpleEvent(this,"changed")}setHiddenFilesVisible(visible){if(!visible){this.addFilter("hidden",(entry=>{if(entry.name.startsWith(".")){return false}if(entry.fullPath.startsWith("/PvmDefault/")&&FileFilter.WINDOWS_HIDDEN.includes(entry.name)){const info=this.volumeManager_.getLocationInfo(entry);if(info&&info.rootType===VolumeManagerCommon$3.RootType.DOWNLOADS){return false}}return true}))}else{this.removeFilter("hidden")}}isHiddenFilesVisible(){return!("hidden"in this.filters_)}setAllAndroidFoldersVisible(visible){if(!visible){this.addFilter("android_hidden",(entry=>{if(entry.filesystem&&entry.filesystem.name!=="android_files"){return true}if(entry.fullPath){const components=entry.fullPath.split("/");if(components[1]&&FileFilter.DEFAULT_ANDROID_FOLDERS.indexOf(components[1])==-1){return false}}return true}))}else{this.removeFilter("android_hidden")}}isAllAndroidFoldersVisible(){return!("android_hidden"in this.filters_)}hideAndroidDownload(){this.addFilter("android_download",(entry=>{if(entry.filesystem&&entry.filesystem.name==="android_files"&&entry.fullPath==="/Download"){return false}return true}))}filter(entry){for(const name in this.filters_){if(!this.filters_[name](entry)){return false}}return true}}FileFilter.DEFAULT_ANDROID_FOLDERS=["Documents","Movies","Music","Pictures"];FileFilter.WINDOWS_HIDDEN=["$RECYCLE.BIN"];class FileListContext{constructor(fileFilter,metadataModel,volumeManager){this.fileList=new FileListModel(metadataModel);this.metadataModel=metadataModel;this.fileFilter=fileFilter;this.prefetchPropertyNames=FileListContext.createPrefetchPropertyNames_();this.volumeManager=volumeManager}static createPrefetchPropertyNames_(){const set={};for(let i=0;i<constants.LIST_CONTAINER_METADATA_PREFETCH_PROPERTY_NAMES.length;i++){set[constants.LIST_CONTAINER_METADATA_PREFETCH_PROPERTY_NAMES[i]]=true}for(let i=0;i<constants.ACTIONS_MODEL_METADATA_PREFETCH_PROPERTY_NAMES.length;i++){set[constants.ACTIONS_MODEL_METADATA_PREFETCH_PROPERTY_NAMES[i]]=true}for(let i=0;i<constants.FILE_SELECTION_METADATA_PREFETCH_PROPERTY_NAMES.length;i++){set[constants.FILE_SELECTION_METADATA_PREFETCH_PROPERTY_NAMES[i]]=true}return Object.keys(set)}}class DirectoryContents extends NativeEventTarget{constructor(context,isSearch,directoryEntry,scannerFactory){super();this.context_=context;this.fileList_=context.fileList;this.fileList_.InitNewDirContents(context.volumeManager);this.isSearch_=isSearch;this.directoryEntry_=directoryEntry;this.scannerFactory_=scannerFactory;this.scanner_=null;this.processNewEntriesQueue_=new AsyncUtil.Queue;this.scanCancelled_=false;this.metadataSnapshot_=null}clone(){return new DirectoryContents(this.context_,this.isSearch_,this.directoryEntry_,this.scannerFactory_)}getFileListLength(){return this.fileList_.length}setFileList(fileList){this.fileList_=fileList}createMetadataSnapshot(){const snapshot={};const entries=this.fileList_.slice();const metadata=this.context_.metadataModel.getCache(entries,["modificationTime"]);for(let i=0;i<entries.length;i++){snapshot[entries[i].toURL()]=metadata[i]}return snapshot}setMetadataSnapshot(metadataSnapshot){this.metadataSnapshot_=metadataSnapshot}replaceContextFileList(){if(this.context_.fileList!==this.fileList_){const spliceArgs=this.fileList_.slice();const fileList=this.context_.fileList;spliceArgs.unshift(0,fileList.length);fileList.splice.apply(fileList,spliceArgs);this.fileList_=fileList;if(this.metadataSnapshot_){const updatedIndexes=[];const entries=this.fileList_.slice();const newMetadatas=this.context_.metadataModel.getCache(entries,["modificationTime"]);for(let i=0;i<entries.length;i++){const url=entries[i].toURL();const newMetadata=newMetadatas[i];if((this.metadataSnapshot_[url]&&this.metadataSnapshot_[url].modificationTime&&this.metadataSnapshot_[url].modificationTime.getTime())!==(newMetadata.modificationTime&&newMetadata.modificationTime.getTime())){updatedIndexes.push(i)}}if(updatedIndexes.length>0){this.fileList_.updateIndexes(updatedIndexes)}}}}isScanning(){return this.scanner_||this.processNewEntriesQueue_.isRunning()}isSearch(){return this.isSearch_}getDirectoryEntry(){return this.directoryEntry_}scan(refresh){function completionCallback(){this.onScanFinished_();this.onScanCompleted_()}function errorCallback(error){this.onScanFinished_();this.onScanError_(error)}this.scanner_=this.scannerFactory_();this.scanner_.scan(this.onNewEntries_.bind(this,refresh),completionCallback.bind(this),errorCallback.bind(this))}update(updatedEntries,removedUrls){const removedMap={};for(let i=0;i<removedUrls.length;i++){removedMap[removedUrls[i]]=true}const updatedMap={};for(let i=0;i<updatedEntries.length;i++){updatedMap[updatedEntries[i].toURL()]=updatedEntries[i]}const updatedList=[];const updatedIndexes=[];for(let i=0;i<this.fileList_.length;i++){const url=this.fileList_.item(i).toURL();if(url in removedMap){const begin=i;let end=i+1;while(end<this.fileList_.length&&this.fileList_.item(end).toURL()in removedMap){end++}this.fileList_.splice(begin,end-begin);i--;continue}if(url in updatedMap){updatedList.push(updatedMap[url]);updatedIndexes.push(i);delete updatedMap[url]}}if(updatedIndexes.length>0){this.fileList_.updateIndexes(updatedIndexes)}const addedList=[];for(const url in updatedMap){addedList.push(updatedMap[url])}if(removedUrls.length>0){this.context_.metadataModel.notifyEntriesRemoved(removedUrls)}this.prefetchMetadata(updatedList,true,(()=>{this.onNewEntries_(true,addedList);this.onScanFinished_();this.onScanCompleted_()}))}cancelScan(){if(this.scanCancelled_){return}this.scanCancelled_=true;if(this.scanner_){this.scanner_.cancel()}this.onScanFinished_();this.processNewEntriesQueue_.cancel();dispatchSimpleEvent(this,"scan-cancelled")}onScanFinished_(){this.scanner_=null}onScanCompleted_(){if(this.scanCancelled_){return}this.processNewEntriesQueue_.run((callback=>{callback();dispatchSimpleEvent(this,"scan-completed")}))}onScanError_(error){if(this.scanCancelled_){return}this.processNewEntriesQueue_.run((callback=>{callback();const event=new Event("scan-failed");event.error=error;this.dispatchEvent(event)}))}onNewEntries_(refresh,entries){if(this.scanCancelled_){return}entries.forEach((entry=>{entry["cachedUrl"]=entry.toURL()}));if(entries.length===0){return}const newListSize=this.fileList_.length+entries.length;this.processNewEntriesQueue_.run((callbackOuter=>{const finish=()=>{if(!this.scanCancelled_){let entriesFiltered=[].filter.call(entries,this.context_.fileFilter.filter.bind(this.context_.fileFilter));const currentURLs={};for(let i=0;i<this.fileList_.length;i++){currentURLs[this.fileList_.item(i).toURL()]=true}entriesFiltered=entriesFiltered.filter((entry=>!currentURLs[entry.toURL()]));this.fileList_.push.apply(this.fileList_,entriesFiltered);dispatchSimpleEvent(this,"scan-updated")}callbackOuter()};const MAX_CHUNK_SIZE=25;const prefetchMetadataQueue=new AsyncUtil.ConcurrentQueue(4);for(let i=0;i<entries.length;i+=MAX_CHUNK_SIZE){if(prefetchMetadataQueue.isCancelled()){break}const chunk=entries.slice(i,i+MAX_CHUNK_SIZE);prefetchMetadataQueue.run(((chunk,callbackInner)=>{this.prefetchMetadata(chunk,refresh,(()=>{if(!prefetchMetadataQueue.isCancelled()){if(this.scanCancelled_){prefetchMetadataQueue.cancel()}}if(prefetchMetadataQueue.getWaitingTasksCount()===0&&prefetchMetadataQueue.getRunningTasksCount()===1){finish()}callbackInner()}))}).bind(null,chunk))}}))}prefetchMetadata(entries,refresh,callback){if(refresh){this.context_.metadataModel.notifyEntriesChanged(entries)}this.context_.metadataModel.get(entries,this.context_.prefetchPropertyNames).then(callback)}}// Copyright (c) 2012 The Chromium Authors. All rights reserved.
const SIMULTANEOUS_RESCAN_INTERVAL=500;const SHORT_RESCAN_INTERVAL=100;class DirectoryModel extends NativeEventTarget{constructor(singleSelection,fileFilter,metadataModel,volumeManager,fileOperationManager){super();this.fileListSelection_=singleSelection?new FileListSingleSelectionModel:new FileListSelectionModel;this.runningScan_=null;this.pendingScan_=null;this.pendingRescan_=null;this.rescanTime_=null;this.scanFailures_=0;this.changeDirectorySequence_=0;this.onSearchCompleted_=null;this.onClearSearch_=null;this.ignoreCurrentDirectoryDeletion_=false;this.directoryChangeQueue_=new AsyncUtil.Queue;this.numChangeTrackerRunning_=0;this.rescanAggregator_=new AsyncUtil.Aggregator(this.rescanSoon.bind(this,true),500);this.fileFilter_=fileFilter;this.fileFilter_.addEventListener("changed",this.onFilterChanged_.bind(this));this.currentFileListContext_=new FileListContext(fileFilter,metadataModel,volumeManager);this.currentDirContents_=new DirectoryContents(this.currentFileListContext_,false,null,(()=>new DirectoryContentScanner(null)));this.emptyFileList_=new FileListModel(metadataModel);this.metadataModel_=metadataModel;this.volumeManager_=volumeManager;this.volumeManager_.volumeInfoList.addEventListener("splice",this.onVolumeInfoListUpdated_.bind(this));this.fileWatcher_=new FileWatcher;this.fileWatcher_.addEventListener("watcher-directory-changed",this.onWatcherDirectoryChanged_.bind(this));util$3.addEventListenerToBackgroundComponent(fileOperationManager,"entries-changed",this.onEntriesChanged_.bind(this));this.lastSearchQuery_="";this.myFilesEntry_=null}dispose(){this.fileWatcher_.dispose()}getFileList(){return this.currentFileListContext_.fileList}getEmptyFileList(){return this.emptyFileList_}getFileListSelection(){return this.fileListSelection_}getCurrentVolumeInfo(){const entry=this.getCurrentDirEntry();if(!entry){return null}return this.volumeManager_.getVolumeInfo(entry)}getCurrentRootType(){const entry=this.currentDirContents_.getDirectoryEntry();if(!entry){return null}const locationInfo=this.volumeManager_.getLocationInfo(entry);if(!locationInfo){return null}return locationInfo.rootType}getPrefetchPropertyNames(){return this.currentFileListContext_.prefetchPropertyNames}isReadOnly(){const currentDirEntry=this.getCurrentDirEntry();if(currentDirEntry){const locationInfo=this.volumeManager_.getLocationInfo(currentDirEntry);if(locationInfo){return locationInfo.isReadOnly}}return true}canDeleteEntries(){const currentDirEntry=this.getCurrentDirEntry();if(currentDirEntry&&currentDirEntry.rootType===VolumeManagerCommon$3.RootType.TRASH){return true}return!this.isReadOnly()}isScanning(){return this.currentDirContents_.isScanning()}isSearching(){return this.currentDirContents_.isSearch()}isOnDrive(){return this.isCurrentRootVolumeType_(VolumeManagerCommon$3.VolumeType.DRIVE)}isOnMTP(){return this.isCurrentRootVolumeType_(VolumeManagerCommon$3.VolumeType.MTP)}isCurrentRootVolumeType_(volumeType){const rootType=this.getCurrentRootType();return rootType!=null&&!util$3.isRecentRootType(rootType)&&VolumeManagerCommon$3.getVolumeTypeFromRootType(rootType)===volumeType}updateSelectionAndPublishEvent_(selection,updateFunc){selection.beginChange();let dispatchNeeded=updateFunc();const eventDispatched=()=>{dispatchNeeded=false};selection.addEventListener("change",eventDispatched);selection.endChange();selection.removeEventListener("change",eventDispatched);if(dispatchNeeded){const event=new Event("change");event.changes=[];selection.dispatchEvent(event)}}setIgnoringCurrentDirectoryDeletion(value){this.ignoreCurrentDirectoryDeletion_=value}onWatcherDirectoryChanged_(event){const directoryEntry=this.getCurrentDirEntry();if(!this.ignoreCurrentDirectoryDeletion_){directoryEntry.getDirectory(directoryEntry.fullPath,{create:false},(()=>{}),(async()=>{const volumeInfo=this.volumeManager_.getVolumeInfo(assert(directoryEntry));if(volumeInfo){const displayRoot=await volumeInfo.resolveDisplayRoot();this.changeDirectoryEntry(displayRoot)}}))}if(event.changedFiles){const addedOrUpdatedFileUrls=[];let deletedFileUrls=[];event.changedFiles.forEach((change=>{if(change.changes.length===1&&change.changes[0]==="delete"){deletedFileUrls.push(change.url)}else{addedOrUpdatedFileUrls.push(change.url)}}));util$3.URLsToEntries(addedOrUpdatedFileUrls).then((result=>{deletedFileUrls=deletedFileUrls.concat(result.failureUrls);this.partialUpdate_(result.entries,deletedFileUrls)})).catch((error=>{console.error("Error in proceeding the changed event.",error,"Fallback to force-refresh");this.rescanAggregator_.run()}))}else{this.rescanAggregator_.run()}}async onFilterChanged_(){const currentDirectory=this.getCurrentDirEntry();if(currentDirectory&&util$3.isNativeEntry(currentDirectory)&&!this.fileFilter_.filter(currentDirectory)){const volumeInfo=this.volumeManager_.getVolumeInfo(currentDirectory);if(volumeInfo){const displayRoot=await volumeInfo.resolveDisplayRoot();this.changeDirectoryEntry(displayRoot)}}else{this.rescanSoon(false)}}getFileFilter(){return this.fileFilter_}getCurrentDirEntry(){return this.currentDirContents_.getDirectoryEntry()}getCurrentDirName(){const dirEntry=this.getCurrentDirEntry();if(!dirEntry){return""}const locationInfo=this.volumeManager_.getLocationInfo(dirEntry);return util$3.getEntryLabel(locationInfo,dirEntry)}getSelectedEntries_(){const indexes=this.fileListSelection_.selectedIndexes;const fileList=this.getFileList();if(fileList){return indexes.map((i=>fileList.item(i)))}return[]}setSelectedEntries_(value){const indexes=[];const fileList=this.getFileList();const urls=util$3.entriesToURLs(value);for(let i=0;i<fileList.length;i++){if(urls.indexOf(fileList.item(i).toURL())!==-1){indexes.push(i)}}this.fileListSelection_.selectedIndexes=indexes}getLeadEntry_(){const index=this.fileListSelection_.leadIndex;return index>=0?this.getFileList().item(index):null}setLeadEntry_(value){const fileList=this.getFileList();for(let i=0;i<fileList.length;i++){if(util$3.isSameEntry(fileList.item(i),value)){this.fileListSelection_.leadIndex=i;return}}}rescanSoon(refresh){this.scheduleRescan(SHORT_RESCAN_INTERVAL,refresh)}rescanLater(refresh){this.scheduleRescan(SIMULTANEOUS_RESCAN_INTERVAL,refresh)}scheduleRescan(delay,refresh){if(this.rescanTime_){if(this.rescanTime_<=Date.now()+delay){return}clearTimeout(this.rescanTimeoutId_)}const sequence=this.changeDirectorySequence_;this.rescanTime_=Date.now()+delay;this.rescanTimeoutId_=setTimeout((()=>{this.rescanTimeoutId_=null;if(sequence===this.changeDirectorySequence_){this.rescan(refresh)}}),delay)}clearRescanTimeout_(){this.rescanTime_=null;if(this.rescanTimeoutId_){clearTimeout(this.rescanTimeoutId_);this.rescanTimeoutId_=null}}rescan(refresh){this.clearRescanTimeout_();if(this.runningScan_){this.pendingRescan_=true;return}const dirContents=this.currentDirContents_.clone();dirContents.setFileList(new FileListModel(this.metadataModel_));dirContents.setMetadataSnapshot(this.currentDirContents_.createMetadataSnapshot());const sequence=this.changeDirectorySequence_;const successCallback=()=>{if(sequence===this.changeDirectorySequence_){this.replaceDirectoryContents_(dirContents);dispatchSimpleEvent(this,"rescan-completed")}};this.scan_(dirContents,refresh,successCallback,(()=>{}),(()=>{}),(()=>{}))}clearAndScan_(newDirContents,callback){if(this.currentDirContents_.isScanning()){this.currentDirContents_.cancelScan()}this.currentDirContents_=newDirContents;this.clearRescanTimeout_();if(this.pendingScan_){this.pendingScan_=false}if(this.runningScan_){if(this.runningScan_.isScanning()){this.runningScan_.cancelScan()}this.runningScan_=null}const sequence=this.changeDirectorySequence_;let cancelled=false;const onDone=()=>{if(cancelled){return}dispatchSimpleEvent(this,"scan-completed");callback(true)};const onFailed=error=>{if(cancelled){return}const event=new Event("scan-failed");event.error=error;this.dispatchEvent(event);callback(false)};const onUpdated=()=>{if(cancelled){return}if(this.changeDirectorySequence_!==sequence){cancelled=true;dispatchSimpleEvent(this,"scan-cancelled");callback(false);return}dispatchSimpleEvent(this,"scan-updated")};const onCancelled=()=>{if(cancelled){return}cancelled=true;dispatchSimpleEvent(this,"scan-cancelled");callback(false)};const fileList=this.getFileList();const removedUrls=[];for(let i=0;i<fileList.length;i++){removedUrls.push(fileList.item(i).toURL())}this.metadataModel_.notifyEntriesRemoved(removedUrls);const currentEntry=this.currentDirContents_.getDirectoryEntry();if(currentEntry&&!util$3.isFakeEntry(assert(currentEntry))){this.metadataModel_.get([currentEntry],constants.LIST_CONTAINER_METADATA_PREFETCH_PROPERTY_NAMES)}dispatchSimpleEvent(this,"scan-started");fileList.splice(0,fileList.length);this.scan_(this.currentDirContents_,false,onDone,onFailed,onUpdated,onCancelled)}partialUpdate_(changedEntries,removedUrls){if(this.pendingScan_){return}if(this.runningScan_){const previousScan=this.runningScan_;const onPreviousScanCompleted=()=>{previousScan.removeEventListener("scan-completed",onPreviousScanCompleted);Promise.resolve().then((()=>{this.partialUpdate_(changedEntries,removedUrls)}))};previousScan.addEventListener("scan-completed",onPreviousScanCompleted);return}const onFinish=()=>{this.runningScan_=null;this.currentDirContents_.removeEventListener("scan-completed",onCompleted);this.currentDirContents_.removeEventListener("scan-failed",onFailure);this.currentDirContents_.removeEventListener("scan-cancelled",onCancelled)};const onCompleted=()=>{onFinish();dispatchSimpleEvent(this,"rescan-completed")};const onFailure=()=>{onFinish()};const onCancelled=()=>{onFinish()};this.runningScan_=this.currentDirContents_;this.currentDirContents_.addEventListener("scan-completed",onCompleted);this.currentDirContents_.addEventListener("scan-failed",onFailure);this.currentDirContents_.addEventListener("scan-cancelled",onCancelled);this.currentDirContents_.update(changedEntries,removedUrls)}scan_(dirContents,refresh,successCallback,failureCallback,updatedCallback,cancelledCallback){const maybeRunPendingRescan=()=>{if(this.pendingRescan_){this.rescanSoon(refresh);this.pendingRescan_=false;return true}return false};const onFinished=()=>{dirContents.removeEventListener("scan-completed",onSuccess);dirContents.removeEventListener("scan-updated",updatedCallback);dirContents.removeEventListener("scan-failed",onFailure);dirContents.removeEventListener("scan-cancelled",cancelledCallback)};const onSuccess=()=>{onFinished();if(!dirContents.isSearch()){const locationInfo=this.volumeManager_.getLocationInfo(assert(dirContents.getDirectoryEntry()));const volumeInfo=locationInfo&&locationInfo.volumeInfo;if(volumeInfo&&volumeInfo.volumeType===VolumeManagerCommon$3.VolumeType.DOWNLOADS&&locationInfo.isRootEntry){metrics.recordMediumCount("DownloadsCount",dirContents.getFileListLength())}}this.runningScan_=null;successCallback();this.scanFailures_=0;maybeRunPendingRescan()};const onFailure=event=>{onFinished();this.runningScan_=null;this.scanFailures_++;failureCallback(event.error);if(maybeRunPendingRescan()){return}if(event.error.name===constants.CROSTINI_CONNECT_ERR){return}if(this.scanFailures_<=1){this.rescanLater(refresh)}};const onCancelled=()=>{onFinished();cancelledCallback()};this.runningScan_=dirContents;dirContents.addEventListener("scan-completed",onSuccess);dirContents.addEventListener("scan-updated",updatedCallback);dirContents.addEventListener("scan-failed",onFailure);dirContents.addEventListener("scan-cancelled",onCancelled);dirContents.scan(refresh)}replaceDirectoryContents_(dirContents){console.assert(this.currentDirContents_!==dirContents,"Give directory contents instance must be different from current one.");dispatchSimpleEvent(this,"begin-update-files");this.updateSelectionAndPublishEvent_(this.fileListSelection_,(()=>{const selectedEntries=this.getSelectedEntries_();const selectedIndices=this.fileListSelection_.selectedIndexes;const leadIndex=this.fileListSelection_.leadIndex;const leadEntry=this.getLeadEntry_();const isCheckSelectMode=this.fileListSelection_.getCheckSelectMode();const previousDirContents=this.currentDirContents_;this.currentDirContents_=dirContents;this.currentDirContents_.replaceContextFileList();this.setSelectedEntries_(selectedEntries);this.fileListSelection_.leadIndex=leadIndex;this.setLeadEntry_(leadEntry);let forceChangeEvent=false;if(this.fileListSelection_.selectedIndexes.length==0&&selectedIndices.length!=0){const maxIdx=Math.max.apply(null,selectedIndices);this.selectIndex(Math.min(maxIdx-selectedIndices.length+2,this.getFileList().length)-1);forceChangeEvent=true}else if(isCheckSelectMode){this.fileListSelection_.setCheckSelectMode(true)}return forceChangeEvent}));dispatchSimpleEvent(this,"end-update-files")}async onEntriesChanged_(event){const kind=event.kind;const entries=event.entries;const rootType=this.getCurrentRootType();if((rootType===VolumeManagerCommon$3.RootType.DRIVE||rootType===VolumeManagerCommon$3.RootType.DRIVE_SHARED_WITH_ME||rootType===VolumeManagerCommon$3.RootType.DRIVE_RECENT||rootType===VolumeManagerCommon$3.RootType.DRIVE_OFFLINE)&&this.isSearching()){return}switch(kind){case util$3.EntryChangedKind.CREATED:try{const parentPromises=entries.map((entry=>new Promise(((resolve,reject)=>{entry.getParent(resolve,reject)}))));const parents=await Promise.all(parentPromises);const entriesToAdd=[];for(let i=0;i<parents.length;i++){if(!util$3.isSameEntry(parents[i],this.getCurrentDirEntry())){continue}const index=this.findIndexByEntry_(entries[i]);if(index>=0){this.getFileList().replaceItem(this.getFileList().item(index),entries[i])}else{entriesToAdd.push(entries[i])}}this.partialUpdate_(entriesToAdd,[])}catch(error){console.error(error.stack||error)}break;case util$3.EntryChangedKind.DELETED:this.partialUpdate_([],util$3.entriesToURLs(entries));break;default:console.error("Invalid EntryChangedKind: "+kind);break}}findIndexByEntry_(entry){const fileList=this.getFileList();for(let i=0;i<fileList.length;i++){if(util$3.isSameEntry(fileList.item(i),entry)){return i}}return-1}onRenameEntry(oldEntry,newEntry,opt_callback){this.currentDirContents_.prefetchMetadata([newEntry],true,(()=>{if(util$3.isSameEntry(oldEntry,this.getCurrentDirEntry())){this.changeDirectoryEntry(newEntry)}const list=this.getFileList();let oldEntryExist=false;let newEntryExist=false;const oldEntryUrl=oldEntry.toURL();const newEntryUrl=newEntry.toURL();for(let i=0;i<list.length;i++){const item=list.item(i);const url=item.toURL();if(url===oldEntryUrl){list.replaceItem(item,newEntry);oldEntryExist=true;break}if(url===newEntryUrl){newEntryExist=true}}if(!oldEntryExist&&!newEntryExist){list.push(newEntry)}if(opt_callback){opt_callback()}}))}async updateAndSelectNewDirectory(newDirectory){this.metadataModel_.notifyEntriesCreated([newDirectory]);const dirContents=this.currentDirContents_;const sequence=this.changeDirectorySequence_;await new Promise((resolve=>{dirContents.prefetchMetadata([newDirectory],false,resolve)}));if(sequence!==this.changeDirectorySequence_){return Promise.reject()}const existing=this.getFileList().slice().filter((e=>e.name===newDirectory.name));if(existing.length){this.selectEntry(newDirectory)}else{this.fileListSelection_.beginChange();this.getFileList().splice(0,0,newDirectory);this.selectEntry(newDirectory);this.fileListSelection_.endChange()}}setMyFiles(myFilesEntry){this.myFilesEntry_=myFilesEntry}changeDirectoryEntry(dirEntry,opt_callback){const sequence=++this.changeDirectorySequence_;this.clearSearch_();const locationInfo=this.volumeManager_.getLocationInfo(dirEntry);if(locationInfo&&this.myFilesEntry_&&locationInfo.rootType===VolumeManagerCommon$3.RootType.DOWNLOADS&&locationInfo.isRootEntry){dirEntry=this.myFilesEntry_}if(this.currentDirContents_.isScanning()){this.currentDirContents_.cancelScan()}this.directoryChangeQueue_.run((async queueTaskCallback=>{await this.fileWatcher_.changeWatchedDirectory(dirEntry);if(this.changeDirectorySequence_!==sequence){queueTaskCallback();return}const newDirectoryContents=this.createDirectoryContents_(this.currentFileListContext_,dirEntry,"");if(!newDirectoryContents){queueTaskCallback();return}const previousDirEntry=this.currentDirContents_.getDirectoryEntry();this.clearAndScan_(newDirectoryContents,(result=>{if(result&&opt_callback){opt_callback()}setTimeout(queueTaskCallback,0)}));util$3.testSendMessage("directory-change-complete");const previousVolumeInfo=previousDirEntry?this.volumeManager_.getVolumeInfo(previousDirEntry):null;const currentVolumeInfo=this.getCurrentVolumeInfo();const event=new Event("directory-changed");event.previousDirEntry=previousDirEntry;event.newDirEntry=dirEntry;event.volumeChanged=previousVolumeInfo!==currentVolumeInfo;this.dispatchEvent(event)}))}activateDirectoryEntry(dirEntry,opt_callback){const currentDirectoryEntry=this.getCurrentDirEntry();if(currentDirectoryEntry&&util$3.isSameEntry(dirEntry,currentDirectoryEntry)){this.clearSelection()}else{this.changeDirectoryEntry(dirEntry,opt_callback)}}clearSelection(){this.setSelectedEntries_([])}createDirectoryChangeTracker(){const tracker={dm_:this,active_:false,hasChanged:false,start:function(){if(!this.active_){this.dm_.numChangeTrackerRunning_++;this.dm_.addEventListener("directory-changed",this.onDirectoryChange_);this.active_=true;this.hasChanged=false}},stop:function(){if(this.active_){this.dm_.numChangeTrackerRunning_--;this.dm_.removeEventListener("directory-changed",this.onDirectoryChange_);this.active_=false}},onDirectoryChange_:function(event){tracker.stop();tracker.hasChanged=true}};return tracker}selectEntry(entry){const fileList=this.getFileList();for(let i=0;i<fileList.length;i++){if(fileList.item(i).toURL()===entry.toURL()){this.selectIndex(i);return}}}selectEntries(entries){const urls=util$3.entriesToURLs(entries);const fileList=this.getFileList();this.fileListSelection_.beginChange();this.fileListSelection_.unselectAll();for(let i=0;i<fileList.length;i++){if(urls.indexOf(fileList.item(i).toURL())>=0){this.fileListSelection_.setIndexSelected(i,true)}}this.fileListSelection_.endChange()}selectIndex(index){if(index>=this.getFileList().length){return}this.fileListSelection_.selectedIndex=index}onVolumeInfoListUpdated_(event){if(this.hasCurrentDirEntryBeenUnmounted_(event.removed)){this.volumeManager_.getDefaultDisplayRoot((displayRoot=>{if(displayRoot){this.changeDirectoryEntry(displayRoot)}}))}const currentDir=this.getCurrentDirEntry();const affectedVolumes=event.added.concat(event.removed);for(const volume of affectedVolumes){if(util$3.isSameEntry(currentDir,volume.prefixEntry)){this.rescan(false);break}}if(this.getCurrentRootType()===VolumeManagerCommon$3.RootType.DRIVE_FAKE_ROOT){for(const newVolume of event.added){if(newVolume.volumeType===VolumeManagerCommon$3.VolumeType.DRIVE){newVolume.resolveDisplayRoot().then((displayRoot=>{this.changeDirectoryEntry(displayRoot)}))}}}if(event.added.length!==1){return}if(!currentDir||window.isFocused()&&event.added[0].volumeType===VolumeManagerCommon$3.VolumeType.PROVIDED&&event.added[0].source===VolumeManagerCommon$3.Source.FILE||event.added[0].volumeType===VolumeManagerCommon$3.VolumeType.CROSTINI&&this.getCurrentRootType()===VolumeManagerCommon$3.RootType.CROSTINI){event.added[0].resolveDisplayRoot().then((displayRoot=>{if(currentDir===this.getCurrentDirEntry()&&this.numChangeTrackerRunning_===0){this.changeDirectoryEntry(event.added[0].displayRoot)}}))}}hasCurrentDirEntryBeenUnmounted_(removedVolumes){const entry=this.getCurrentDirEntry();if(!entry){return false}if(!util$3.isFakeEntry(entry)){return!this.volumeManager_.getVolumeInfo(entry)}const rootType=this.getCurrentRootType();for(const volume of removedVolumes){if(volume.fakeEntries[rootType]){return true}if(volume.prefixEntry===entry){return true}}return false}isSearchDirectory(entry,opt_query){if(util$3.isRecentRootType(entry.rootType)||entry.rootType==VolumeManagerCommon$3.RootType.CROSTINI||entry.rootType==VolumeManagerCommon$3.RootType.DRIVE_FAKE_ROOT){return true}if(entry.rootType==VolumeManagerCommon$3.RootType.MY_FILES){return false}const query=(opt_query||"").trimLeft();if(query){return true}const locationInfo=this.volumeManager_.getLocationInfo(entry);if(locationInfo&&(locationInfo.rootType==VolumeManagerCommon$3.RootType.MEDIA_VIEW||locationInfo.isSpecialSearchRoot)){return true}return false}createScannerFactory(entry,opt_query){const query=(opt_query||"").trimLeft();const locationInfo=this.volumeManager_.getLocationInfo(entry);const canUseDriveSearch=this.volumeManager_.getDriveConnectionState().type!==chrome.fileManagerPrivate.DriveConnectionStateType.OFFLINE&&locationInfo&&locationInfo.isDriveBased;if(util$3.isRecentRootType(entry.rootType)){return()=>{const fakeEntry=entry;return new RecentContentScanner(query,fakeEntry.sourceRestriction,fakeEntry.recentFileType)}}if(entry.rootType==VolumeManagerCommon$3.RootType.CROSTINI){return()=>new CrostiniMounter}if(entry.rootType==VolumeManagerCommon$3.RootType.MY_FILES){return()=>new DirectoryContentScanner(entry)}if(entry.rootType==VolumeManagerCommon$3.RootType.DRIVE_FAKE_ROOT){return()=>new ContentScanner}if(query&&canUseDriveSearch){return()=>new DriveSearchContentScanner(query)}if(query){return()=>new LocalSearchContentScanner(entry,query)}if(locationInfo&&locationInfo.rootType==VolumeManagerCommon$3.RootType.MEDIA_VIEW){return()=>new MediaViewContentScanner(entry)}if(locationInfo&&locationInfo.isSpecialSearchRoot){let searchType;switch(locationInfo.rootType){case VolumeManagerCommon$3.RootType.DRIVE_OFFLINE:searchType=chrome.fileManagerPrivate.SearchType.OFFLINE;break;case VolumeManagerCommon$3.RootType.DRIVE_SHARED_WITH_ME:searchType=chrome.fileManagerPrivate.SearchType.SHARED_WITH_ME;break;case VolumeManagerCommon$3.RootType.DRIVE_RECENT:searchType=chrome.fileManagerPrivate.SearchType.EXCLUDE_DIRECTORIES;break;default:throw new Error("Unknown special search type.")}return()=>new DriveMetadataSearchContentScanner(searchType)}return()=>new DirectoryContentScanner(entry)}createDirectoryContents_(context,entry,opt_query){const isSearch=this.isSearchDirectory(entry,opt_query);const scannerFactory=this.createScannerFactory(entry,opt_query);return new DirectoryContents(context,isSearch,entry,scannerFactory)}getLastSearchQuery(){return this.lastSearchQuery_}clearLastSearchQuery(){this.lastSearchQuery_=""}search(query,onSearchRescan,onClearSearch){this.lastSearchQuery_=query;this.clearSearch_();const currentDirEntry=this.getCurrentDirEntry();if(!currentDirEntry){return}const sequence=++this.changeDirectorySequence_;this.directoryChangeQueue_.run((callback=>{if(this.changeDirectorySequence_!==sequence){callback();return}if(!(query||"").trimLeft()){if(this.isSearching()){const newDirContents=this.createDirectoryContents_(this.currentFileListContext_,assert(currentDirEntry));this.clearAndScan_(newDirContents,callback)}else{callback()}return}const newDirContents=this.createDirectoryContents_(this.currentFileListContext_,assert(currentDirEntry),query);if(!newDirContents){callback();return}this.onSearchCompleted_=onSearchRescan;this.onClearSearch_=onClearSearch;this.addEventListener("scan-completed",this.onSearchCompleted_);this.clearAndScan_(newDirContents,callback)}))}clearSearch_(){if(!this.isSearching()){return}if(this.onSearchCompleted_){this.removeEventListener("scan-completed",this.onSearchCompleted_);this.onSearchCompleted_=null}if(this.onClearSearch_){this.onClearSearch_();this.onClearSearch_=null}}}// Copyright 2015 The Chromium Authors. All rights reserved.
class ListThumbnailLoader extends NativeEventTarget{constructor(directoryModel,thumbnailModel,volumeManager,opt_thumbnailLoaderConstructor){super();this.directoryModel_=directoryModel;this.thumbnailModel_=thumbnailModel;this.volumeManager_=volumeManager;this.thumbnailLoaderConstructor_=opt_thumbnailLoaderConstructor||ThumbnailLoader;this.active_={};this.cache_=new LRUCache(ListThumbnailLoader.CACHE_SIZE);this.beginIndex_=0;this.endIndex_=0;this.cursor_=0;this.currentVolumeType_=null;this.dataModel_=assert(this.directoryModel_.getFileList());this.directoryModel_.addEventListener("scan-completed",this.onScanCompleted_.bind(this));this.dataModel_.addEventListener("splice",this.onSplice_.bind(this));this.dataModel_.addEventListener("sorted",this.onSorted_.bind(this));this.dataModel_.addEventListener("change",this.onChange_.bind(this))}getNumOfPrefetch_(){switch(this.currentVolumeType_){case VolumeManagerCommon$3.VolumeType.MTP:return 0;case ListThumbnailLoader.TEST_VOLUME_TYPE:return 1;default:return 20}}getNumOfMaxActiveTasks_(){switch(this.currentVolumeType_){case VolumeManagerCommon$3.VolumeType.MTP:return 1;case ListThumbnailLoader.TEST_VOLUME_TYPE:return ListThumbnailLoader.numOfMaxActiveTasksForTest;default:return 10}}onScanCompleted_(event){this.cursor_=this.beginIndex_;this.continue_()}onSplice_(event){this.cursor_=this.beginIndex_;this.continue_()}onSorted_(event){this.cursor_=this.beginIndex_;this.continue_()}onChange_(event){const entry=this.dataModel_.item(event.index);const cachedThumbnail=this.cache_.peek(entry.toURL());if(cachedThumbnail){cachedThumbnail.outdated=true}this.cursor_=this.beginIndex_;this.continue_()}setHighPriorityRange(beginIndex,endIndex){if(!(beginIndex<endIndex)){return}this.beginIndex_=beginIndex;this.endIndex_=endIndex;this.cursor_=this.beginIndex_;this.continue_()}getThumbnailFromCache(entry){return this.cache_.peek(entry.toURL())||null}continue_(){if(this.directoryModel_.isScanning()||!(this.cursor_<this.dataModel_.length)){return}const entry=this.dataModel_.item(this.cursor_);const volumeInfo=this.volumeManager_.getVolumeInfo(assert(entry));this.currentVolumeType_=volumeInfo?volumeInfo.volumeType:null;if(!(Object.keys(this.active_).length<this.getNumOfMaxActiveTasks_())||!(this.cursor_<this.endIndex_+this.getNumOfPrefetch_())){return}const thumbnail=this.cache_.get(entry.toURL());if(entry.isDirectory||thumbnail&&!thumbnail.outdated||this.active_[entry.toURL()]){this.cursor_++;this.continue_();return}this.enqueue_(this.cursor_,entry);this.cursor_++;this.continue_()}enqueue_(index,entry){const task=new ListThumbnailLoader.Task(entry,this.volumeManager_,this.thumbnailModel_,this.thumbnailLoaderConstructor_);const url=entry.toURL();this.active_[url]=task;task.fetch().then((thumbnail=>{delete this.active_[url];this.cache_.put(url,thumbnail);this.dispatchThumbnailLoaded_(index,thumbnail);this.continue_()}))}dispatchThumbnailLoaded_(index,thumbnail){const item=this.dataModel_.item(index);if(item&&item.toURL()!==thumbnail.fileUrl){index=-1;for(let i=0;i<this.dataModel_.length;i++){if(this.dataModel_.item(i).toURL()===thumbnail.fileUrl){index=i;break}}}if(index>-1){this.dispatchEvent(new ListThumbnailLoader.ThumbnailLoadedEvent(index,thumbnail))}}}ListThumbnailLoader.CACHE_SIZE=500;ListThumbnailLoader.TEST_VOLUME_TYPE="test_volume_type";ListThumbnailLoader.numOfMaxActiveTasksForTest=2;ListThumbnailLoader.ThumbnailLoadedEvent=class ThumbnailLoadedEvent extends Event{constructor(index,thumbnail){super("thumbnailLoaded");this.index=index;this.fileUrl=thumbnail.fileUrl;this.dataUrl=thumbnail.dataUrl;this.width=thumbnail.width;this.height=thumbnail.height}};ListThumbnailLoader.ThumbnailData=class{constructor(fileUrl,dataUrl,width,height){this.fileUrl=fileUrl;this.dataUrl=dataUrl;this.width=width;this.height=height;this.outdated=false}};ListThumbnailLoader.Task=class{constructor(entry,volumeManager,thumbnailModel,thumbnailLoaderConstructor){this.entry_=entry;this.volumeManager_=volumeManager;this.thumbnailModel_=thumbnailModel;this.thumbnailLoaderConstructor_=thumbnailLoaderConstructor}fetch(){let ioError=false;return this.thumbnailModel_.get([this.entry_]).then((metadatas=>{if(metadatas[0].thumbnail.urlError&&metadatas[0].thumbnail.urlError.errorDescription==="Error: Unexpected EOF @0"){ioError=true;return Promise.reject()}return metadatas[0]})).then((metadata=>{const loadTargets=[ThumbnailLoader.LoadTarget.CONTENT_METADATA,ThumbnailLoader.LoadTarget.EXTERNAL_METADATA];const volumeInfo=this.volumeManager_.getVolumeInfo(this.entry_);if(volumeInfo&&(volumeInfo.source!==VolumeManagerCommon$3.Source.NETWORK||volumeInfo.volumeType===VolumeManagerCommon$3.VolumeType.DRIVE)){loadTargets.push(ThumbnailLoader.LoadTarget.FILE_ENTRY)}return new this.thumbnailLoaderConstructor_(this.entry_,ThumbnailLoader.LoaderType.IMAGE,metadata,undefined,loadTargets).loadAsDataUrl(ThumbnailLoader.FillMode.OVER_FILL)})).then((result=>new ListThumbnailLoader.ThumbnailData(this.entry_.toURL(),result.data,result.width,result.height))).catch((()=>{const thumbnailData=new ListThumbnailLoader.ThumbnailData(this.entry_.toURL(),null,null,null);if(ioError){setTimeout((()=>{thumbnailData.outdated=true}),ListThumbnailLoader.Task.EXIF_IO_ERROR_DELAY)}return thumbnailData}))}};ListThumbnailLoader.Task.EXIF_IO_ERROR_DELAY=3e3;// Copyright 2017 The Chromium Authors. All rights reserved.
class FileTapHandler{constructor(){this.tapStarted_=false;this.isLongTap_=false;this.isTwoFingerTap_=false;this.hasLongPressProcessed_=false;this.longTapDetectorTimerId_=-1;this.totalMoveY_=0;this.totalMoveX_=0;this.activeTouchId_=undefined;this.activeItemIndex_=-1;this.lastMoveX_=null;this.lastMoveY_=null;this.lastTouchX_=null;this.lastTouchY_=null;this.startTouchX_=null;this.startTouchY_=null}handleTouchEvents(event,index,callback){switch(event.type){case"touchstart":{if(event.touches.length==2){this.isTwoFingerTap_=true;return false}else if(event.touches.length>2){this.tapStarted_=false;return false}const touch=event.targetTouches[0];this.activeTouchId_=touch.identifier;this.startTouchX_=this.lastTouchX_=touch.clientX;this.startTouchY_=this.lastTouchY_=touch.clientY;this.totalMoveX_=0;this.totalMoveY_=0;this.tapStarted_=true;this.activeItemIndex_=index;this.isLongTap_=false;this.isTwoFingerTap_=false;this.hasLongPressProcessed_=false;this.longTapDetectorTimerId_=setTimeout((()=>{this.longTapDetectorTimerId_=-1;if(!this.tapStarted_){return}this.isLongTap_=true;if(callback(event,index,FileTapHandler.TapEvent.LONG_PRESS)){this.hasLongPressProcessed_=true}}),FileTapHandler.LONG_PRESS_THRESHOLD_MILLISECONDS)}break;case"touchmove":{if(this.activeTouchId_===undefined){break}const touch=this.findActiveTouch_(event.changedTouches);if(!touch){break}const clientX=touch.clientX;const clientY=touch.clientY;const moveX=this.lastTouchX_-clientX;const moveY=this.lastTouchY_-clientY;this.totalMoveX_+=Math.abs(moveX);this.totalMoveY_+=Math.abs(moveY);this.lastTouchX_=clientX;this.lastTouchY_=clientY;const couldBeTap=this.totalMoveY_<=FileTapHandler.MAX_TRACKING_FOR_TAP_||this.totalMoveX_<=FileTapHandler.MAX_TRACKING_FOR_TAP_;if(!couldBeTap){this.tapStarted_=false}this.lastMoveX_=moveX;this.lastMoveY_=moveY}break;case"touchend":if(!this.tapStarted_){break}this.tapStarted_=false;this.activeTouchId_=undefined;if(this.longTapDetectorTimerId_!=-1){clearTimeout(this.longTapDetectorTimerId_);this.longTapDetectorTimerId_=-1}if(this.isLongTap_){if(this.hasLongPressProcessed_||callback(event,this.activeItemIndex_,FileTapHandler.TapEvent.LONG_TAP)){event.preventDefault();return true}}else{if(callback(event,this.activeItemIndex_,this.isTwoFingerTap_?FileTapHandler.TapEvent.TWO_FINGER_TAP:FileTapHandler.TapEvent.TAP)){event.preventDefault();return true}}break}return false}findActiveTouch_(touches){assert(this.activeTouchId_!==undefined,"Expecting an active touch");for(let i=0;i<touches.length;i++){if(touches[i].identifier==this.activeTouchId_){return touches[i]}}return undefined}}FileTapHandler.LONG_PRESS_THRESHOLD_MILLISECONDS=500;FileTapHandler.MAX_TRACKING_FOR_TAP_=8;FileTapHandler.TapEvent={TAP:"tap",LONG_PRESS:"longpress",LONG_TAP:"longtap",TWO_FINGER_TAP:"twofingertap"};// Copyright 2013 The Chromium Authors. All rights reserved.
class DragSelector{constructor(){this.target_=null;this.border_=null;this.startX_=null;this.startY_=null;this.lastSelection_=[];this.originalSelection_=[];this.onMouseMoveBound_=this.onMouseMove_.bind(this);this.onMouseUpBound_=this.onMouseUp_.bind(this)}static getScrolledPosition(element,event){if(!element.cachedBounds){element.cachedBounds=element.getBoundingClientRect();if(!element.cachedBounds){return null}}const rect=element.cachedBounds;return{x:event.clientX-rect.left+element.scrollLeft,y:event.clientY-rect.top+element.scrollTop}}startDragSelection(list,event){if(!list.selectionModel_.multiple||this.target_){return}this.target_=list;const startPos=DragSelector.getScrolledPosition(list,event);if(!startPos){return}this.startX_=startPos.x;this.startY_=startPos.y;this.lastSelection_=[];this.originalSelection_=this.target_.selectionModel_.selectedIndexes;if(!this.border_){this.border_=this.target_.ownerDocument.createElement("div");this.border_.className="drag-selection-border"}this.border_.style.left=this.startX_+"px";this.border_.style.top=this.startY_+"px";this.border_.style.width="0";this.border_.style.height="0";list.appendChild(this.border_);this.target_.ownerDocument.addEventListener("mousemove",this.onMouseMoveBound_,true);this.target_.ownerDocument.addEventListener("mouseup",this.onMouseUpBound_,true)}onMouseMove_(event){event=event;const pos=DragSelector.getScrolledPosition(this.target_,event);const borderBounds={left:Math.max(Math.min(this.startX_,pos.x),0),top:Math.max(Math.min(this.startY_,pos.y),0),right:Math.min(Math.max(this.startX_,pos.x),this.target_.scrollWidth),bottom:Math.min(Math.max(this.startY_,pos.y),this.target_.scrollHeight)};borderBounds.width=borderBounds.right-borderBounds.left;borderBounds.height=borderBounds.bottom-borderBounds.top;const currentSelection=this.target_.getHitElements(borderBounds.left,borderBounds.top,borderBounds.width,borderBounds.height);const pointedElements=this.target_.getHitElements(pos.x,pos.y);const leadIndex=pointedElements.length?pointedElements[0]:-1;const selectionFlag=[];for(let i=0;i<this.lastSelection_.length;i++){const index=this.lastSelection_[i];selectionFlag[index]=selectionFlag[index]|DragSelector.SelectionFlag_.IN_LAST_SELECTION}for(let i=0;i<currentSelection.length;i++){const index=currentSelection[i];selectionFlag[index]=selectionFlag[index]|DragSelector.SelectionFlag_.IN_CURRENT_SELECTION}this.target_.selectionModel_.beginChange();for(const name in selectionFlag){const index=parseInt(name,10);const flag=selectionFlag[index];if(flag==DragSelector.SelectionFlag_.IN_LAST_SELECTION){this.target_.selectionModel_.setIndexSelected(index,this.originalSelection_.indexOf(index)!=-1)}else if(flag==DragSelector.SelectionFlag_.IN_CURRENT_SELECTION){this.target_.selectionModel_.setIndexSelected(index,true)}}if(leadIndex!=-1){this.target_.selectionModel_.leadIndex=leadIndex;this.target_.selectionModel_.anchorIndex=leadIndex}this.target_.selectionModel_.endChange();this.lastSelection_=currentSelection;this.border_.style.left=borderBounds.left+"px";this.border_.style.top=borderBounds.top+"px";this.border_.style.width=borderBounds.width+"px";this.border_.style.height=borderBounds.height+"px"}onMouseUp_(event){event=event;this.onMouseMove_(event);this.target_.removeChild(this.border_);this.target_.ownerDocument.removeEventListener("mousemove",this.onMouseMoveBound_,true);this.target_.ownerDocument.removeEventListener("mouseup",this.onMouseUpBound_,true);this.target_.cachedBounds=null;this.target_=null;event.stopPropagation()}}DragSelector.SelectionFlag_={IN_LAST_SELECTION:1<<0,IN_CURRENT_SELECTION:1<<1};// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class TableColumn extends NativeEventTarget{constructor(id,name,width,opt_endAlign){super();this.id_=id;this.name_=name;this.width_=width;this.endAlign_=!!opt_endAlign;this.visible_=true;this.defaultOrder_="asc"}clone(){const tableColumn=new TableColumn(this.id_,this.name_,this.width_,this.endAlign_);tableColumn.renderFunction=this.renderFunction_;tableColumn.headerRenderFunction=this.headerRenderFunction_;tableColumn.defaultOrder=this.defaultOrder_;tableColumn.visible_=this.visible_;return tableColumn}renderFunction_(dataItem,columnId,table){const div=table.ownerDocument.createElement("div");div.textContent=dataItem[columnId];div.hidden=!this.visible;return div}headerRenderFunction_(table){return table.ownerDocument.createTextNode(this.name)}get width(){return this.visible_?this.width_:0}set width(value){const oldValue=this.width;if(value!==oldValue){this.width_=value;dispatchPropertyChange(this,"width",value,oldValue)}}get absoluteWidth(){return this.width_}}TableColumn.prototype.id;Object.defineProperty(TableColumn.prototype,"id",getPropertyDescriptor("id"));TableColumn.prototype.name;Object.defineProperty(TableColumn.prototype,"name",getPropertyDescriptor("name"));TableColumn.prototype.visible;Object.defineProperty(TableColumn.prototype,"visible",getPropertyDescriptor("visible"));TableColumn.prototype.endAlign;Object.defineProperty(TableColumn.prototype,"endAlign",getPropertyDescriptor("endAlign"));TableColumn.prototype.renderFunction;Object.defineProperty(TableColumn.prototype,"renderFunction",getPropertyDescriptor("renderFunction"));TableColumn.prototype.headerRenderFunction;Object.defineProperty(TableColumn.prototype,"headerRenderFunction",getPropertyDescriptor("headerRenderFunction"));TableColumn.prototype.defaultOrder;Object.defineProperty(TableColumn.prototype,"defaultOrder",getPropertyDescriptor("defaultOrder"));// Copyright (c) 2012 The Chromium Authors. All rights reserved.
const MIMIMAL_WIDTH=10;class TableColumnModel extends NativeEventTarget{constructor(tableColumns){super();this.columns_=[];for(let i=0;i<tableColumns.length;i++){this.columns_.push(tableColumns[i].clone())}}get size(){return this.columns_.length}getId(index){return this.columns_[index].id}getName(index){return this.columns_[index].name}setName(index,name){if(index<0||index>=this.columns_.length){return}if(name!=this.columns_[index].name){return}this.columns_[index].name=name;dispatchSimpleEvent(this,"change")}getWidth(index){return this.columns_[index].width}isEndAlign(index){return this.columns_[index].endAlign}setWidth(index,width){if(index<0||index>=this.columns_.length){return}const column=this.columns_[index];width=Math.max(width,MIMIMAL_WIDTH);if(width==column.absoluteWidth){return}column.width=width;if(column.visible){dispatchSimpleEvent(this,"resize")}}getRenderFunction(index){return this.columns_[index].renderFunction}setRenderFunction(index,renderFunction){if(index<0||index>=this.columns_.length){return}if(renderFunction!==this.columns_[index].renderFunction){return}this.columns_[index].renderFunction=renderFunction;dispatchSimpleEvent(this,"change")}renderHeader(index,table){const c=this.columns_[index];return c.headerRenderFunction.call(c,table)}get totalWidth(){let total=0;for(let i=0;i<this.size;i++){total+=this.columns_[i].width}return total}normalizeWidths(contentWidth){if(this.size==0){return}const c=this.columns_[0];c.width=Math.max(10,c.width-this.totalWidth+contentWidth)}getDefaultOrder(index){return this.columns_[index].defaultOrder}indexOf(id){for(let i=0;i<this.size;i++){if(this.getId(i)==id){return i}}return-1}setVisible(index,visible){if(index<0||index>=this.columns_.length){return}const column=this.columns_[index];if(column.visible==visible){return}const contentWidth=this.totalWidth;column.visible=visible;this.normalizeWidths(contentWidth)}isVisible(index){return this.columns_[index].visible}}// Copyright (c) 2012 The Chromium Authors. All rights reserved.
const Splitter=define("div");Splitter.prototype={__proto__:HTMLDivElement.prototype,decorate(){this.addEventListener("mousedown",this.handleMouseDown_.bind(this),true);this.addEventListener("touchstart",this.handleTouchStart_.bind(this),true);this.resizeNextElement_=false},set resizeNextElement(resizeNext){this.resizeNextElement_=resizeNext},startDrag(clientX,isTouchEvent){if(this.handlers_){console.log("Concurent drags");this.endDrag_()}if(isTouchEvent){const endDragBound=this.endDrag_.bind(this);this.handlers_={touchmove:this.handleTouchMove_.bind(this),touchend:endDragBound,touchcancel:endDragBound,touchstart:endDragBound}}else{this.handlers_={mousemove:this.handleMouseMove_.bind(this),mouseup:this.handleMouseUp_.bind(this)}}const doc=this.ownerDocument;for(const eventType in this.handlers_){doc.addEventListener(eventType,this.handlers_[eventType],true)}this.startX_=clientX;this.handleSplitterDragStart()},endDrag_(){const doc=this.ownerDocument;for(const eventType in this.handlers_){doc.removeEventListener(eventType,this.handlers_[eventType],true)}this.handlers_=null;this.handleSplitterDragEnd()},getResizeTarget_(){return this.resizeNextElement_?this.nextElementSibling:this.previousElementSibling},calcDeltaX_(deltaX){return this.resizeNextElement_?-deltaX:deltaX},handleMouseDown_(e){e=e;if(e.button){return}this.startDrag(e.clientX,false);e.preventDefault()},handleTouchStart_(e){e=e;if(e.touches.length===1){this.startDrag(e.touches[0].clientX,true);e.preventDefault()}},handleMouseMove_(e){this.handleMove_(e.clientX)},handleTouchMove_(e){if(e.touches.length===1){this.handleMove_(e.touches[0].clientX)}},handleMove_(clientX){const rtl=this.ownerDocument.defaultView.getComputedStyle(this).direction==="rtl";const dirMultiplier=rtl?-1:1;const deltaX=dirMultiplier*(clientX-this.startX_);this.handleSplitterDragMove(deltaX)},handleMouseUp_(e){this.endDrag_()},handleSplitterDragStart(){const targetElement=this.getResizeTarget_();const doc=targetElement.ownerDocument;this.startWidth_=parseFloat(doc.defaultView.getComputedStyle(targetElement).width)+targetElement.offsetWidth-targetElement.clientWidth;this.classList.add("splitter-active")},handleSplitterDragMove(deltaX){const targetElement=this.getResizeTarget_();const newWidth=this.startWidth_+this.calcDeltaX_(deltaX);targetElement.style.width=newWidth+"px";dispatchSimpleEvent(this,"dragmove")},handleSplitterDragEnd(){const targetElement=this.getResizeTarget_();const doc=targetElement.ownerDocument;const computedWidth=parseFloat(doc.defaultView.getComputedStyle(targetElement).width);if(this.startWidth_!==computedWidth){dispatchSimpleEvent(this,"resize")}this.classList.remove("splitter-active")}};// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class TableSplitter extends Splitter{constructor(opt_propertyBag){super();this.__proto__=TableSplitter.prototype;this.table_;this.table=opt_propertyBag&&opt_propertyBag.table||null;this.columnIndex_=-1;this.columnWidth_=0;this.nextColumnWidth_=0;this.decorate()}decorate(){super.decorate();const icon=document.createElement("cr-icon-button");icon.setAttribute("iron-icon","files32:small-dragger");icon.setAttribute("tabindex","-1");icon.setAttribute("aria-hidden","true");icon.classList.add("splitter-icon");this.appendChild(icon);this.classList.add("table-header-splitter")}handleSplitterDragStart(){const cm=this.table_.columnModel;this.ownerDocument.documentElement.classList.add("col-resize");this.columnWidth_=cm.getWidth(this.columnIndex);this.nextColumnWidth_=cm.getWidth(this.columnIndex+1);this.table_.columnModel.handleSplitterDragStart()}handleSplitterDragMove(deltaX){if(this.table_.columnModel.setWidthAndKeepTotal){this.table_.columnModel.setWidthAndKeepTotal(this.columnIndex,this.columnWidth_+deltaX,true)}}handleSplitterDragEnd(){this.ownerDocument.documentElement.classList.remove("col-resize");dispatchSimpleEvent(this,"column-resize-end",true);this.table_.columnModel.handleSplitterDragEnd()}}TableSplitter.prototype.columnIndex;Object.defineProperty(TableSplitter.prototype,"columnIndex",getPropertyDescriptor("columnIndex"));TableSplitter.prototype.table;Object.defineProperty(TableSplitter.prototype,"table",getPropertyDescriptor("table"));// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class TableHeader{constructor(){this.table_=null;this.batchCount_=0;this.headerInner_}static decorate(el){el.__proto__=TableHeader.prototype;el=el;el.className="table-header";el.batchCount_=0;el.headerInner_=el.ownerDocument.createElement("div");el.headerInner_.className="table-header-inner";el.appendChild(el.headerInner_);el.addEventListener("touchstart",el.handleTouchStart_.bind(el),false)}updateWidth(){const list=this.table_.querySelector("list");this.headerInner_.style.width=list.clientWidth+"px"}resize(){const headerCells=this.querySelectorAll(".table-header-cell");if(this.needsFullRedraw_(headerCells)){this.redraw();return}const cm=this.table_.columnModel;for(let i=0;i<cm.size;i++){headerCells[i].style.width=cm.getWidth(i)+"px"}this.placeSplitters_(this.querySelectorAll(".table-header-splitter"))}startBatchUpdates(){this.batchCount_++}endBatchUpdates(){this.batchCount_--;if(this.batchCount_==0){this.redraw()}}redraw(){if(this.batchCount_!=0){return}const cm=this.table_.columnModel;const dm=this.table_.dataModel;this.updateWidth();this.headerInner_.textContent="";if(!cm||!dm){return}for(let i=0;i<cm.size;i++){const cell=this.ownerDocument.createElement("div");cell.style.width=cm.getWidth(i)+"px";cell.hidden=!cm.isVisible(i);cell.className="table-header-cell";if(dm.isSortable(cm.getId(i))){cell.addEventListener("click",this.createSortFunction_(i).bind(this))}cell.appendChild(this.createHeaderLabel_(i));this.headerInner_.appendChild(cell)}this.appendSplitters_()}appendSplitters_(){const cm=this.table_.columnModel;const splitters=[];for(let i=0;i<cm.size;i++){const splitter=new TableSplitter({table:this.table_});splitter.columnIndex=i;splitter.addEventListener("dblclick",this.handleDblClick_.bind(this,i));splitter.hidden=!cm.isVisible(i);this.headerInner_.appendChild(splitter);splitters.push(splitter)}this.placeSplitters_(splitters)}placeSplitters_(splitters){const cm=this.table_.columnModel;let place=0;for(let i=0;i<cm.size;i++){if(splitters[i].hidden){continue}place+=cm.getWidth(i);splitters[i].style.marginInlineStart=place+"px"}}createHeaderLabel_(index){const cm=this.table_.columnModel;const dm=this.table_.dataModel;const labelDiv=this.ownerDocument.createElement("div");labelDiv.className="table-header-label";labelDiv.classList.add(cm.getId(index));if(cm.isEndAlign(index)){labelDiv.style.textAlign="end"}const span=this.ownerDocument.createElement("span");span.appendChild(cm.renderHeader(index,this.table_));span.style.padding="0";labelDiv.appendChild(span);return labelDiv}createSortFunction_(index){return function(){this.table_.sort(index)}.bind(this)}handleTouchStart_(e){e=e;if(e.touches.length!=1){return}const clientX=e.touches[0].clientX;let minDistance=TableHeader.TOUCH_DRAG_AREA_WIDTH;let candidate;const splitters=this.querySelectorAll(".table-header-splitter");for(let i=0;i<splitters.length;i++){const r=splitters[i].getBoundingClientRect();if(clientX<=r.left&&r.left-clientX<=minDistance){minDistance=r.left-clientX;candidate=splitters[i]}if(clientX>=r.right&&clientX-r.right<=minDistance){minDistance=clientX-r.right;candidate=splitters[i]}}if(candidate){candidate.startDrag(clientX,true)}e.stopPropagation()}handleDblClick_(index,e){this.table_.fitColumn(index)}needsFullRedraw_(headerCells){const cm=this.table_.columnModel;if(headerCells.length!=cm.size){return true}for(let i=0;i<cm.size;i++){if(cm.isVisible(i)==headerCells[i].hidden){return true}}return false}}TableHeader.prototype.__proto__=HTMLDivElement.prototype;TableHeader.prototype.table;Object.defineProperty(TableHeader.prototype,"table",getPropertyDescriptor("table"));TableHeader.TOUCH_DRAG_AREA_WIDTH=30;// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class Table{constructor(){this.columnModel_;this.list_;this.header_;this.boundHandleChangeList_;this.boundHandleSorted_;this.boundResize_}get dataModel(){return this.list_.dataModel}set dataModel(dataModel){if(this.list_.dataModel!=dataModel){if(this.list_.dataModel){this.list_.dataModel.removeEventListener("sorted",this.boundHandleSorted_);this.list_.dataModel.removeEventListener("change",this.boundHandleChangeList_);this.list_.dataModel.removeEventListener("splice",this.boundHandleChangeList_)}this.list_.dataModel=dataModel;if(this.list_.dataModel){this.list_.dataModel.addEventListener("sorted",this.boundHandleSorted_);this.list_.dataModel.addEventListener("change",this.boundHandleChangeList_);this.list_.dataModel.addEventListener("splice",this.boundHandleChangeList_)}this.header_.redraw()}}get list(){return this.list_}get columnModel(){return this.columnModel_}set columnModel(columnModel){if(this.columnModel_!=columnModel){if(this.columnModel_){this.columnModel_.removeEventListener("resize",this.boundResize_)}this.columnModel_=columnModel;if(this.columnModel_){this.columnModel_.addEventListener("resize",this.boundResize_)}this.list_.invalidate();this.redraw()}}get selectionModel(){return this.list_.selectionModel}set selectionModel(selectionModel){if(this.list_.selectionModel!=selectionModel){if(this.dataModel){selectionModel.adjustLength(this.dataModel.length)}this.list_.selectionModel=selectionModel}}get autoExpands(){return this.list_.autoExpands}set autoExpands(autoExpands){this.list_.autoExpands=autoExpands}get fixedHeight(){return this.list_.fixedHeight}set fixedHeight(fixedHeight){this.list_.fixedHeight=fixedHeight}getRenderFunction(){return this.renderFunction_}renderFunction_(dataItem,table){const cm=table.columnModel;const listItem=List.prototype.createItem.call(table.list,"");listItem.className="table-row";for(let i=0;i<cm.size;i++){const cell=table.ownerDocument.createElement("div");cell.style.width=cm.getWidth(i)+"px";cell.className="table-row-cell";if(cm.isEndAlign(i)){cell.style.textAlign="end"}cell.hidden=!cm.isVisible(i);cell.appendChild(cm.getRenderFunction(i).call(null,dataItem,cm.getId(i),table));listItem.appendChild(cell)}listItem.style.width=cm.totalWidth+"px";return listItem}setRenderFunction(renderFunction){if(renderFunction===this.renderFunction_){return}this.renderFunction_=renderFunction;dispatchSimpleEvent(this,"change")}get header(){return this.header_}static decorate(element){element.__proto__=Table.prototype;element=element;element.columnModel_=new TableColumnModel([]);element.header_=element.ownerDocument.createElement("div");element.list_=element.ownerDocument.createElement("list");element.appendChild(element.header_);element.appendChild(element.list_);TableList.decorate(element.list_);element.list_.selectionModel=new ListSelectionModel;element.list_.table=element;element.list_.addEventListener("scroll",element.handleScroll_.bind(element));TableHeader.decorate(element.header_);element.header_.table=element;element.classList.add("table");element.boundResize_=element.resize.bind(element);element.boundHandleSorted_=element.handleSorted_.bind(element);element.boundHandleChangeList_=element.handleChangeList_.bind(element);if(element.hasAttribute("tabindex")){element.list_.setAttribute("tabindex",element.getAttribute("tabindex"));element.removeAttribute("tabindex")}element.addEventListener("focus",element.handleElementFocus_,true);element.addEventListener("blur",element.handleElementBlur_,true)}redraw(){this.list_.redraw();this.header_.redraw()}startBatchUpdates(){this.list_.startBatchUpdates();this.header_.startBatchUpdates()}endBatchUpdates(){this.list_.endBatchUpdates();this.header_.endBatchUpdates()}resize(){this.list_.resize();this.header_.resize()}scrollIndexIntoView(i){this.list_.scrollIndexIntoView(i)}getListItemByIndex(index){return this.list_.getListItemByIndex(index)}handleSorted_(e){this.header_.redraw()}handleChangeList_(e){requestAnimationFrame(this.header_.updateWidth.bind(this.header_))}handleScroll_(e){this.header_.style.marginLeft=-this.list_.scrollLeft+"px"}sort(i){const cm=this.columnModel_;const sortStatus=this.list_.dataModel.sortStatus;if(sortStatus.field==cm.getId(i)){const sortDirection=sortStatus.direction=="desc"?"asc":"desc";this.list_.dataModel.sort(sortStatus.field,sortDirection)}else{this.list_.dataModel.sort(cm.getId(i),cm.getDefaultOrder(i))}if(this.selectionModel.selectedIndex==-1){this.list_.scrollTop=0}}handleElementFocus_(e){if(!this.hasElementFocus){this.hasElementFocus=true;this.list_.redraw()}}handleElementBlur_(e){const table=this;const list=this.list_;const doc=e.target.ownerDocument;window.setTimeout((function(){const activeElement=doc.activeElement;if(!table.contains(activeElement)){table.hasElementFocus=false;list.redraw()}}),0)}fitColumn(index){const list=this.list_;const listHeight=list.clientHeight;const cm=this.columnModel_;const dm=this.dataModel;const columnId=cm.getId(index);const doc=this.ownerDocument;const render=cm.getRenderFunction(index);const table=this;const MAXIMUM_ROWS_TO_MEASURE=1e3;const container=doc.createElement("li");container.style.display="inline-block";container.style.textAlign="start";container.style.webkitBoxOrient="vertical";dm.prepareSort(columnId,(function(){const items=list.getItemsInViewPort(list.scrollTop,listHeight);const firstIndex=Math.floor(Math.max(0,(items.last+items.first-MAXIMUM_ROWS_TO_MEASURE)/2));const lastIndex=Math.min(dm.length,firstIndex+MAXIMUM_ROWS_TO_MEASURE);for(let i=firstIndex;i<lastIndex;i++){const item=dm.item(i);const div=doc.createElement("div");div.className="table-row-cell";div.appendChild(render(item,columnId,table));container.appendChild(div)}list.appendChild(container);const width=parseFloat(window.getComputedStyle(container).width);list.removeChild(container);cm.setWidth(index,width)}))}normalizeColumns(){this.columnModel.normalizeWidths(this.clientWidth)}}Table.prototype.__proto__=HTMLDivElement.prototype;Table.prototype.hasElementFocus;Object.defineProperty(Table.prototype,"hasElementFocus",getPropertyDescriptor("hasElementFocus",PropertyKind.BOOL_ATTR));// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class TableList extends List{constructor(opt_propertyBag){super(opt_propertyBag);this.table_=null;this.afterFiller_}static decorate(el){if(List.decorate){List.decorate(el)}el.__proto__=TableList.prototype;el.className="list"}resize(){if(this.needsFullRedraw_()){this.redraw();return}if(this.updateScrollbars_()){List.prototype.redraw.call(this)}this.resizeCells_()}resizeCells_(){const cm=this.table_.columnModel;for(let row=this.firstElementChild;row;row=row.nextElementSibling){if(row.tagName!="LI"){continue}for(let i=0;i<cm.size;i++){row.children[i].style.width=cm.getWidth(i)+"px"}row.style.width=cm.totalWidth+"px"}this.afterFiller_.style.width=cm.totalWidth+"px"}redraw(){if(this.batchCount_!=0){return}this.updateScrollbars_();List.prototype.redraw.call(this);this.resizeCells_()}getAfterFillerHeight(lastIndex){return lastIndex==0?1:List.prototype.getAfterFillerHeight.call(this,lastIndex)}updateScrollbars_(){const cm=this.table_.columnModel;const style=this.style;if(!cm||cm.size==0){if(style.overflow!="hidden"){style.overflow="hidden";return true}else{return false}}let height=this.offsetHeight;let changed=false;const offsetWidth=this.offsetWidth;if(cm.totalWidth>offsetWidth){if(style.overflowX!="scroll"){style.overflowX="scroll"}height=this.clientHeight}if(this.areAllItemsVisible_(height)){if(cm.totalWidth<=offsetWidth&&style.overflowX!="hidden"){style.overflowX="hidden"}changed=this.showVerticalScrollBar_(false)}else{changed=this.showVerticalScrollBar_(true);const x=cm.totalWidth<=this.clientWidth?"hidden":"scroll";if(style.overflowX!=x){style.overflowX=x}}return changed}showVerticalScrollBar_(show){const style=this.style;if(show&&style.overflowY=="scroll"){return false}if(!show&&style.overflowY=="hidden"){return false}style.overflowY=show?"scroll":"hidden";return true}areAllItemsVisible_(visibleHeight){if(!this.dataModel||this.dataModel.length==0){return true}return this.getItemTop(this.dataModel.length)<=visibleHeight}createItem(dataItem){return this.table_.getRenderFunction().call(null,dataItem,this.table_)}needsFullRedraw_(){const cm=this.table_.columnModel;const row=this.firstElementChild;if(row.children.length!=cm.size){return true}for(let i=0;i<cm.size;++i){if(cm.isVisible(i)==row.children[i].hidden){return true}}return false}}TableList.prototype.table;Object.defineProperty(TableList.prototype,"table",getPropertyDescriptor("table"));// Copyright 2015 The Chromium Authors. All rights reserved.
const filelist={};class FileTableList extends TableList{constructor(){super();this.onMergeItems_=null;throw new Error("Designed to decorate elements")}setOnMergeItems(onMergeItems){assert(!this.onMergeItems_);this.onMergeItems_=onMergeItems}mergeItems(beginIndex,endIndex){super.mergeItems(beginIndex,endIndex);for(let i=beginIndex;i<endIndex;i++){const item=this.getListItemByIndex(i);if(!item){continue}const isSelected=this.selectionModel.getIndexSelected(i);if(item.selected!==isSelected){item.selected=isSelected}}if(this.onMergeItems_){this.onMergeItems_(beginIndex,endIndex)}}createSelectionController(sm){return new FileListSelectionController(assert(sm),this)}get a11y(){return this.table.a11y}getItemLabel(index){return this.table.getItemLabel(index)}}FileTableList.decorate=self=>{self.__proto__=FileTableList.prototype;self.setAttribute("aria-multiselectable",true);self.setAttribute("aria-describedby","more-actions-info");self.onMergeItems_=null};class FileListSelectionController extends ListSelectionController{constructor(selectionModel,tableList){super(selectionModel);this.tapHandler_=new FileTapHandler;this.tableList_=tableList}handlePointerDownUp(e,index){filelist.handlePointerDownUp.call(this,e,index)}handleTouchEvents(e,index){if(this.tapHandler_.handleTouchEvents(assert(e),index,filelist.handleTap.bind(this))){filelist.focusParentList(e)}}handleKeyDown(e){filelist.handleKeyDown.call(this,e)}get filesView(){return this.tableList_}}filelist.decorateListItem=(li,entry,metadataModel)=>{li.classList.add(entry.isDirectory?"directory":"file");const externalProps=metadataModel.getCache([entry],["hosted","availableOffline","customIconUrl","shared","isMachineRoot","isExternalMedia","pinned"])[0];filelist.updateListItemExternalProps(li,externalProps,util$3.isTeamDriveRoot(entry));li.setAttribute("role","option");Object.defineProperty(li,"selected",{get:function(){return this.hasAttribute("selected")},set:function(v){if(v){this.setAttribute("selected","")}else{this.removeAttribute("selected")}}})};filelist.renderFileTypeIcon=(doc,entry,locationInfo,opt_mimeType)=>{const icon=doc.createElement("div");icon.className="detail-icon";icon.setAttribute("file-type-icon",FileType.getIcon(entry,opt_mimeType,locationInfo.rootType));return icon};filelist.renderFileNameLabel=(doc,entry,locationInfo)=>{const box=doc.createElement("div");box.className="filename-label";const fileName=doc.createElement("span");fileName.className="entry-name";fileName.textContent=util$3.getEntryLabel(locationInfo,entry);box.appendChild(fileName);return box};filelist.renderPinned=doc=>{const icon=doc.createElement("div");icon.className="detail-pinned";icon.setAttribute("aria-label",str("OFFLINE_COLUMN_LABEL"));return icon};filelist.updateListItemExternalProps=(li,externalProps,isTeamDriveRoot)=>{if(li.classList.contains("file")){li.classList.toggle("dim-offline",externalProps.availableOffline===false);li.classList.toggle("dim-hosted",!!externalProps.hosted)}li.classList.toggle("pinned",!!externalProps.pinned);const iconDiv=li.querySelector(".detail-icon");if(!iconDiv){return}if(externalProps.customIconUrl){iconDiv.style.backgroundImage="url("+externalProps.customIconUrl+")"}else{iconDiv.style.backgroundImage=""}if(li.classList.contains("directory")){iconDiv.classList.toggle("shared",!!externalProps.shared);iconDiv.classList.toggle("team-drive-root",!!isTeamDriveRoot);iconDiv.classList.toggle("computers-root",!!externalProps.isMachineRoot);iconDiv.classList.toggle("external-media-root",!!externalProps.isExternalMedia)}};filelist.handleTap=function(e,index,eventType){const sm=this.selectionModel;if(eventType===FileTapHandler.TapEvent.TWO_FINGER_TAP){if(index===-1){this.filesView.a11y.speakA11yMessage(str("SELECTION_ALL_ENTRIES"));sm.unselectAll()}else{const indexSelected=sm.getIndexSelected(index);if(!indexSelected){if(sm.getCheckSelectMode()){sm.unselectAll()}sm.beginChange();sm.selectedIndex=index;sm.endChange();const name=this.filesView.getItemLabel(index)}}return false}if(index===-1){return false}const isTap=eventType===FileTapHandler.TapEvent.TAP||eventType===FileTapHandler.TapEvent.LONG_TAP;const isCheckbox=e.target.classList.contains("detail-checkmark");const isRename=e.target.localName==="input";if(eventType===FileTapHandler.TapEvent.TAP&&(isCheckbox||isRename)){return false}if(sm.multiple&&sm.getCheckSelectMode()&&isTap&&!e.shiftKey){sm.beginChange();const name=this.filesView.getItemLabel(index);const msgId=sm.getIndexSelected(index)?"SELECTION_ADD_SINGLE_ENTRY":"SELECTION_REMOVE_SINGLE_ENTRY";this.filesView.a11y.speakA11yMessage(strf(msgId,name));sm.setIndexSelected(index,!sm.getIndexSelected(index));sm.leadIndex=index;sm.anchorIndex=index;sm.endChange();return true}else if(sm.multiple&&eventType===FileTapHandler.TapEvent.LONG_PRESS){sm.beginChange();if(!sm.getCheckSelectMode()){sm.unselectAll();sm.setCheckSelectMode(true)}const name=this.filesView.getItemLabel(index);sm.setIndexSelected(index,true);sm.leadIndex=index;sm.anchorIndex=index;sm.endChange();return true}else if(eventType===FileTapHandler.TapEvent.TAP&&!sm.getCheckSelectMode()){sm.beginChange();sm.unselectAll();const name=this.filesView.getItemLabel(index);sm.setIndexSelected(index,true);sm.leadIndex=index;sm.anchorIndex=index;sm.endChange()}return false};filelist.handlePointerDownUp=function(e,index){const sm=this.selectionModel;const anchorIndex=sm.anchorIndex;const isDown=e.type==="mousedown";const isTargetCheckmark=e.target.classList.contains("detail-checkmark")||e.target.classList.contains("checkmark");const isClickOnCheckmark=isTargetCheckmark&&sm.multiple&&index!==-1&&!e.shiftKey&&!e.ctrlKey&&e.button===0;sm.beginChange();if(index===-1){this.filesView.a11y.speakA11yMessage(str("SELECTION_CANCELLATION"));sm.leadIndex=sm.anchorIndex=-1;sm.unselectAll()}else{if(sm.multiple&&(e.ctrlKey||isClickOnCheckmark)&&!e.shiftKey){if(!isDown){if(isClickOnCheckmark){if(!sm.getCheckSelectMode()){sm.unselectAll()}}sm.setCheckSelectMode(true);const name=this.filesView.getItemLabel(index);const msgId=sm.getIndexSelected(index)?"SELECTION_REMOVE_SINGLE_ENTRY":"SELECTION_ADD_SINGLE_ENTRY";this.filesView.a11y.speakA11yMessage(strf(msgId,name));sm.setIndexSelected(index,!sm.getIndexSelected(index));sm.leadIndex=index;sm.anchorIndex=index}}else if(e.shiftKey&&anchorIndex!==-1&&anchorIndex!==index){if(isDown){sm.unselectAll();sm.leadIndex=index;if(sm.multiple){sm.selectRange(anchorIndex,index);const nameStart=this.filesView.getItemLabel(anchorIndex);const nameEnd=this.filesView.getItemLabel(index);const count=Math.abs(index-anchorIndex)+1;const msg=strf("SELECTION_ADD_RANGE",count,nameStart,nameEnd);this.filesView.a11y.speakA11yMessage(msg)}else{const name=this.filesView.getItemLabel(index);sm.setIndexSelected(index,true)}}}else{const isRightClick=e.button===2;const indexSelected=sm.getIndexSelected(index);if((indexSelected&&!isDown||!indexSelected&&isDown)&&!(indexSelected&&isRightClick)){if(sm.getCheckSelectMode()){sm.endChange();sm.unselectAll();sm.beginChange()}if(isDown){const name=this.filesView.getItemLabel(index)}sm.selectedIndex=index}}}sm.endChange()};filelist.handleKeyDown=function(e){const tagName=e.target.tagName;if(tagName==="INPUT"){const inputType=e.target.type;if(inputType==="checkbox"||inputType==="radio"){if(e.key===" "){return}}else if(e.key!=="ArrowUp"&&e.key!=="ArrowDown"){return}}if(tagName==="SELECT"){return}const sm=this.selectionModel;let newIndex=-1;const leadIndex=sm.leadIndex;let prevent=true;const pressedKeyA=e.keyCode===65||e.key==="a";if(sm.multiple&&pressedKeyA&&(isMac&&e.metaKey||!isMac&&e.ctrlKey)){this.filesView.a11y.speakA11yMessage(str("SELECTION_ALL_ENTRIES"));sm.setCheckSelectMode(true);sm.selectAll();e.preventDefault();return}if(e.key==="Escape"&&!e.ctrlKey&&!e.shiftKey){this.filesView.a11y.speakA11yMessage(str("SELECTION_CANCELLATION"));sm.unselectAll();e.preventDefault();return}if(e.code==="Space"||e.key===" "){if(leadIndex!==-1){const selected=sm.getIndexSelected(leadIndex);if(e.ctrlKey){sm.beginChange();if(selected&&sm.selectedIndexes.length===1&&!sm.getCheckSelectMode()){sm.setIndexSelected(leadIndex,false);sm.setIndexSelected(leadIndex,true);const name=this.filesView.getItemLabel(leadIndex);this.filesView.a11y.speakA11yMessage(strf("SELECTION_SINGLE_ENTRY",name))}else{sm.setIndexSelected(leadIndex,!selected);const name=this.filesView.getItemLabel(leadIndex);const msgId=selected?"SELECTION_REMOVE_SINGLE_ENTRY":"SELECTION_ADD_SINGLE_ENTRY";this.filesView.a11y.speakA11yMessage(strf(msgId,name))}sm.setCheckSelectMode(true);sm.endChange();e.stopPropagation();e.preventDefault();return}}}switch(e.key){case"Home":newIndex=this.getFirstIndex();break;case"End":newIndex=this.getLastIndex();break;case"ArrowUp":newIndex=leadIndex===-1?this.getLastIndex():this.getIndexAbove(leadIndex);break;case"ArrowDown":newIndex=leadIndex===-1?this.getFirstIndex():this.getIndexBelow(leadIndex);break;case"ArrowLeft":case"MediaTrackPrevious":newIndex=leadIndex===-1?this.getLastIndex():this.getIndexBefore(leadIndex);break;case"ArrowRight":case"MediaTrackNext":newIndex=leadIndex===-1?this.getFirstIndex():this.getIndexAfter(leadIndex);break;default:prevent=false}if(newIndex>=0&&newIndex<sm.length){sm.beginChange();sm.leadIndex=newIndex;if(e.shiftKey){const anchorIndex=sm.anchorIndex;if(sm.multiple){sm.unselectAll()}if(anchorIndex===-1){const name=this.filesView.getItemLabel(newIndex);sm.setIndexSelected(newIndex,true);sm.anchorIndex=newIndex}else{const nameStart=this.filesView.getItemLabel(anchorIndex);const nameEnd=this.filesView.getItemLabel(newIndex);const count=Math.abs(newIndex-anchorIndex)+1;const msg=strf("SELECTION_ADD_RANGE",count,nameStart,nameEnd);this.filesView.a11y.speakA11yMessage(msg);sm.selectRange(anchorIndex,newIndex)}}else if(e.ctrlKey){sm.anchorIndex=newIndex}else{sm.setCheckSelectMode(false);if(sm.multiple){sm.unselectAll()}const name=this.filesView.getItemLabel(newIndex);sm.setIndexSelected(newIndex,true);sm.anchorIndex=newIndex}sm.endChange();if(prevent){e.preventDefault()}}};filelist.focusParentList=event=>{let element=event.target;while(element&&!(element instanceof List)){element=element.parentElement}if(element){element.focus()}};// Copyright (c) 2012 The Chromium Authors. All rights reserved.
function GridItem(dataItem){const el=document.createElement("li");el.dataItem=dataItem;el.__proto__=GridItem.prototype;return el}GridItem.prototype={__proto__:ListItem.prototype,decorate(){ListItem.prototype.decorate.apply(this,arguments);this.textContent=this.dataItem}};const Grid=define("grid");Grid.prototype={__proto__:List.prototype,columns_:0,itemConstructor_:GridItem,get fixedHeight(){return true},set fixedHeight(fixedHeight){if(!fixedHeight){console.warn("Grid does not support fixedHeight = false")}},getColumnCount_(){const size=this.getDefaultItemSize_();if(!size){return 0}const width=size.width+Math.min(size.marginLeft,size.marginRight);const height=size.height+Math.min(size.marginTop,size.marginBottom);if(!width||!height){return 0}const itemCount=this.dataModel?this.dataModel.length:0;if(!itemCount){return 0}const columns=Math.floor((this.clientWidthWithoutScrollbar_-this.horizontalPadding_)/width);if(!columns){return 0}const rows=Math.ceil(itemCount/columns);if(rows*height<=this.clientHeight_){return columns}return Math.floor((this.clientWidthWithScrollbar_-this.horizontalPadding_)/width)},updateMetrics_(){const offsetWidth=this.offsetWidth;const offsetHeight=this.offsetHeight;const style=window.getComputedStyle(this);const overflowY=style.overflowY;const horizontalPadding=parseFloat(style.paddingLeft)+parseFloat(style.paddingRight);if(this.lastOffsetWidth_===offsetWidth&&this.lastOverflowY===overflowY&&this.horizontalPadding_===horizontalPadding){this.lastOffsetHeight_=offsetHeight;return}this.lastOffsetWidth_=offsetWidth;this.lastOffsetHeight_=offsetHeight;this.lastOverflowY=overflowY;this.horizontalPadding_=horizontalPadding;this.columns_=0;if(overflowY==="auto"&&offsetWidth>0){const originalClientWidth=this.clientWidth;this.style.overflowY="hidden";this.clientWidthWithoutScrollbar_=this.clientWidth;this.clientHeight_=this.clientHeight;if(this.clientWidth!==originalClientWidth){this.clientWidthWithScrollbar_=originalClientWidth}else{this.style.overflowY="scroll";this.clientWidthWithScrollbar_=this.clientWidth}this.style.overflowY=""}else{this.clientWidthWithoutScrollbar_=this.clientWidthWithScrollbar_=this.clientWidth;this.clientHeight_=this.clientHeight}},get columns(){if(!this.columns_){this.columns_=this.getColumnCount_()}return this.columns_||1},set columns(value){if(value>=0&&value!==this.columns_){this.columns_=value;this.redraw()}},getItemTop(index){return Math.floor(index/this.columns)*this.getDefaultItemHeight_()},getItemRow(index){return Math.floor(index/this.columns)},getFirstItemInRow(row){return row*this.columns},createSelectionController(sm){return new GridSelectionController(sm,this)},getItemsInViewPort(scrollTop,clientHeight){const itemHeight=this.getDefaultItemHeight_();const firstIndex=this.autoExpands?0:this.getIndexForListOffset_(scrollTop);const columns=this.columns;let count=this.autoExpands?this.dataModel.length:Math.max(columns*(Math.ceil(clientHeight/itemHeight)+1),this.countItemsInRange_(firstIndex,scrollTop+clientHeight));count=columns*Math.ceil(count/columns);count=Math.min(count,this.dataModel.length-firstIndex);return{first:firstIndex,length:count,last:firstIndex+count-1}},mergeItems(firstIndex,lastIndex){List.prototype.mergeItems.call(this,firstIndex,lastIndex);const afterFiller=this.afterFiller_;const columns=this.columns;for(let item=this.beforeFiller_.nextSibling;item!==afterFiller;){const next=item.nextSibling;if(isSpacer(item)){this.removeChild(item);item=next;continue}const index=item.listIndex;const nextIndex=index+1;if(index>=firstIndex&&nextIndex<lastIndex&&nextIndex%columns===0){if(isSpacer(next)){item=next.nextSibling}else{const spacer=this.ownerDocument.createElement("div");spacer.className="spacer";this.insertBefore(spacer,next);item=next}}else{item=next}}function isSpacer(child){return child.classList.contains("spacer")&&child!==afterFiller}},getAfterFillerHeight(lastIndex){const columns=this.columns;const itemHeight=this.getDefaultItemHeight_();const afterRows=Math.floor((this.dataModel.length-1)/columns)-Math.floor((lastIndex-1)/columns);return afterRows*itemHeight},isItem(child){return child.nodeType===Node.ELEMENT_NODE&&!child.classList.contains("spacer")},redraw(){this.updateMetrics_();const itemCount=this.dataModel?this.dataModel.length:0;if(this.lastItemCount_!==itemCount){this.lastItemCount_=itemCount;this.columns_=0}List.prototype.redraw.call(this)}};function GridSelectionController(selectionModel,grid){this.selectionModel_=selectionModel;this.grid_=grid}GridSelectionController.prototype={__proto__:ListSelectionController.prototype,isAccessibilityEnabled(){return window.cvox&&window.cvox.Api&&window.cvox.Api.isChromeVoxActive&&window.cvox.Api.isChromeVoxActive()},getIndexBelow(index){if(this.isAccessibilityEnabled()){return this.getIndexAfter(index)}const last=this.getLastIndex();if(index===last){return-1}index+=this.grid_.columns;return Math.min(index,last)},getIndexAbove(index){if(this.isAccessibilityEnabled()){return this.getIndexBefore(index)}if(index===0){return-1}index-=this.grid_.columns;return Math.max(index,0)},getIndexBefore(index){return index-1},getIndexAfter(index){if(index===this.getLastIndex()){return-1}return index+1}};// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class FileGrid extends Grid{constructor(){super();this.paddingTop_=0;this.paddingStart_=0;this.beginIndex_=0;this.endIndex_=0;this.beforeFiller_=null;this.afterFiller_=null;this.importStatusVisible_=true;this.metadataModel_=null;this.listThumbnailLoader_=null;this.volumeManager_=null;this.historyLoader_=null;this.relayoutRateLimiter_=null;this.onThumbnailLoadedBound_=null;this.dataModelDescriptor_=null;this.a11y=null;throw new Error("Use FileGrid.decorate")}get dataModel(){if(!this.dataModelDescriptor_){this.dataModelDescriptor_=Object.getOwnPropertyDescriptor(List.prototype,"dataModel")}return this.dataModelDescriptor_.get.call(this)}set dataModel(model){if(this.dataModel){this.dataModel.removeEventListener("splice",this.onSplice_.bind(this))}this.dataModelDescriptor_.set.call(this,model);if(this.dataModel){this.dataModel.addEventListener("splice",this.onSplice_.bind(this));this.classList.toggle("image-dominant",this.dataModel.isImageDominant())}}static decorate(element,metadataModel,volumeManager,historyLoader,a11y){if(Grid.decorate){Grid.decorate(element)}const self=element;self.__proto__=FileGrid.prototype;self.setAttribute("aria-multiselectable",true);self.setAttribute("aria-describedby","more-actions-info");self.metadataModel_=metadataModel;self.volumeManager_=volumeManager;self.historyLoader_=historyLoader;self.a11y=a11y;const endSpacer=self.querySelector(".spacer:last-child");if(endSpacer){endSpacer.classList.add("signals-overscroll")}self.listThumbnailLoader_=null;self.beginIndex_=0;self.endIndex_=0;self.importStatusVisible_=true;self.onThumbnailLoadedBound_=self.onThumbnailLoaded_.bind(self);self.itemConstructor=function(entry){let item=self.ownerDocument.createElement("li");item.__proto__=FileGrid.Item.prototype;item=item;self.decorateThumbnail_(item,entry);return item};self.relayoutRateLimiter_=new AsyncUtil.RateLimiter(self.relayoutImmediately_.bind(self));const style=window.getComputedStyle(self);self.paddingStart_=parseFloat(isRTL()?style.paddingRight:style.paddingLeft);self.paddingTop_=parseFloat(style.paddingTop)}getItemLabel(index){if(index===-1){return""}const entry=this.dataModel.item(index);if(!entry){return""}const locationInfo=this.volumeManager_.getLocationInfo(entry);return util$3.getEntryLabel(locationInfo,entry)}setListThumbnailLoader(listThumbnailLoader){if(this.listThumbnailLoader_){this.listThumbnailLoader_.removeEventListener("thumbnailLoaded",this.onThumbnailLoadedBound_)}this.listThumbnailLoader_=listThumbnailLoader;if(this.listThumbnailLoader_){this.listThumbnailLoader_.addEventListener("thumbnailLoaded",this.onThumbnailLoadedBound_);this.listThumbnailLoader_.setHighPriorityRange(this.beginIndex_,this.endIndex_)}}getThumbnail(index){const listItem=this.getListItemByIndex(index);if(!listItem){return null}const container=listItem.querySelector(".img-container");if(!container){return null}return container.querySelector(".thumbnail")}onThumbnailLoaded_(event){const listItem=this.getListItemByIndex(event.index);const entry=listItem&&this.dataModel.item(listItem.listIndex);if(entry){const box=listItem.querySelector(".img-container");if(box){const mimeType=this.metadataModel_.getCache([entry],["contentMimeType"])[0].contentMimeType;if(!event.dataUrl){FileGrid.clearThumbnailImage_(assertInstanceof(box,HTMLDivElement));this.setGenericThumbnail_(assertInstanceof(box,HTMLDivElement),entry,mimeType)}else{FileGrid.setThumbnailImage_(assertInstanceof(box,HTMLDivElement),entry,assert(event.dataUrl),assert(event.width),assert(event.height),mimeType)}}listItem.classList.toggle("thumbnail-loaded",!!event.dataUrl)}}mergeItems(beginIndex,endIndex){List.prototype.mergeItems.call(this,beginIndex,endIndex);const afterFiller=this.afterFiller_;const columns=this.columns;let previousTitle="";for(let item=this.beforeFiller_.nextSibling;item!==afterFiller;){const next=item.nextSibling;if(isSpacer(item)){this.removeChild(item);item=next;continue}const index=item.listIndex;const nextIndex=index+1;const entry=this.dataModel.item(index);if(entry&&util$3.isFilesNg()){if(entry.isDirectory&&previousTitle!=="dir"){const title=document.createElement("div");title.innerText=str("GRID_VIEW_FOLDERS_TITLE");title.classList.add("grid-title","folders");this.insertBefore(title,item);previousTitle="dir"}else if(!entry.isDirectory&&previousTitle!=="file"){const title=document.createElement("div");title.innerText=str("GRID_VIEW_FILES_TITLE");title.classList.add("grid-title","files");this.insertBefore(title,item);previousTitle="file"}}if(index>=beginIndex&&nextIndex<endIndex&&(nextIndex<this.dataModel.getFolderCount()?nextIndex%columns===0:(nextIndex-this.dataModel.getFolderCount())%columns===0)){const isFolderSpacer=nextIndex===this.dataModel.getFolderCount();if(isSpacer(next)){next.classList.toggle("folder-spacer",isFolderSpacer);item=next.nextSibling}else{const spacer=this.ownerDocument.createElement("div");spacer.className="spacer";spacer.classList.toggle("folder-spacer",isFolderSpacer);this.insertBefore(spacer,next);item=next}}else{item=next}}function isSpacer(child){return child.classList.contains("spacer")&&child!==afterFiller}for(let i=beginIndex;i<endIndex;i++){const item=this.getListItemByIndex(i);if(!item){continue}const isSelected=this.selectionModel.getIndexSelected(i);if(item.selected!==isSelected){item.selected=isSelected}}this.beginIndex_=beginIndex;this.endIndex_=endIndex;if(this.listThumbnailLoader_!==null){this.listThumbnailLoader_.setHighPriorityRange(beginIndex,endIndex)}}getItemTop(index){if(index<this.dataModel.getFolderCount()){return Math.floor(index/this.columns)*this.getFolderItemHeight_()}const folderRows=this.getFolderRowCount();const indexInFiles=index-this.dataModel.getFolderCount();return folderRows*this.getFolderItemHeight_()+(folderRows>0?this.getSeparatorHeight_():0)+Math.floor(indexInFiles/this.columns)*this.getFileItemHeight_()}getItemRow(index){if(index<this.dataModel.getFolderCount()){return Math.floor(index/this.columns)}const folderRows=this.getFolderRowCount();const indexInFiles=index-this.dataModel.getFolderCount();return folderRows+Math.floor(indexInFiles/this.columns)}getItemColumn(index){if(index<this.dataModel.getFolderCount()){return index%this.columns}const indexInFiles=index-this.dataModel.getFolderCount();return indexInFiles%this.columns}getItemIndex(row,column){if(row<0||column<0||column>=this.columns){return-1}const folderCount=this.dataModel.getFolderCount();const folderRows=this.getFolderRowCount();let index;if(row<folderRows){index=row*this.columns+column;return index<folderCount?index:-1}index=folderCount+(row-folderRows)*this.columns+column;return index<this.dataModel.length?index:-1}getFirstItemInRow(row){const folderRows=this.getFolderRowCount();if(row<folderRows){return row*this.columns}return this.dataModel.getFolderCount()+(row-folderRows)*this.columns}scrollIndexIntoView(index){const dataModel=this.dataModel;if(!dataModel||index<0||index>=dataModel.length){return}const itemHeight=index<this.dataModel.getFolderCount()?this.getFolderItemHeight_():this.getFileItemHeight_();const scrollTop=this.scrollTop;const top=this.getItemTop(index);const clientHeight=this.clientHeight;const computedStyle=window.getComputedStyle(this);const paddingY=parseInt(computedStyle.paddingTop,10)+parseInt(computedStyle.paddingBottom,10);const availableHeight=clientHeight-paddingY;const self=this;const scrollToAdjustTop=()=>{self.scrollTop=top};const scrollToAdjustBottom=()=>{self.scrollTop=top+itemHeight-availableHeight};if(itemHeight<=availableHeight){if(top<scrollTop){scrollToAdjustTop()}else if(scrollTop+availableHeight<top+itemHeight){scrollToAdjustBottom()}}else{if(scrollTop<top){scrollToAdjustTop()}else if(top+itemHeight<scrollTop+availableHeight){scrollToAdjustBottom()}}}getItemsInViewPort(scrollTop,clientHeight){const beginRow=this.getRowForListOffset_(scrollTop);const endRow=this.getRowForListOffset_(scrollTop+clientHeight-1)+1;const beginIndex=this.getFirstItemInRow(beginRow);const endIndex=Math.min(this.getFirstItemInRow(endRow),this.dataModel.length);const result={first:beginIndex,length:endIndex-beginIndex,last:endIndex-1};return result}getAfterFillerHeight(lastIndex){const folderRows=this.getFolderRowCount();const fileRows=this.getFileRowCount();const row=this.getItemRow(lastIndex-1);if(row<folderRows){let fillerHeight=(folderRows-1-row)*this.getFolderItemHeight_()+fileRows*this.getFileItemHeight_();if(fileRows>0){fillerHeight+=this.getSeparatorHeight_()}return fillerHeight}const rowInFiles=row-folderRows;return(fileRows-1-rowInFiles)*this.getFileItemHeight_()}getFolderRowCount(){return Math.ceil(this.dataModel.getFolderCount()/this.columns)}getFileRowCount(){return Math.ceil(this.dataModel.getFileCount()/this.columns)}getFolderItemHeight_(){return 44}getFileItemHeight_(){return 184}getItemWidth_(){return 184}getItemMarginTop_(){return 4}getItemMarginLeft_(){return 4}getSeparatorHeight_(){return 5}getRowForListOffset_(offset){const innerOffset=Math.max(0,offset-this.paddingTop_);const folderRows=this.getFolderRowCount();if(innerOffset<folderRows*this.getFolderItemHeight_()){return Math.floor(innerOffset/this.getFolderItemHeight_())}let offsetInFiles=innerOffset-folderRows*this.getFolderItemHeight_();if(folderRows>0){offsetInFiles=Math.max(0,offsetInFiles-this.getSeparatorHeight_())}return folderRows+Math.floor(offsetInFiles/this.getFileItemHeight_())}createSelectionController(sm){return new FileGridSelectionController(assert(sm),this)}updateListItemsMetadata(type,entries){const urls=util$3.entriesToURLs(entries);const boxes=this.querySelectorAll(".img-container");for(let i=0;i<boxes.length;i++){const box=boxes[i];const listItem=this.getListItemAncestor(box);const entry=listItem&&this.dataModel.item(listItem.listIndex);if(!entry||urls.indexOf(entry.toURL())===-1){continue}this.decorateThumbnailBox_(assert(listItem),entry);this.updateSharedStatus_(assert(listItem),entry)}}relayout(){this.relayoutRateLimiter_.run()}relayoutImmediately_(){this.startBatchUpdates();this.columns=0;this.redraw();this.endBatchUpdates();dispatchSimpleEvent(this,"relayout")}decorateThumbnail_(li,entry){li.className="thumbnail-item";if(entry){filelist.decorateListItem(li,entry,assert(this.metadataModel_))}const frame=li.ownerDocument.createElement("div");frame.className="thumbnail-frame";li.appendChild(frame);const box=li.ownerDocument.createElement("div");box.classList.add("img-container","no-thumbnail");frame.appendChild(box);if(entry){this.decorateThumbnailBox_(assertInstanceof(li,HTMLLIElement),entry)}if(!util$3.isFilesNg()){const shield=li.ownerDocument.createElement("div");shield.className="shield";frame.appendChild(shield)}const isDirectory=entry&&entry.isDirectory;if(!isDirectory){if(!util$3.isFilesNg()){const activeCheckmark=li.ownerDocument.createElement("div");activeCheckmark.className="checkmark active";frame.appendChild(activeCheckmark);const inactiveCheckmark=li.ownerDocument.createElement("div");inactiveCheckmark.className="checkmark inactive";frame.appendChild(inactiveCheckmark)}}const badge=li.ownerDocument.createElement("div");badge.className="badge";frame.appendChild(badge);const bottom=li.ownerDocument.createElement("div");bottom.className="thumbnail-bottom";const mimeType=this.metadataModel_.getCache([entry],["contentMimeType"])[0].contentMimeType;const locationInfo=this.volumeManager_.getLocationInfo(entry);const detailIcon=filelist.renderFileTypeIcon(li.ownerDocument,entry,locationInfo,mimeType);if(isDirectory||util$3.isFilesNg()){const checkmark=li.ownerDocument.createElement("div");checkmark.className="detail-checkmark";detailIcon.appendChild(checkmark)}bottom.appendChild(detailIcon);bottom.appendChild(filelist.renderFileNameLabel(li.ownerDocument,entry,locationInfo));frame.appendChild(bottom);li.setAttribute("file-name",util$3.getEntryLabel(locationInfo,entry));this.updateSharedStatus_(li,entry)}decorateThumbnailBox_(li,entry){const box=assertInstanceof(li.querySelector(".img-container"),HTMLDivElement);if(this.importStatusVisible_&&importer.isEligibleType(entry)){this.historyLoader_.getHistory().then(FileGrid.applyHistoryBadges_.bind(null,entry,box))}if(entry.isDirectory){this.setGenericThumbnail_(box,entry);return}const thumbnailData=this.listThumbnailLoader_?this.listThumbnailLoader_.getThumbnailFromCache(entry):null;const mimeType=this.metadataModel_.getCache([entry],["contentMimeType"])[0].contentMimeType;if(thumbnailData&&thumbnailData.dataUrl){FileGrid.setThumbnailImage_(box,entry,thumbnailData.dataUrl,thumbnailData.width||0,thumbnailData.height||0,mimeType);li.classList.toggle("thumbnail-loaded",true)}else{this.setGenericThumbnail_(box,entry,mimeType);li.classList.toggle("thumbnail-loaded",false)}if(!util$3.isFilesNg()){li.classList.toggle("can-hide-filename",FileType.isImage(entry,mimeType)||FileType.isRaw(entry,mimeType))}}updateSharedStatus_(li,entry){if(!entry.isDirectory){return}const shared=!!this.metadataModel_.getCache([entry],["shared"])[0].shared;const box=li.querySelector(".img-container");if(box){box.classList.toggle("shared",shared)}const icon=li.querySelector(".detail-icon");if(icon){icon.classList.toggle("shared",shared)}}setImportStatusVisible(visible){this.importStatusVisible_=visible}onSplice_(){if(this.dataModel.getFileCount()===0&&this.dataModel.getFolderCount()===0){return}this.classList.toggle("image-dominant",this.dataModel.isImageDominant())}static setThumbnailImage_(box,entry,dataUrl,width,height,opt_mimeType){const thumbnail=box.ownerDocument.createElement("div");thumbnail.classList.add("thumbnail");box.classList.toggle("no-thumbnail",false);const type=FileType.getType(entry,opt_mimeType);if(type.type==="image"&&type.subtype==="JPEG"||width>FileGrid.GridSize||height>FileGrid.GridSize){thumbnail.style.backgroundSize="cover"}thumbnail.style.backgroundImage="url("+dataUrl+")";const oldThumbnails=box.querySelectorAll(".thumbnail");for(let i=0;i<oldThumbnails.length;i++){box.removeChild(oldThumbnails[i])}box.appendChild(thumbnail)}static clearThumbnailImage_(box){const oldThumbnails=box.querySelectorAll(".thumbnail");for(let i=0;i<oldThumbnails.length;i++){box.removeChild(oldThumbnails[i])}box.classList.toggle("no-thumbnail",true);return}setGenericThumbnail_(box,entry,opt_mimeType){if(entry.isDirectory){box.setAttribute("generic-thumbnail","folder")}else{if(!util$3.isFilesNg()){const mediaType=FileType.getMediaType(entry);box.setAttribute("generic-thumbnail",mediaType)}else{box.classList.toggle("no-thumbnail",true);const locationInfo=this.volumeManager_.getLocationInfo(entry);const icon=FileType.getIcon(entry,opt_mimeType,locationInfo.rootType);box.setAttribute("generic-thumbnail",icon)}}}static applyHistoryBadges_(entry,box,history){history.wasImported(entry,importer.Destination.GOOGLE_DRIVE).then((imported=>{if(imported){box.parentElement.classList.add("imported")}else{history.wasCopied(entry,importer.Destination.GOOGLE_DRIVE).then((copied=>{if(copied){box.parentElement.classList.add("copied")}}))}}))}hasDragHitElement(event){const pos=DragSelector.getScrolledPosition(this,event);return this.getHitElements(pos.x,pos.y).length!==0}shouldStartDragSelection(event){return!this.hasDragHitElement(event)}getHitRowIndex_(y,reverse){const folderRows=this.getFolderRowCount();const folderHeight=this.getFolderItemHeight_();const fileHeight=this.getFileItemHeight_();if(y<folderHeight*folderRows){const shift=reverse?-this.getItemMarginTop_():0;return Math.floor((y+shift)/folderHeight)}let yInFiles=y-folderHeight*folderRows;if(folderRows>0){yInFiles=Math.max(0,yInFiles-this.getSeparatorHeight_())}const shift=reverse?-this.getItemMarginTop_():0;return folderRows+Math.floor((yInFiles+shift)/fileHeight)}getHitColumnIndex_(x,reverse){const itemWidth=this.getItemWidth_();const shift=reverse?-this.getItemMarginLeft_():0;return Math.floor((x+shift)/itemWidth)}getHitElements(x,y,opt_width,opt_height){const currentSelection=[];const startXWithPadding=isRTL()?this.clientWidth-(x+opt_width):x;const startX=Math.max(0,startXWithPadding-this.paddingStart_);const endX=startX+(opt_width?opt_width-1:0);const top=Math.max(0,y-this.paddingTop_);const bottom=top+(opt_height?opt_height-1:0);const firstRow=this.getHitRowIndex_(top,false);const lastRow=this.getHitRowIndex_(bottom,true);const firstColumn=this.getHitColumnIndex_(startX,false);const lastColumn=this.getHitColumnIndex_(endX,true);for(let row=firstRow;row<=lastRow;row++){for(let col=firstColumn;col<=lastColumn;col++){const index=this.getItemIndex(row,col);if(0<=index&&index<this.dataModel.length){currentSelection.push(index)}}}return currentSelection}}FileGrid.GridSize=180;FileGrid.Item=class extends ListItem{constructor(){super();throw new Error("Use FileGrid.Item.decorate")}get label(){return this.querySelector("filename-label").textContent}set label(newLabel){}decorate(){super.decorate();this.setAttribute("role","option");const nameId=this.id+"-entry-name";this.querySelector(".entry-name").setAttribute("id",nameId);this.querySelector(".img-container").setAttribute("aria-labelledby",nameId);this.setAttribute("aria-labelledby",nameId)}};class FileGridSelectionController extends GridSelectionController{constructor(selectionModel,grid){super(selectionModel,grid);this.tapHandler_=new FileTapHandler}handlePointerDownUp(e,index){filelist.handlePointerDownUp.call(this,e,index)}handleTouchEvents(e,index){if(this.tapHandler_.handleTouchEvents(assert(e),index,filelist.handleTap.bind(this))){filelist.focusParentList(e)}}handleKeyDown(e){filelist.handleKeyDown.call(this,e)}get filesView(){return this.grid_}getIndexBelow(index){if(this.isAccessibilityEnabled()){return this.getIndexAfter(index)}if(index===this.getLastIndex()){return-1}const grid=this.grid_;const row=grid.getItemRow(index);const col=grid.getItemColumn(index);const nextIndex=grid.getItemIndex(row+1,col);if(nextIndex===-1){return row+1<grid.getFolderRowCount()?grid.dataModel.getFolderCount()-1:grid.dataModel.length-1}return nextIndex}getIndexAbove(index){if(this.isAccessibilityEnabled()){return this.getIndexBefore(index)}if(index===0){return-1}const grid=this.grid_;const row=grid.getItemRow(index);if(row-1<0){return 0}const col=grid.getItemColumn(index);const nextIndex=grid.getItemIndex(row-1,col);if(nextIndex===-1){return row-1<grid.getFolderRowCount()?grid.dataModel.getFolderCount()-1:grid.dataModel.length-1}return nextIndex}}// Copyright 2016 The Chromium Authors. All rights reserved.
class FileMetadataFormatter extends NativeEventTarget{constructor(){super();this.setDateTimeFormat(true);this.timeFormatter_;this.dateFormatter_}setDateTimeFormat(use12hourClock){this.timeFormatter_=new Intl.DateTimeFormat(navigator.language,{hour:"numeric",minute:"numeric",hour12:use12hourClock});this.dateFormatter_=new Intl.DateTimeFormat(navigator.language,{year:"numeric",month:"short",day:"numeric",hour:"numeric",minute:"numeric",hour12:use12hourClock});dispatchSimpleEvent(this,"date-time-format-changed")}formatModDate(modTime){if(!modTime){return"..."}const today=new Date;today.setHours(0);today.setMinutes(0);today.setSeconds(0);today.setMilliseconds(0);const MILLISECONDS_IN_DAY=24*60*60*1e3;if(isNaN(modTime.getTime())){return"--"}else if(modTime>=today&&modTime<today.getTime()+MILLISECONDS_IN_DAY){return strf("TIME_TODAY",this.timeFormatter_.format(modTime))}else if(modTime>=today-MILLISECONDS_IN_DAY&&modTime<today){return strf("TIME_YESTERDAY",this.timeFormatter_.format(modTime))}else{return this.dateFormatter_.format(modTime)}}formatSize(size,hosted,addPrecision=false){if(size===null||size===undefined){return"..."}else if(size===-1){return"--"}else if(size===0&&hosted){return"--"}else{return util$3.bytesToString(size,addPrecision?1:0)}}}// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class FileTableColumnModel extends TableColumnModel{constructor(tableColumns){super(tableColumns);this.snapshot_=null}applyColumnPositions_(newPos){for(let i=0;i<newPos.length-2;i++){if(!this.columns_[i].visible){newPos[i+1]=newPos[i]}else if(newPos[i+1]-newPos[i]<FileTableColumnModel.MIN_WIDTH_){newPos[i+1]=newPos[i]+FileTableColumnModel.MIN_WIDTH_}}for(let i=newPos.length-1;i>=2;i--){if(!this.columns_[i-1].visible){newPos[i-1]=newPos[i]}else if(newPos[i]-newPos[i-1]<FileTableColumnModel.MIN_WIDTH_){newPos[i-1]=newPos[i]-FileTableColumnModel.MIN_WIDTH_}}for(let i=0;i<this.columns_.length;i++){if(!this.columns_[i].visible){this.columns_[i].width=0}else{this.columns_[i].width=Math.max(FileTableColumnModel.MIN_WIDTH_,newPos[i+1]-newPos[i])}}}normalizeWidths(contentWidth){let totalWidth=0;for(let i=0;i<this.columns_.length;i++){totalWidth+=this.columns_[i].width}const positions=[0];let sum=0;for(let i=0;i<this.columns_.length;i++){const column=this.columns_[i];sum+=column.width;positions[i+1]=~~(contentWidth*sum/totalWidth)}this.applyColumnPositions_(positions)}handleSplitterDragStart(){this.initializeColumnPos()}handleSplitterDragEnd(){this.destroyColumnPos()}initializeColumnPos(){this.snapshot_=new FileTableColumnModel.ColumnSnapshot(this.columns_)}destroyColumnPos(){this.snapshot_=null}setWidthAndKeepTotal(columnIndex,columnWidth){columnWidth=Math.max(columnWidth,FileTableColumnModel.MIN_WIDTH_);this.snapshot_.setWidth(columnIndex,columnWidth);this.applyColumnPositions_(this.snapshot_.newPos);dispatchSimpleEvent(this,"resize")}getHitColumn(x){let i=0;for(;x>=this.columns_[i].width;i++){x-=this.columns_[i].width}if(i>=this.columns_.length){return null}return{index:i,hitPosition:x,width:this.columns_[i].width}}setVisible(index,visible){if(index<0||index>this.columns_.length-1){return}const column=this.columns_[index];if(column.visible===visible){return}const snapshot=new FileTableColumnModel.ColumnSnapshot(this.columns_);column.visible=visible;snapshot.setWidth(index,column.width);this.applyColumnPositions_(snapshot.newPos)}exportColumnConfig(){const snapshot=new FileTableColumnModel.ColumnSnapshot(this.columns_);for(let i=0;i<this.columns_.length;i++){if(!this.columns_[i].visible){snapshot.setWidth(i,this.columns_[i].absoluteWidth)}}const config={};for(let i=0;i<this.columns_.length;i++){config[this.columns_[i].id]={width:snapshot.newPos[i+1]-snapshot.newPos[i]}}return config}restoreColumnConfig(config){if(Array.isArray(config)){const tmpConfig={};tmpConfig[this.columns_[0].id]=config[0];tmpConfig[this.columns_[1].id]=config[1];tmpConfig[this.columns_[3].id]=config[2];tmpConfig[this.columns_[4].id]=config[3];config=tmpConfig}const visibility=[];for(let i=0;i<this.columns_.length;i++){visibility[i]=this.columns_[i].visible;this.columns_[i].visible=true}for(const columnId in config){const column=this.columns_[this.indexOf(columnId)];if(column){const width=~~config[columnId].width;if(width>0){column.width=width}}}for(let i=0;i<this.columns_.length;i++){this.setVisible(i,visibility[i])}}}function renderHeader_(table){const column=this;const container=table.ownerDocument.createElement("div");container.classList.add("table-label-container");const textElement=table.ownerDocument.createElement("span");textElement.textContent=column.name;const dm=table.dataModel;let sortOrder=column.defaultOrder;let isSorted=false;if(dm&&dm.sortStatus.field===column.id){isSorted=true;sortOrder=dm.sortStatus.direction==="desc"?"asc":"desc";if(!util$3.isFilesNg()){textElement.classList.toggle("table-header-sort-image-desc",dm.sortStatus.direction==="desc");textElement.classList.toggle("table-header-sort-image-asc",dm.sortStatus.direction!=="desc")}}textElement.setAttribute("aria-describedby","sort-column-"+sortOrder);textElement.setAttribute("role","button");container.appendChild(textElement);if(util$3.isFilesNg()){const icon=document.createElement("cr-icon-button");const iconName=sortOrder==="desc"?"up":"down";icon.setAttribute("iron-icon",`files16:arrow_${iconName}_small`);icon.setAttribute("tabindex","-1");icon.setAttribute("aria-hidden","true");icon.classList.add("sort-icon","no-overlap");container.classList.toggle("not-sorted",!isSorted);container.classList.toggle("sorted",isSorted);container.appendChild(icon)}return container}FileTableColumnModel.MIN_WIDTH_=40;FileTableColumnModel.ColumnSnapshot=class{constructor(columns){this.columnPos_=[0];for(let i=0;i<columns.length;i++){this.columnPos_[i+1]=columns[i].width+this.columnPos_[i]}this.newPos=this.columnPos_.slice(0)}setWidth(index,width){if(index<0||index>=this.columnPos_.length-1||!this.columnPos_){return}const currentWidth=this.columnPos_[index+1]-this.columnPos_[index];const round=width<currentWidth?Math.ceil:Math.floor;const newPosStart=this.columnPos_[index]+width;const posEnd=this.columnPos_[this.columnPos_.length-1];for(let i=0;i<index+1;i++){this.newPos[i]=this.columnPos_[i]}for(let i=index+1;i<this.columnPos_.length-1;i++){const posStart=this.columnPos_[index+1];this.newPos[i]=(posEnd-newPosStart)*(this.columnPos_[i]-posStart)/(posEnd-posStart)+newPosStart;this.newPos[i]=round(this.newPos[i])}this.newPos[index]=this.columnPos_[index];this.newPos[this.columnPos_.length-1]=posEnd}};class FileTable extends Table{constructor(){super();this.beginIndex_=0;this.endIndex_=0;this.listThumbnailLoader_=null;this.relayoutRateLimiter_=null;this.metadataModel_=null;this.formatter_=null;this.useModificationByMeTime_=false;this.historyLoader_=null;this.importStatusVisible_=false;this.volumeManager_=null;this.lastSelection_=[];this.onThumbnailLoadedBound_=null;this.a11y=null;throw new Error("Designed to decorate elements")}static decorate(self,metadataModel,volumeManager,historyLoader,a11y,fullPage){Table.decorate(self);self.__proto__=FileTable.prototype;FileTableList.decorate(self.list);self.list.setOnMergeItems(self.updateHighPriorityRange_.bind(self));self.metadataModel_=metadataModel;self.volumeManager_=volumeManager;self.historyLoader_=historyLoader;self.a11y=a11y;const endSpacer=self.querySelector(".spacer:last-child");if(endSpacer){endSpacer.classList.add("signals-overscroll")}self.listThumbnailLoader_=null;self.beginIndex_=0;self.endIndex_=0;self.onThumbnailLoadedBound_=self.onThumbnailLoaded_.bind(self);self.importStatusVisible_=true;self.useModificationByMeTime_=false;const nameColumn=new TableColumn("name",str("NAME_COLUMN_LABEL"),fullPage?386:324);nameColumn.renderFunction=self.renderName_.bind(self);nameColumn.headerRenderFunction=renderHeader_;const sizeColumn=new TableColumn("size",str("SIZE_COLUMN_LABEL"),110,true);sizeColumn.renderFunction=self.renderSize_.bind(self);sizeColumn.defaultOrder="desc";sizeColumn.headerRenderFunction=renderHeader_;const statusColumn=new TableColumn("status",str("STATUS_COLUMN_LABEL"),60,true);statusColumn.renderFunction=self.renderStatus_.bind(self);statusColumn.visible=self.importStatusVisible_;statusColumn.headerRenderFunction=renderHeader_;const typeColumn=new TableColumn("type",str("TYPE_COLUMN_LABEL"),fullPage?110:110);typeColumn.renderFunction=self.renderType_.bind(self);typeColumn.headerRenderFunction=renderHeader_;const modTimeColumn=new TableColumn("modificationTime",str("DATE_COLUMN_LABEL"),fullPage?150:210);modTimeColumn.renderFunction=self.renderDate_.bind(self);modTimeColumn.defaultOrder="desc";modTimeColumn.headerRenderFunction=renderHeader_;const columns=[nameColumn,sizeColumn,statusColumn,typeColumn,modTimeColumn];const columnModel=new FileTableColumnModel(columns);self.columnModel=columnModel;self.formatter_=new FileMetadataFormatter;const selfAsTable=self;selfAsTable.setRenderFunction(self.renderTableRow_.bind(self,selfAsTable.getRenderFunction()));selfAsTable.header.addEventListener("mousedown",(e=>{self.list.focus();e.preventDefault()}));self.relayoutRateLimiter_=new AsyncUtil.RateLimiter(self.relayoutImmediately_.bind(self));self.list.addEventListener("mousedown",function(e){this.lastSelection_=this.selectionModel.selectedIndexes}.bind(self),true);self.list.addEventListener("touchstart",function(e){this.lastSelection_=this.selectionModel.selectedIndexes}.bind(self),true);self.list.shouldStartDragSelection=self.shouldStartDragSelection_.bind(self);self.list.hasDragHitElement=self.hasDragHitElement_.bind(self);self.list.getHitElements=function(x,y,opt_width,opt_height){const currentSelection=[];const bottom=y+(opt_height||0);for(let i=0;i<this.selectionModel_.length;i++){const itemMetrics=this.getHeightsForIndex(i);if(itemMetrics.top<bottom&&itemMetrics.top+itemMetrics.height>=y){currentSelection.push(i)}}return currentSelection}}sort(index){const cm=this.columnModel;if(!this.dataModel){return}const fieldName=cm.getId(index);const sortStatus=this.dataModel.sortStatus;let sortDirection=cm.getDefaultOrder(index);if(sortStatus.field===fieldName){sortDirection=sortStatus.direction==="desc"?"asc":"desc"}const msgId=sortDirection==="asc"?"COLUMN_SORTED_ASC":"COLUMN_SORTED_DESC";const msg=strf(msgId,fieldName);super.sort(index);this.a11y.speakA11yMessage(msg)}updateHighPriorityRange_(beginIndex,endIndex){this.beginIndex_=beginIndex;this.endIndex_=endIndex;if(this.listThumbnailLoader_!==null){this.listThumbnailLoader_.setHighPriorityRange(beginIndex,endIndex)}}setListThumbnailLoader(listThumbnailLoader){if(this.listThumbnailLoader_){this.listThumbnailLoader_.removeEventListener("thumbnailLoaded",this.onThumbnailLoadedBound_)}this.listThumbnailLoader_=listThumbnailLoader;if(this.listThumbnailLoader_){this.listThumbnailLoader_.addEventListener("thumbnailLoaded",this.onThumbnailLoadedBound_);this.listThumbnailLoader_.setHighPriorityRange(this.beginIndex_,this.endIndex_)}}getThumbnail(index){const listItem=this.getListItemByIndex(index);if(!listItem){return null}const container=listItem.querySelector(".detail-thumbnail");if(!container){return null}return container.querySelector(".thumbnail")}onThumbnailLoaded_(event){const listItem=this.getListItemByIndex(event.index);if(listItem){const box=listItem.querySelector(".detail-thumbnail");if(box){if(event.dataUrl){this.setThumbnailImage_(assertInstanceof(box,HTMLDivElement),event.dataUrl)}else{this.clearThumbnailImage_(assertInstanceof(box,HTMLDivElement))}}}}fitColumn(index){const render=this.columnModel.getRenderFunction(index);const MAXIMUM_ROWS_TO_MEASURE=1e3;const container=this.ownerDocument.createElement("li");container.style.display="inline-block";container.style.textAlign="start";container.style.webkitBoxOrient="vertical";const items=this.list.getItemsInViewPort(this.list.scrollTop,this.list.clientHeight);const firstIndex=Math.floor(Math.max(0,(items.last+items.first-MAXIMUM_ROWS_TO_MEASURE)/2));const lastIndex=Math.min(this.dataModel.length,firstIndex+MAXIMUM_ROWS_TO_MEASURE);for(let i=firstIndex;i<lastIndex;i++){const item=this.dataModel.item(i);const div=this.ownerDocument.createElement("div");div.className="table-row-cell";div.appendChild(render(item,this.columnModel.getId(index),this));container.appendChild(div)}this.list.appendChild(container);const width=parseFloat(window.getComputedStyle(container).width);this.list.removeChild(container);this.columnModel.initializeColumnPos();this.columnModel.setWidthAndKeepTotal(index,Math.ceil(width));this.columnModel.destroyColumnPos()}setImportStatusVisible(visible){if(this.importStatusVisible_!=visible){this.importStatusVisible_=visible;this.columnModel.setVisible(this.columnModel.indexOf("status"),visible);this.relayout()}}setDateTimeFormat(use12hourClock){this.formatter_.setDateTimeFormat(use12hourClock)}setUseModificationByMeTime(useModificationByMeTime){this.useModificationByMeTime_=useModificationByMeTime}hasDragHitElement_(event){const pos=DragSelector.getScrolledPosition(this.list,event);return this.list.getHitElements(pos.x,pos.y).length!==0}shouldStartDragSelection_(event){if(event.shiftKey){return true}if(!this.list.hasDragHitElement(event)){return true}const pos=DragSelector.getScrolledPosition(this.list,event);if(!pos){return false}if(pos.x<0||pos.y<0){return true}const itemHeight=this.list.measureItem().height;const itemIndex=~~(pos.y/itemHeight);if(itemIndex>=this.list.dataModel.length){return true}if(this.lastSelection_&&this.lastSelection_.indexOf(itemIndex)!==-1){return false}const hitColumn=this.columnModel.getHitColumn(pos.x);if(!hitColumn){return true}switch(this.columnModel.columns_[hitColumn.index].id){case"name":const item=this.list.getListItemByIndex(itemIndex);if(!item){return false}const spanElement=item.querySelector(".filename-label span");const spanRect=spanElement.getBoundingClientRect();if(!this.list.cachedBounds){return true}const textRight=spanRect.left-this.list.cachedBounds.left+spanRect.width;return textRight<=hitColumn.hitPosition;default:return true}}renderName_(entry,columnId,table){const label=this.ownerDocument.createElement("div");const mimeType=this.metadataModel_.getCache([entry],["contentMimeType"])[0].contentMimeType;const locationInfo=this.volumeManager_.getLocationInfo(entry);const icon=filelist.renderFileTypeIcon(this.ownerDocument,entry,locationInfo,mimeType);if(FileType.isImage(entry,mimeType)||FileType.isVideo(entry,mimeType)||FileType.isAudio(entry,mimeType)||FileType.isRaw(entry,mimeType)){icon.appendChild(this.renderThumbnail_(entry))}icon.appendChild(this.renderCheckmark_());label.appendChild(icon);label.entry=entry;label.className="detail-name";label.appendChild(filelist.renderFileNameLabel(this.ownerDocument,entry,locationInfo));if(locationInfo.isDriveBased){label.appendChild(filelist.renderPinned(this.ownerDocument))}return label}getItemLabel(index){if(index===-1){return""}const entry=this.dataModel.item(index);if(!entry){return""}const locationInfo=this.volumeManager_.getLocationInfo(entry);return util$3.getEntryLabel(locationInfo,entry)}renderSize_(entry,columnId,table){const div=this.ownerDocument.createElement("div");div.className="size";this.updateSize_(div,entry);return div}updateSize_(div,entry){const metadata=this.metadataModel_.getCache([entry],["size","hosted"])[0];const size=metadata.size;const hosted=metadata.hosted;div.textContent=this.formatter_.formatSize(size,hosted)}renderStatus_(entry,columnId,table){const div=this.ownerDocument.createElement("div");div.className="status status-icon";if(entry){this.updateStatus_(div,entry)}return div}getImportStatus_(entry,destination){if(!this.importStatusVisible_||!importer.isEligibleType(entry)){return Promise.resolve("unknown")}const fileEntry=entry;return this.historyLoader_.getHistory().then((history=>Promise.all([history.wasImported(fileEntry,destination),history.wasCopied(fileEntry,destination)]))).then((status=>{if(status[0]){return"imported"}else if(status[1]){return"copied"}else{return"unknown"}}))}updateStatus_(div,entry){this.getImportStatus_(entry,importer.Destination.GOOGLE_DRIVE).then((status=>{div.setAttribute("file-status-icon",status)}))}renderType_(entry,columnId,table){const div=this.ownerDocument.createElement("div");div.className="type";const mimeType=this.metadataModel_.getCache([entry],["contentMimeType"])[0].contentMimeType;div.textContent=FileListModel.getFileTypeString(FileType.getType(entry,mimeType));return div}renderDate_(entry,columnId,table){const div=this.ownerDocument.createElement("div");div.className="date";this.updateDate_(div,entry);return div}updateDate_(div,entry){const item=this.metadataModel_.getCache([entry],["modificationTime","modificationByMeTime"])[0];const modTime=this.useModificationByMeTime_?item.modificationByMeTime||item.modificationTime||null:item.modificationTime||null;div.textContent=this.formatter_.formatModDate(modTime)}updateFileMetadata(item,entry){this.updateDate_(item.querySelector(".date"),entry);this.updateSize_(item.querySelector(".size"),entry);this.updateStatus_(item.querySelector(".status"),entry)}updateListItemsMetadata(type,entries){const urls=util$3.entriesToURLs(entries);const forEachCell=(selector,callback)=>{const cells=this.querySelectorAll(selector);for(let i=0;i<cells.length;i++){const cell=cells[i];const listItem=this.list_.getListItemAncestor(cell);const entry=this.dataModel.item(listItem.listIndex);if(entry&&urls.indexOf(entry.toURL())!==-1){callback.call(this,cell,entry,listItem)}}};if(type==="filesystem"){forEachCell(".table-row-cell > .date",(function(item,entry,unused){this.updateDate_(item,entry)}));forEachCell(".table-row-cell > .size",(function(item,entry,unused){this.updateSize_(item,entry)}))}else if(type==="external"){forEachCell(".table-row-cell > .date",(function(item,entry,listItem){filelist.updateListItemExternalProps(listItem,this.metadataModel_.getCache([entry],["availableOffline","customIconUrl","shared","isMachineRoot","isExternalMedia","hosted","pinned"])[0],util$3.isTeamDriveRoot(entry))}))}else if(type==="import-history"){forEachCell(".table-row-cell > .status",(function(item,entry,unused){this.updateStatus_(item,entry)}))}}renderTableRow_(baseRenderFunction,entry){const item=baseRenderFunction(entry,this);const nameId=item.id+"-entry-name";const sizeId=item.id+"-size";const dateId=item.id+"-date";filelist.decorateListItem(item,entry,assert(this.metadataModel_));item.setAttribute("file-name",entry.name);item.querySelector(".detail-name").setAttribute("id",nameId);item.querySelector(".size").setAttribute("id",sizeId);item.querySelector(".date").setAttribute("id",dateId);item.setAttribute("aria-labelledby",nameId);return item}renderThumbnail_(entry){const box=this.ownerDocument.createElement("div");box.className="detail-thumbnail";const thumbnailData=this.listThumbnailLoader_?this.listThumbnailLoader_.getThumbnailFromCache(entry):null;if(thumbnailData&&thumbnailData.dataUrl){this.setThumbnailImage_(box,thumbnailData.dataUrl)}return box}setThumbnailImage_(box,dataUrl){const thumbnail=box.ownerDocument.createElement("div");thumbnail.classList.add("thumbnail");thumbnail.style.backgroundImage="url("+dataUrl+")";const oldThumbnails=box.querySelectorAll(".thumbnail");for(let i=0;i<oldThumbnails.length;i++){box.removeChild(oldThumbnails[i])}box.appendChild(thumbnail)}clearThumbnailImage_(box){const oldThumbnails=box.querySelectorAll(".thumbnail");for(let i=0;i<oldThumbnails.length;i++){box.removeChild(oldThumbnails[i])}}renderCheckmark_(){const checkmark=this.ownerDocument.createElement("div");checkmark.className="detail-checkmark";return checkmark}relayout(){this.relayoutRateLimiter_.run()}relayoutImmediately_(){if(this.clientWidth>0){this.normalizeColumns()}this.redraw();dispatchSimpleEvent(this.list,"relayout")}}FileTable.prototype.__proto__=Table.prototype;// Copyright 2020 The Chromium Authors. All rights reserved.
class HoldingSpaceUtil{static get TIME_OF_FIRST_PIN_KEY_(){return"holdingSpaceTimeOfFirstPin"}static get TIME_OF_FIRST_WELCOME_BANNER_SHOW_KEY_(){return"holdingSpaceTimeOfFirstWelcomeBannerShow"}static isFeatureEnabled(){return loadTimeData.valueExists("HOLDING_SPACE_ENABLED")&&loadTimeData.getBoolean("HOLDING_SPACE_ENABLED")}static getAllowedVolumeTypes(){return[VolumeManagerCommon$3.VolumeType.ANDROID_FILES,VolumeManagerCommon$3.VolumeType.CROSTINI,VolumeManagerCommon$3.VolumeType.DRIVE,VolumeManagerCommon$3.VolumeType.DOWNLOADS,VolumeManagerCommon$3.VolumeType.MY_FILES]}static getTimeOfFirstPin_(){return new Promise((resolve=>{const key=HoldingSpaceUtil.TIME_OF_FIRST_PIN_KEY_;chrome.storage.local.get(key,(values=>{resolve(values[key])}))}))}static getTimeOfFirstWelcomeBannerShow_(){return new Promise((resolve=>{const key=HoldingSpaceUtil.TIME_OF_FIRST_WELCOME_BANNER_SHOW_KEY_;chrome.storage.local.get(key,(values=>{resolve(values[key])}))}))}static async maybeStoreTimeOfFirstPin(){const now=Date.now();if(await HoldingSpaceUtil.getTimeOfFirstPin_()){return}const values={};values[HoldingSpaceUtil.TIME_OF_FIRST_PIN_KEY_]=now;chrome.storage.local.set(values);const timeOfFirstWelcomeBannerShow=await HoldingSpaceUtil.getTimeOfFirstWelcomeBannerShow_()||now;const timeFromFirstWelcomeBannerShowToFirstPin=now-timeOfFirstWelcomeBannerShow;const oneSecondInMillis=1e3;const oneDayInMillis=24*60*60*1e3;metrics.recordValue("HoldingSpace.TimeFromFirstWelcomeBannerShowToFirstPin","histogram-log",oneSecondInMillis,oneDayInMillis,50,timeFromFirstWelcomeBannerShowToFirstPin)}static async maybeStoreTimeOfFirstWelcomeBannerShow(){const now=Date.now();if(await HoldingSpaceUtil.getTimeOfFirstWelcomeBannerShow_()){return}const values={};values[HoldingSpaceUtil.TIME_OF_FIRST_WELCOME_BANNER_SHOW_KEY_]=now;chrome.storage.local.set(values)}}// Copyright (c) 2012 The Chromium Authors. All rights reserved.
const WELCOME_HEADER_COUNTER_KEY="driveWelcomeHeaderCounter";const DRIVE_WARNING_DISMISSED_KEY="driveSpaceWarningDismissed";const DOWNLOADS_WARNING_DISMISSED_KEY="downloadsSpaceWarningDismissed";const HOLDING_SPACE_WELCOME_BANNER_COUNTER_KEY="holdingSpaceWelcomeBannerCounter";const OFFLINE_INFO_BANNER_COUNTER_KEY="driveOfflineInfoBannerCounter";const HOLDING_SPACE_WELCOME_BANNER_COUNTER_LIMIT=3;const WELCOME_HEADER_COUNTER_LIMIT=25;const DRIVE_SPACE_WARNING_THRESHOLD_RATIO=.1;const DOWNLOADS_SPACE_WARNING_THRESHOLD_SIZE=1*1024*1024*1024;const DOWNLOADS_SPACE_WARNING_DISMISS_DURATION=36*60*60*1e3;const OFFLINE_INFO_BANNER_COUNTER_LIMIT=3;class Banners extends NativeEventTarget{constructor(directoryModel,volumeManager,document,showWelcome){super();this.directoryModel_=directoryModel;this.volumeManager_=volumeManager;this.document_=assert(document);this.showWelcome_=showWelcome;this.previousDirWasOnDrive_=false;this.privateOnDirectoryChangedBound_=this.privateOnDirectoryChanged_.bind(this);const handler=()=>{this.maybeShowDriveBanners_();this.maybeShowHoldingSpaceWelcomeBanner_()};this.directoryModel_.addEventListener("scan-completed",handler);this.directoryModel_.addEventListener("rescan-completed",handler);this.directoryModel_.addEventListener("directory-changed",this.onDirectoryChanged_.bind(this));this.unmountedPanel_=this.document_.querySelector("#unmounted-panel");this.volumeManager_.volumeInfoList.addEventListener("splice",this.onVolumeInfoListSplice_.bind(this));this.volumeManager_.addEventListener("drive-connection-changed",this.onDriveConnectionChanged_.bind(this));chrome.storage.onChanged.addListener(this.onStorageChange_.bind(this));this.holdingSpaceWelcomeBannerCounter_=HOLDING_SPACE_WELCOME_BANNER_COUNTER_LIMIT;this.welcomeHeaderCounter_=WELCOME_HEADER_COUNTER_LIMIT;this.warningDismissedCounter_=0;this.downloadsWarningDismissedTime_=0;this.offlineInfoBannerCounter_=0;this.hasShownOfflineInfoBanner_=false;this.ready_=new Promise(((resolve,reject)=>{chrome.storage.local.get([HOLDING_SPACE_WELCOME_BANNER_COUNTER_KEY,WELCOME_HEADER_COUNTER_KEY,DRIVE_WARNING_DISMISSED_KEY,DOWNLOADS_WARNING_DISMISSED_KEY,OFFLINE_INFO_BANNER_COUNTER_KEY],(values=>{if(chrome.runtime.lastError){reject("Failed to load banner data from chrome.storage: "+chrome.runtime.lastError.message);return}this.holdingSpaceWelcomeBannerCounter_=parseInt(values[HOLDING_SPACE_WELCOME_BANNER_COUNTER_KEY],10)||0;this.welcomeHeaderCounter_=parseInt(values[WELCOME_HEADER_COUNTER_KEY],10)||0;this.warningDismissedCounter_=parseInt(values[DRIVE_WARNING_DISMISSED_KEY],10)||0;this.downloadsWarningDismissedTime_=parseInt(values[DOWNLOADS_WARNING_DISMISSED_KEY],10)||0;this.offlineInfoBannerCounter_=parseInt(values[OFFLINE_INFO_BANNER_COUNTER_KEY],10)||0;if(chrome.test){this.holdingSpaceWelcomeBannerCounter_=0;this.welcomeHeaderCounter_=0;this.warningDismissedCounter_=0;this.offlineInfoBannerCounter_=0}resolve()}))}));this.authFailedBanner_=this.document_.querySelector("#drive-auth-failed-warning");const authFailedText=this.authFailedBanner_.querySelector(".drive-text");authFailedText.innerHTML=util$3.htmlUnescape(str("DRIVE_NOT_REACHED"));authFailedText.querySelector("a").addEventListener("click",(e=>{chrome.fileManagerPrivate.logoutUserForReauthentication();e.preventDefault()}));this.maybeShowAuthFailBanner_();this.offlineInfoBanner_=queryRequiredElement("#offline-info-banner");util$3.setClampLine(queryRequiredElement(".body2-primary",this.offlineInfoBanner_),"2");queryRequiredElement("#offline-learn-more").addEventListener("click",(e=>{util$3.visitURL(str("GOOGLE_DRIVE_OFFLINE_HELP_URL"));this.setOfflineInfoBannerCounter_(OFFLINE_INFO_BANNER_COUNTER_LIMIT);this.offlineInfoBanner_.hidden=true;this.hasShownOfflineInfoBanner_=false;e.preventDefault()}));this.holdingSpaceWelcomeBanner_=queryRequiredElement(".holding-space-welcome",this.document_)}setHoldingSpaceWelcomeBannerCounter_(value){const values={};values[HOLDING_SPACE_WELCOME_BANNER_COUNTER_KEY]=value;chrome.storage.local.set(values)}setWelcomeHeaderCounter_(value){const values={};values[WELCOME_HEADER_COUNTER_KEY]=value;chrome.storage.local.set(values)}setWarningDismissedCounter_(value){const values={};values[DRIVE_WARNING_DISMISSED_KEY]=value;chrome.storage.local.set(values)}setOfflineInfoBannerCounter_(value){const values={};values[OFFLINE_INFO_BANNER_COUNTER_KEY]=value;chrome.storage.local.set(values)}onStorageChange_(changes,areaName){if(areaName=="local"&&HOLDING_SPACE_WELCOME_BANNER_COUNTER_KEY in changes){this.holdingSpaceWelcomeBannerCounter_=changes[HOLDING_SPACE_WELCOME_BANNER_COUNTER_KEY].newValue}if(areaName=="local"&&WELCOME_HEADER_COUNTER_KEY in changes){this.welcomeHeaderCounter_=changes[WELCOME_HEADER_COUNTER_KEY].newValue}if(areaName=="local"&&DRIVE_WARNING_DISMISSED_KEY in changes){this.warningDismissedCounter_=changes[DRIVE_WARNING_DISMISSED_KEY].newValue}if(areaName=="local"&&DOWNLOADS_WARNING_DISMISSED_KEY in changes){this.downloadsWarningDismissedTime_=changes[DOWNLOADS_WARNING_DISMISSED_KEY].newValue}if(areaName=="local"&&OFFLINE_INFO_BANNER_COUNTER_KEY in changes){this.offlineInfoBannerCounter_=changes[OFFLINE_INFO_BANNER_COUNTER_KEY].newValue}}onDriveConnectionChanged_(){this.maybeShowAuthFailBanner_()}prepareAndShowHoldingSpaceWelcomeBanner_(){assert(HoldingSpaceUtil.isFeatureEnabled());this.showHoldingSpaceWelcomeBanner_(true);if(this.holdingSpaceWelcomeBanner_.firstElementChild){return}if(!this.document_.head.querySelector("link[holding-space-welcome-style]")){const style=this.document_.createElement("link");style.rel="stylesheet";style.href=constants.HOLDING_SPACE_WELCOME_CSS;style.setAttribute("holding-space-welcome-style","");this.document_.head.appendChild(style);style.onload=()=>{this.holdingSpaceWelcomeBanner_.removeAttribute("style")}}const wrapper=util$3.createChild(this.holdingSpaceWelcomeBanner_,"holding-space-welcome-wrapper");util$3.createChild(wrapper,"holding-space-welcome-icon");const message=util$3.createChild(wrapper,"holding-space-welcome-message");util$3.setClampLine(message,"2");const title=util$3.createChild(message,"holding-space-welcome-title headline2");title.textContent=str("HOLDING_SPACE_WELCOME_TITLE");const body=util$3.createChild(message,"body2-primary");const text=util$3.createChild(body,"holding-space-welcome-text");const textInTabletMode=util$3.createChild(body,"holding-space-welcome-text tablet-mode-enabled");text.textContent=str("HOLDING_SPACE_WELCOME_TEXT");textInTabletMode.innerHTML=strf("HOLDING_SPACE_WELCOME_TEXT_IN_TABLET_MODE",'<span class="icon">&nbsp;</span>');const buttonGroup=util$3.createChild(wrapper,"button-group","div");const dismiss=util$3.createChild(buttonGroup,"text-button","cr-button");dismiss.setAttribute("aria-label",str("HOLDING_SPACE_WELCOME_DISMISS"));dismiss.textContent=str("HOLDING_SPACE_WELCOME_DISMISS");dismiss.tabIndex=0;dismiss.addEventListener("click",this.closeHoldingSpaceWelcomeBanner_.bind(this))}prepareAndShowWelcomeBanner_(type,messageId){if(!this.showWelcome_){return}this.showWelcomeBanner_(type);const container=queryRequiredElement(".drive-welcome."+type,this.document_);if(container.firstElementChild){return}if(!this.document_.querySelector("link[drive-welcome-style]")){const style=this.document_.createElement("link");style.rel="stylesheet";style.href=constants.DRIVE_WELCOME_CSS;style.setAttribute("drive-welcome-style","");this.document_.head.appendChild(style)}const wrapper=util$3.createChild(container,"drive-welcome-wrapper");util$3.createChild(wrapper,"drive-welcome-icon");let close,links;if(util$3.isFilesNg()){const message=util$3.createChild(wrapper,"drive-welcome-message");util$3.setClampLine(message,"2");const title=util$3.createChild(message,"drive-welcome-title headline2");title.textContent=str("DRIVE_WELCOME_TITLE");const body=util$3.createChild(message,"body2-primary");const text=util$3.createChild(body,"drive-welcome-text");text.innerHTML=str(messageId);links=util$3.createChild(body,"drive-welcome-links");this.hideOverflowedElement(links,body);const buttonGroup=util$3.createChild(wrapper,"button-group","div");close=util$3.createChild(buttonGroup,"banner-close text-button","cr-button");close.innerHTML=str("DRIVE_WELCOME_DISMISS")}else{close=util$3.createChild(wrapper,"banner-close","button");const message=util$3.createChild(wrapper,"drive-welcome-message");const title=util$3.createChild(message,"drive-welcome-title");title.textContent=str("DRIVE_WELCOME_TITLE");const text=util$3.createChild(message,"drive-welcome-text");text.innerHTML=str(messageId);links=util$3.createChild(message,"drive-welcome-links")}close.setAttribute("aria-label",str("DRIVE_WELCOME_DISMISS"));close.id="welcome-dismiss";close.tabIndex=0;close.addEventListener("click",this.closeWelcomeBanner_.bind(this));const more=util$3.createChild(links,"plain-link","a");more.textContent=str("DRIVE_LEARN_MORE");more.href=str("GOOGLE_DRIVE_OVERVIEW_URL");more.tabIndex=0;more.id="drive-welcome-link";more.rel="opener";more.target="_blank";this.previousDirWasOnDrive_=false}showLowDriveSpaceWarning_(show,opt_sizeStats){const box=this.document_.querySelector("#volume-space-warning");if(show){this.cleanupWelcomeBanner_()}if(box.hidden==!show){return}if(this.warningDismissedCounter_){if(opt_sizeStats&&this.warningDismissedCounter_==opt_sizeStats.totalSize&&opt_sizeStats.remainingSize/opt_sizeStats.totalSize<.15){show=false}else{this.setWarningDismissedCounter_(0)}}box.textContent="";if(show&&opt_sizeStats){if(util$3.isFilesNg()){const icon=this.document_.createElement("div");icon.className="drive-icon";box.appendChild(icon);const text=this.document_.createElement("div");text.className="body2-primary";text.textContent=strf("DRIVE_SPACE_AVAILABLE_LONG",util$3.bytesToString(opt_sizeStats.remainingSize));util$3.setClampLine(text,"2");box.appendChild(text);const buttonGroup=this.document_.createElement("div");buttonGroup.className="button-group";box.appendChild(buttonGroup);const close=this.document_.createElement("cr-button");close.setAttribute("aria-label",str("DRIVE_WELCOME_DISMISS"));close.id="drive-space-warning-dismiss";close.innerHTML=str("DRIVE_WELCOME_DISMISS");close.className="banner-close text-button";buttonGroup.appendChild(close);const link=this.document_.createElement("a");link.href=str("GOOGLE_DRIVE_BUY_STORAGE_URL");link.rel="opener";link.target="_blank";const buyMore=this.document_.createElement("cr-button");buyMore.className="banner-button text-button";buyMore.textContent=str("DRIVE_BUY_MORE_SPACE_LINK");link.appendChild(buyMore);buttonGroup.appendChild(link);const totalSize=opt_sizeStats.totalSize;close.addEventListener("click",(()=>{const values={};values[DRIVE_WARNING_DISMISSED_KEY]=totalSize;chrome.storage.local.set(values);box.hidden=true;this.requestRelayout_(100)}))}else{const icon=this.document_.createElement("div");icon.className="drive-icon";box.appendChild(icon);const text=this.document_.createElement("div");text.className="drive-text";text.textContent=strf("DRIVE_SPACE_AVAILABLE_LONG",util$3.bytesToString(opt_sizeStats.remainingSize));box.appendChild(text);const link=this.document_.createElement("a");link.href=str("GOOGLE_DRIVE_BUY_STORAGE_URL");link.rel="opener";link.target="_blank";const button=this.document_.createElement("button");button.className="imitate-paper-button";button.textContent=str("DRIVE_BUY_MORE_SPACE_LINK");link.appendChild(button);box.appendChild(link);const close=this.document_.createElement("button");close.setAttribute("aria-label",str("DRIVE_WELCOME_DISMISS"));close.id="drive-space-warning-dismiss";close.className="banner-close";box.appendChild(close);const totalSize=opt_sizeStats.totalSize;close.addEventListener("click",(()=>{const values={};values[DRIVE_WARNING_DISMISSED_KEY]=totalSize;chrome.storage.local.set(values);box.hidden=true;this.requestRelayout_(100)}))}}if(box.hidden!=!show){box.hidden=!show;this.requestRelayout_(100)}}closeHoldingSpaceWelcomeBanner_(){assert(HoldingSpaceUtil.isFeatureEnabled());this.cleanupHoldingSpaceWelcomeBanner_();this.setHoldingSpaceWelcomeBannerCounter_(HOLDING_SPACE_WELCOME_BANNER_COUNTER_LIMIT)}closeWelcomeBanner_(){this.cleanupWelcomeBanner_();this.setWelcomeHeaderCounter_(WELCOME_HEADER_COUNTER_LIMIT)}maybeShowDriveBanners_(){this.ready_.then((()=>{if(!this.isOnCurrentProfileDrive()){this.cleanupWelcomeBanner_();this.previousDirWasOnDrive_=false;this.offlineInfoBanner_.hidden=true;return}const driveVolume=this.volumeManager_.getCurrentProfileVolumeInfo(VolumeManagerCommon$3.VolumeType.DRIVE);if(!driveVolume||driveVolume.error){return}if(this.welcomeHeaderCounter_<WELCOME_HEADER_COUNTER_LIMIT){this.maybeShowWelcomeBanner_()}if(util$3.isFilesNg()&&util$3.isDriveDssPinEnabled()&&(this.offlineInfoBannerCounter_<OFFLINE_INFO_BANNER_COUNTER_LIMIT||this.hasShownOfflineInfoBanner_)){this.offlineInfoBanner_.hidden=false;if(!this.hasShownOfflineInfoBanner_){this.hasShownOfflineInfoBanner_=true;this.setOfflineInfoBannerCounter_(this.offlineInfoBannerCounter_+1)}}}))}async maybeShowHoldingSpaceWelcomeBanner_(){if(!HoldingSpaceUtil.isFeatureEnabled()){return}await this.ready_;if(!this.showWelcome_){this.showHoldingSpaceWelcomeBanner_(false);return}const allowedVolumeTypes=HoldingSpaceUtil.getAllowedVolumeTypes();const currentRootType=this.directoryModel_.getCurrentRootType();if(!util$3.isRecentRootType(currentRootType)){const volumeInfo=this.directoryModel_.getCurrentVolumeInfo();if(!volumeInfo||!allowedVolumeTypes.includes(volumeInfo.volumeType)||volumeInfo.volumeType===VolumeManagerCommon$3.VolumeType.DRIVE){this.showHoldingSpaceWelcomeBanner_(false);return}}if(this.holdingSpaceWelcomeBannerCounter_>=HOLDING_SPACE_WELCOME_BANNER_COUNTER_LIMIT){return}if(!this.holdingSpaceWelcomeBanner_.hasAttribute("hidden")){return}this.setHoldingSpaceWelcomeBannerCounter_(this.holdingSpaceWelcomeBannerCounter_+1);this.prepareAndShowHoldingSpaceWelcomeBanner_()}maybeShowWelcomeBanner_(){this.ready_.then((()=>{if(util$3.isFilesNg()){if(!this.previousDirWasOnDrive_||this.welcomeHeaderCounter_==0){this.setWelcomeHeaderCounter_(this.welcomeHeaderCounter_+1);this.prepareAndShowWelcomeBanner_("header","DRIVE_WELCOME_TEXT_SHORT_FILESNG")}}else if(this.directoryModel_.getFileList().length==0&&this.welcomeHeaderCounter_==0){setTimeout((()=>{if(this.isOnCurrentProfileDrive()&&this.welcomeHeaderCounter_==0){this.prepareAndShowWelcomeBanner_("page","DRIVE_WELCOME_TEXT_LONG")}}),2e3)}else{if(!this.previousDirWasOnDrive_||this.welcomeHeaderCounter_==0){this.setWelcomeHeaderCounter_(this.welcomeHeaderCounter_+1);this.prepareAndShowWelcomeBanner_("header","DRIVE_WELCOME_TEXT_SHORT")}}this.previousDirWasOnDrive_=true}))}isOnCurrentProfileDrive(){const entry=this.directoryModel_.getCurrentDirEntry();if(!entry||util$3.isFakeEntry(entry)){return false}const locationInfo=this.volumeManager_.getLocationInfo(entry);if(!locationInfo){return false}return locationInfo.rootType===VolumeManagerCommon$3.RootType.DRIVE&&locationInfo.volumeInfo.profile.isCurrentProfile}showHoldingSpaceWelcomeBanner_(show){assert(HoldingSpaceUtil.isFeatureEnabled());const hidden=!show;if(this.holdingSpaceWelcomeBanner_.hasAttribute("hidden")==hidden){return}if(hidden){this.holdingSpaceWelcomeBanner_.setAttribute("hidden","")}else{this.holdingSpaceWelcomeBanner_.removeAttribute("hidden");HoldingSpaceUtil.maybeStoreTimeOfFirstWelcomeBannerShow()}this.requestRelayout_(200)}showWelcomeBanner_(type){const container=this.document_.querySelector(".dialog-container");if(container.getAttribute("drive-welcome")!=type){container.setAttribute("drive-welcome",type);this.requestRelayout_(200)}}onDirectoryChanged_(event){const rootVolume=this.volumeManager_.getVolumeInfo(event.newDirEntry);if(!rootVolume){return}const previousRootVolume=event.previousDirEntry?this.volumeManager_.getVolumeInfo(event.previousDirEntry):null;this.maybeShowLowSpaceWarning_(rootVolume);const isLowSpaceWarningTarget=this.isLowSpaceWarningTarget_(rootVolume);if(isLowSpaceWarningTarget!==this.isLowSpaceWarningTarget_(previousRootVolume)){if(isLowSpaceWarningTarget){chrome.fileManagerPrivate.onDirectoryChanged.addListener(this.privateOnDirectoryChangedBound_)}else{chrome.fileManagerPrivate.onDirectoryChanged.removeListener(this.privateOnDirectoryChangedBound_)}}if(!this.isOnCurrentProfileDrive()){this.cleanupWelcomeBanner_();this.authFailedBanner_.hidden=true}this.updateDriveUnmountedPanel_();if(this.isOnCurrentProfileDrive()){this.unmountedPanel_.classList.remove("retry-enabled");this.maybeShowAuthFailBanner_()}}isLowSpaceWarningTarget_(volumeInfo){if(!volumeInfo){return false}return volumeInfo.profile.isCurrentProfile&&(volumeInfo.volumeType===VolumeManagerCommon$3.VolumeType.DOWNLOADS||volumeInfo.volumeType===VolumeManagerCommon$3.VolumeType.DRIVE)}privateOnDirectoryChanged_(event){const currentDirEntry=this.directoryModel_.getCurrentDirEntry();if(!currentDirEntry){return}const currentVolume=this.volumeManager_.getVolumeInfo(currentDirEntry);if(!currentVolume){return}const eventVolume=this.volumeManager_.getVolumeInfo(event.entry);if(currentVolume===eventVolume){this.maybeShowLowSpaceWarning_(currentVolume)}}maybeShowLowSpaceWarning_(volume){if(window.IN_TEST){return}switch(volume.volumeType){case VolumeManagerCommon$3.VolumeType.DOWNLOADS:this.showLowDriveSpaceWarning_(false);break;case VolumeManagerCommon$3.VolumeType.DRIVE:this.showLowDownloadsSpaceWarning_(false);break;default:this.showLowDownloadsSpaceWarning_(false);this.showLowDriveSpaceWarning_(false);return}if(!volume.fileSystem){return}chrome.fileManagerPrivate.getSizeStats(volume.volumeId,(sizeStats=>{const currentVolume=this.volumeManager_.getVolumeInfo(assert(this.directoryModel_.getCurrentDirEntry()));if(volume!==currentVolume){return}if(!sizeStats||sizeStats.totalSize==0){return}if(volume.volumeType===VolumeManagerCommon$3.VolumeType.DOWNLOADS){this.showLowDownloadsSpaceWarning_(sizeStats.remainingSize<DOWNLOADS_SPACE_WARNING_THRESHOLD_SIZE)}else{const remainingRatio=sizeStats.remainingSize/sizeStats.totalSize;this.showLowDriveSpaceWarning_(remainingRatio<DRIVE_SPACE_WARNING_THRESHOLD_RATIO,sizeStats)}}))}cleanupHoldingSpaceWelcomeBanner_(){assert(HoldingSpaceUtil.isFeatureEnabled());this.showHoldingSpaceWelcomeBanner_(false)}cleanupWelcomeBanner_(){this.showWelcomeBanner_("none")}requestRelayout_(delay){const self=this;setTimeout((()=>{dispatchSimpleEvent(self,"relayout")}),delay)}showLowDownloadsSpaceWarning_(show){const box=this.document_.querySelector(".downloads-warning");if(box.hidden==!show){return}if(this.downloadsWarningDismissedTime_){if(Date.now()-this.downloadsWarningDismissedTime_<DOWNLOADS_SPACE_WARNING_DISMISS_DURATION){show=false}}box.textContent="";if(show){const icon=this.document_.createElement("div");icon.className="warning-icon";const message=this.document_.createElement("div");message.className="warning-message";if(util$3.isFilesNg()){message.className+=" body2-primary";message.innerHTML=util$3.htmlUnescape(str("DOWNLOADS_DIRECTORY_WARNING_FILESNG"));util$3.setClampLine(message,"2");const link=message.querySelector("a");const linkWrapper=this.document_.createElement("div");linkWrapper.className="link-wrapper";message.appendChild(linkWrapper);linkWrapper.appendChild(link);this.hideOverflowedElement(linkWrapper,message)}else{message.innerHTML=util$3.htmlUnescape(str("DOWNLOADS_DIRECTORY_WARNING"))}box.appendChild(icon);box.appendChild(message);box.querySelector("a").addEventListener("click",(e=>{util$3.visitURL(str("DOWNLOADS_LOW_SPACE_WARNING_HELP_URL"));e.preventDefault()}));const buttonGroup=this.document_.createElement("div");buttonGroup.className="button-group";box.appendChild(buttonGroup);const closeType=util$3.isFilesNg()?"cr-button":"button";const close=this.document_.createElement(closeType);close.className="banner-close";close.setAttribute("aria-label",str("DRIVE_WELCOME_DISMISS"));close.id="downloads-space-warning-dismiss";if(util$3.isFilesNg()){close.innerHTML=str("DRIVE_WELCOME_DISMISS");close.className="banner-close text-button"}buttonGroup.appendChild(close);close.addEventListener("click",(()=>{const values={};values[DOWNLOADS_WARNING_DISMISSED_KEY]=Date.now();chrome.storage.local.set(values);box.hidden=true;close.hidden=true;this.requestRelayout_(100)}))}box.hidden=!show;this.requestRelayout_(100)}ensureDriveUnmountedPanelInitialized_(){const panel=this.unmountedPanel_;if(panel.firstElementChild){return}const create=(parent,tag,className,opt_textContent)=>{const div=panel.ownerDocument.createElement(tag);div.className=className;div.textContent=opt_textContent||"";parent.appendChild(div);return div};create(panel,"div","error",str("DRIVE_CANNOT_REACH"));const learnMore=create(panel,"a","learn-more plain-link",str("DRIVE_LEARN_MORE"));learnMore.href=str("GOOGLE_DRIVE_ERROR_HELP_URL");learnMore.rel="opener";learnMore.target="_blank"}onVolumeInfoListSplice_(event){const isDriveVolume=volumeInfo=>volumeInfo.volumeType===VolumeManagerCommon$3.VolumeType.DRIVE;if(event.removed.some(isDriveVolume)||event.added.some(isDriveVolume)){this.updateDriveUnmountedPanel_()}}updateDriveUnmountedPanel_(){const node=this.document_.body;if(this.isOnCurrentProfileDrive()){const driveVolume=this.volumeManager_.getCurrentProfileVolumeInfo(VolumeManagerCommon$3.VolumeType.DRIVE);if(driveVolume){if(driveVolume.error){this.ensureDriveUnmountedPanelInitialized_();this.unmountedPanel_.classList.add("retry-enabled");node.setAttribute("drive","error")}else{node.setAttribute("drive","mounted")}}else{this.unmountedPanel_.classList.remove("retry-enabled");node.setAttribute("drive","unmounted")}}else{node.removeAttribute("drive")}}maybeShowAuthFailBanner_(){const connection=this.volumeManager_.getDriveConnectionState();const showDriveNotReachedMessage=this.isOnCurrentProfileDrive()&&connection.type==chrome.fileManagerPrivate.DriveConnectionStateType.OFFLINE&&connection.reason==chrome.fileManagerPrivate.DriveOfflineReason.NOT_READY;this.authFailedBanner_.hidden=!showDriveNotReachedMessage}hideOverflowedElement(element,container){const observer=new ResizeObserver((()=>{if(util$3.hasOverflow(container)){element.style.visibility="hidden"}else{element.style.visibility="visible"}}));observer.observe(container)}}// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
class KeyboardShortcut{constructor(shortcut){this.useKeyCode_=false;this.mods_={};this.key_=null;this.keyCode_=null;shortcut.split("|").forEach((part=>{const partLc=part.toLowerCase();switch(partLc){case"alt":case"ctrl":case"meta":case"shift":this.mods_[partLc+"Key"]=true;break;default:if(this.key_){throw Error("Invalid shortcut")}this.key_=part;if(part.match(/^[a-z]$/)){this.useKeyCode_=true;this.keyCode_=part.toUpperCase().charCodeAt(0)}}}))}matchesEvent(e){if(this.useKeyCode_&&e.keyCode===this.keyCode_||e.key===this.key_){const mods=this.mods_;return["altKey","ctrlKey","metaKey","shiftKey"].every((function(k){return e[k]===!!mods[k]}))}return false}}class KeyboardShortcutList{constructor(shortcuts){this.shortcuts_=shortcuts.split(/\s+/).map((function(shortcut){return new KeyboardShortcut(shortcut)}))}matchesEvent(e){return this.shortcuts_.some((function(keyboardShortcut){return keyboardShortcut.matchesEvent(e)}))}}// Copyright (c) 2012 The Chromium Authors. All rights reserved.
const Command=define("command");Command.prototype={__proto__:HTMLElement.prototype,decorate(){CommandManager.init(assert(this.ownerDocument));if(this.hasAttribute("shortcut")){this.shortcut=this.getAttribute("shortcut")}},execute(opt_element){if(this.disabled){return}const doc=this.ownerDocument;if(doc.activeElement){const e=new Event("command",{bubbles:true});e.command=this;(opt_element||doc.activeElement).dispatchEvent(e)}},canExecuteChange(opt_node){dispatchCanExecuteEvent(this,opt_node||this.ownerDocument.activeElement)},shortcut_:"",get shortcut(){return this.shortcut_},set shortcut(shortcut){const oldShortcut=this.shortcut_;if(shortcut!==oldShortcut){this.keyboardShortcuts_=new KeyboardShortcutList(shortcut);this.shortcut_=shortcut;dispatchPropertyChange(this,"shortcut",this.shortcut_,oldShortcut)}},matchesEvent(e){if(!this.keyboardShortcuts_){return false}return this.keyboardShortcuts_.matchesEvent(e)}};Command.prototype.label;Object.defineProperty(Command.prototype,"label",getPropertyDescriptor("label",PropertyKind.ATTR));Command.prototype.disabled;Object.defineProperty(Command.prototype,"disabled",getPropertyDescriptor("disabled",PropertyKind.BOOL_ATTR));Object.defineProperty(Command.prototype,"hidden",getPropertyDescriptor("hidden",PropertyKind.BOOL_ATTR));Command.prototype.checked;Object.defineProperty(Command.prototype,"checked",getPropertyDescriptor("checked",PropertyKind.BOOL_ATTR));Command.prototype.hideShortcutText;Object.defineProperty(Command.prototype,"hideShortcutText",getPropertyDescriptor("hideShortcutText",PropertyKind.BOOL_ATTR));function dispatchCanExecuteEvent(command,target){const e=new CanExecuteEvent(command);target.dispatchEvent(e);command.disabled=!e.canExecute}const commandManagers=new Map;function CommandManager(doc){doc.addEventListener("focus",this.handleFocus_.bind(this),true);doc.addEventListener("keydown",this.handleKeyDown_.bind(this),false)}CommandManager.init=function(doc){if(!commandManagers.has(doc)){commandManagers.set(doc,new CommandManager(doc))}};CommandManager.prototype={handleFocus_(e){const target=e.target;if(target.menu||target.command||target instanceof MenuItem){return}const commands=Array.prototype.slice.call(target.ownerDocument.querySelectorAll("command"));commands.forEach((function(command){dispatchCanExecuteEvent(command,target)}))},handleKeyDown_(e){const target=e.target;const commands=Array.prototype.slice.call(target.ownerDocument.querySelectorAll("command"));for(let i=0,command;command=commands[i];i++){if(command.matchesEvent(e)){command.canExecuteChange();if(!command.disabled){e.preventDefault();e.stopPropagation();command.execute();return}}}}};function CanExecuteEvent(command){const e=new Event("canExecute",{bubbles:true,cancelable:true});e.__proto__=CanExecuteEvent.prototype;e.command=command;return e}CanExecuteEvent.prototype={__proto__:Event.prototype,command:null,canExecute_:false,get canExecute(){return this.canExecute_},set canExecute(canExecute){this.canExecute_=!!canExecute;this.stopPropagation();this.preventDefault()}};
// Copyright (c) 2012 The Chromium Authors. All rights reserved.
const MenuItem=define("cr-menu-item");MenuItem.createSeparator=function(){const el=document.createElement("hr");if(MenuItem.decorate){MenuItem.decorate(el)}return el};MenuItem.prototype={__proto__:HTMLElement.prototype,decorate(){let commandId;if(commandId=this.getAttribute("command")){this.command=commandId}this.addEventListener("mouseup",this.handleMouseUp_);this.classList.add("custom-appearance");if(!this.isSeparator()){this.setAttribute("role","menuitem");this.setAttribute("tabindex",this.getAttribute("tabindex")||-1)}let iconUrl;if(iconUrl=this.getAttribute("icon")){this.iconUrl=iconUrl}},command_:null,get command(){return this.command_},set command(command){if(this.command_){this.command_.removeEventListener("labelChange",this);this.command_.removeEventListener("disabledChange",this);this.command_.removeEventListener("hiddenChange",this);this.command_.removeEventListener("checkedChange",this)}if(typeof command==="string"&&command[0]==="#"){command=assert(this.ownerDocument.body.querySelector(command));decorate(command,Command)}this.command_=command;if(command){if(command.id){this.setAttribute("command","#"+command.id)}if(typeof command.label==="string"){this.label=command.label}this.disabled=command.disabled;this.hidden=command.hidden;this.checked=command.checked;this.command_.addEventListener("labelChange",this);this.command_.addEventListener("disabledChange",this);this.command_.addEventListener("hiddenChange",this);this.command_.addEventListener("checkedChange",this)}this.updateShortcut_()},get label(){return this.textContent},set label(label){this.textContent=label},get iconUrl(){return this.style.backgroundImage},set iconUrl(url){this.style.backgroundImage="url("+url+")"},isSeparator(){return this.tagName==="HR"},updateShortcut_(){this.removeAttribute("shortcutText");if(!this.command_||!this.command_.shortcut||this.command_.hideShortcutText){return}const shortcuts=this.command_.shortcut.split(/\s+/);if(shortcuts.length===0){return}const shortcut=shortcuts[0];const mods={};let ident="";shortcut.split("|").forEach((function(part){const partUc=part.toUpperCase();switch(partUc){case"CTRL":case"ALT":case"SHIFT":case"META":mods[partUc]=true;break;default:console.assert(!ident,"Shortcut has two non-modifier keys");ident=part}}));let shortcutText="";["CTRL","ALT","SHIFT","META"].forEach((function(mod){if(mods[mod]){shortcutText+=loadTimeData.getString("SHORTCUT_"+mod)+"+"}}));if(ident===" "){ident="Space"}if(ident.length!==1){shortcutText+=loadTimeData.getString("SHORTCUT_"+ident.toUpperCase())}else{shortcutText+=ident.toUpperCase()}this.setAttribute("shortcutText",shortcutText)},handleMouseUp_(e){e=e;if(e.button>1){return}if(!this.disabled&&!this.isSeparator()&&this.selected){const contextElement=this.parentNode.contextElement;const activationEvent=document.createEvent("Event");activationEvent.initEvent("activate",true,true);activationEvent.originalEvent=e;if(this.dispatchEvent(activationEvent)){const command=this.command;if(command){command.execute(contextElement);swallowDoubleClick(e)}}}},updateCommand(opt_node){if(this.command_){this.command_.canExecuteChange(opt_node)}},handleEvent(e){switch(e.type){case"disabledChange":this.disabled=this.command.disabled;break;case"hiddenChange":this.hidden=this.command.hidden;break;case"labelChange":this.label=this.command.label;break;case"checkedChange":this.checked=this.command.checked;break}}};MenuItem.prototype.disabled;Object.defineProperty(MenuItem.prototype,"disabled",getPropertyDescriptor("disabled",PropertyKind.BOOL_ATTR));Object.defineProperty(MenuItem.prototype,"hidden",getPropertyDescriptor("hidden",PropertyKind.BOOL_ATTR));MenuItem.prototype.selected;Object.defineProperty(MenuItem.prototype,"selected",getPropertyDescriptor("selected",PropertyKind.BOOL_ATTR));MenuItem.prototype.checked;Object.defineProperty(MenuItem.prototype,"checked",getPropertyDescriptor("checked",PropertyKind.BOOL_ATTR));MenuItem.prototype.checkable;Object.defineProperty(MenuItem.prototype,"checkable",getPropertyDescriptor("checkable",PropertyKind.BOOL_ATTR));
// Copyright (c) 2012 The Chromium Authors. All rights reserved.
const Menu=define("cr-menu");Menu.prototype={__proto__:HTMLElement.prototype,selectedIndex_:-1,contextElement:null,decorate(){this.addEventListener("mouseover",this.handleMouseOver_);this.addEventListener("mouseout",this.handleMouseOut_);this.addEventListener("mouseup",this.handleMouseUp_,true);this.classList.add("decorated");this.setAttribute("role","menu");this.hidden=true;const menuItems=this.menuItems;for(let i=0,menuItem;menuItem=menuItems[i];i++){decorate(menuItem,MenuItem)}},addMenuItem(item){const menuItem=this.ownerDocument.createElement("cr-menu-item");this.appendChild(menuItem);decorate(menuItem,MenuItem);if(item.label){menuItem.label=item.label}if(item.iconUrl){menuItem.iconUrl=item.iconUrl}return menuItem},addSeparator(){const separator=this.ownerDocument.createElement("hr");decorate(separator,MenuItem);this.appendChild(separator)},clear(){this.selectedItem=null;this.textContent=""},findMenuItem_(node){while(node&&node.parentNode!==this&&!(node instanceof MenuItem)){node=node.parentNode}return node?assertInstanceof(node,MenuItem):null},handleMouseOver_(e){const overItem=this.findMenuItem_(e.target);this.selectedItem=overItem},handleMouseOut_(e){this.selectedItem=null},handleMouseUp_(e){assert(this.contains(e.target));if(!this.trustEvent_(e)||Date.now()-this.shown_.time>200){return}const pos=this.shown_.mouseDownPos;if(!pos||Math.abs(pos.x-e.screenX)+Math.abs(pos.y-e.screenY)>4){return}e.preventDefault();e.stopPropagation()},trustEvent_(e){return e.isTrusted||e.isTrustedForTesting},get menuItems(){return this.querySelectorAll(this.menuItemSelector||"*")},get selectedItem(){return this.menuItems[this.selectedIndex]},set selectedItem(item){const index=Array.prototype.indexOf.call(this.menuItems,item);this.selectedIndex=index},focusSelectedItem(){const items=this.menuItems;if(this.selectedIndex<0||this.selectedIndex>items.length){for(let idx=0;idx<items.length;idx++){const item=items[idx];if(item.hasAttribute("hidden")||item.isSeparator()){continue}if(!item.disabled){this.selectedIndex=idx;break}else if(this.selectedIndex===-1){this.selectedIndex=idx}}}if(this.selectedItem){this.selectedItem.focus();this.setAttribute("aria-activedescendant",this.selectedItem.id)}},get length(){return this.menuItems.length},isItemVisible_(menuItem){if(menuItem.hidden){return false}if(menuItem.offsetParent){return true}return window.getComputedStyle(menuItem).display!=="none"},hasVisibleItems(){for(const menuItem of this.menuItems){if(this.isItemVisible_(menuItem)){return true}}return false},handleKeyDown(e){let item=this.selectedItem;const self=this;const selectNextAvailable=function(m){const menuItems=self.menuItems;const len=menuItems.length;if(!len){return}let i=self.selectedIndex;if(i===-1&&m===-1){i=0}const startPosition=(i+len)%len;while(true){i=(i+m+len)%len;if(i===startPosition){break}item=menuItems[i];if(item&&!item.isSeparator()&&!item.disabled&&this.isItemVisible_(item)){break}}if(item&&!item.disabled){self.selectedIndex=i}}.bind(this);switch(e.key){case"ArrowDown":selectNextAvailable(1);this.focusSelectedItem();return true;case"ArrowUp":selectNextAvailable(-1);this.focusSelectedItem();return true;case"Enter":case" ":if(item){const contextElement=this.contextElement;const activationEvent=document.createEvent("Event");activationEvent.initEvent("activate",true,true);activationEvent.originalEvent=e;if(item.dispatchEvent(activationEvent)){if(item.command){item.command.execute(contextElement)}}}return true}return false},hide(){this.hidden=true;delete this.shown_},show(opt_mouseDownPos){this.shown_={mouseDownPos:opt_mouseDownPos,time:Date.now()};this.hidden=false},updateCommands(node){const menuItems=this.menuItems;for(const menuItem of menuItems){if(!menuItem.isSeparator()){menuItem.updateCommand(node)}}let separatorRequired=false;let lastSeparator=null;for(const menuItem of menuItems){if(menuItem.isSeparator()){if(separatorRequired){lastSeparator=menuItem}menuItem.hidden=true;separatorRequired=false;continue}if(this.isItemVisible_(menuItem)){if(lastSeparator){lastSeparator.hidden=false}separatorRequired=true}}}};function selectedIndexChanged(selectedIndex,oldSelectedIndex){const oldSelectedItem=this.menuItems[oldSelectedIndex];if(oldSelectedItem){oldSelectedItem.selected=false;oldSelectedItem.blur()}const item=this.selectedItem;if(item){item.selected=true}}Menu.prototype.selectedIndex;Object.defineProperty(Menu.prototype,"selectedIndex",getPropertyDescriptor("selectedIndex",PropertyKind.JS,selectedIndexChanged));Menu.prototype.menuItemSelector;Object.defineProperty(Menu.prototype,"menuItemSelector",getPropertyDescriptor("menuItemSelector",PropertyKind.ATTR));
// Copyright 2013 The Chromium Authors. All rights reserved.
const{VolumeManagerCommon:VolumeManagerCommon$2,AllowedPaths:AllowedPaths}=wrappedVolumeManagerCommon;class FilteredVolumeInfoList{constructor(list){this.list_=list}get length(){return this.list_.length}addEventListener(type,handler){this.list_.addEventListener(type,handler)}removeEventListener(type,handler){this.list_.removeEventListener(type,handler)}add(volumeInfo){throw new Error("FilteredVolumeInfoList.add not allowed in foreground")}remove(volumeInfo){throw new Error("FilteredVolumeInfoList.remove not allowed in foreground")}item(index){return this.list_.item(index)}}class FilteredVolumeManager extends NativeEventTarget{constructor(allowedPaths,writableOnly,volumeManagerGetter){super();this.allowedPaths_=allowedPaths;this.writableOnly_=writableOnly;this.list_=new ArrayDataModel([]);this.volumeInfoList=new FilteredVolumeInfoList(this.list_);this.volumeManager_=null;this.onEventBound_=this.onEvent_.bind(this);this.onVolumeInfoListUpdatedBound_=this.onVolumeInfoListUpdated_.bind(this);this.disposed_=false;this.volumeManagerGetter_=volumeManagerGetter;this.initialized_=this.initialize_()}isAllowedVolumeType_(volumeType){switch(this.allowedPaths_){case AllowedPaths.ANY_PATH:case AllowedPaths.ANY_PATH_OR_URL:return true;case AllowedPaths.NATIVE_PATH:return VolumeManagerCommon$2.VolumeType.isNative(assert(volumeType))}return false}isAllowedVolume_(volumeInfo){if(!this.isAllowedVolumeType_(volumeInfo.volumeType)){return false}if(this.writableOnly_&&volumeInfo.isReadOnly){return false}return true}async initialize_(){this.volumeManager_=await this.volumeManagerGetter_;if(this.disposed_){return}this.volumeManager_.addEventListener("drive-connection-changed",this.onEventBound_);this.volumeManager_.addEventListener("externally-unmounted",this.onEventBound_);this.volumeManager_.addEventListener(VolumeManagerCommon$2.ARCHIVE_OPENED_EVENT_TYPE,this.onEventBound_);dispatchSimpleEvent(this,"drive-connection-changed");const volumeInfoList=[];for(let i=0;i<this.volumeManager_.volumeInfoList.length;i++){const volumeInfo=this.volumeManager_.volumeInfoList.item(i);if(!this.isAllowedVolume_(volumeInfo)){continue}volumeInfoList.push(volumeInfo)}this.list_.splice.apply(this.list_,[0,this.volumeInfoList.length].concat(volumeInfoList));this.volumeManager_.volumeInfoList.addEventListener("splice",this.onVolumeInfoListUpdatedBound_)}dispose(){this.disposed_=true;if(!this.volumeManager_){return}this.volumeManager_.removeEventListener("drive-connection-changed",this.onEventBound_);this.volumeManager_.removeEventListener("externally-unmounted",this.onEventBound_);this.volumeManager_.volumeInfoList.removeEventListener("splice",this.onVolumeInfoListUpdatedBound_)}onEvent_(event){switch(event.type){case"drive-connection-changed":if(this.isAllowedVolumeType_(VolumeManagerCommon$2.VolumeType.DRIVE)){dispatchSimpleEvent(this,"drive-connection-changed")}break;case"externally-unmounted":event=event;if(this.isAllowedVolume_(event.detail)){this.dispatchEvent(new CustomEvent("externally-unmount",{detail:event.detail}))}break;case VolumeManagerCommon$2.ARCHIVE_OPENED_EVENT_TYPE:this.dispatchEvent(new CustomEvent(VolumeManagerCommon$2.ARCHIVE_OPENED_EVENT_TYPE,{detail:event.detail}));break}}onVolumeInfoListUpdated_(event){let index=event.index;for(let i=0;i<event.index;i++){const volumeInfo=this.volumeManager_.volumeInfoList.item(i);if(!this.isAllowedVolume_(volumeInfo)){index--}}let numRemovedVolumes=0;for(let i=0;i<event.removed.length;i++){const volumeInfo=event.removed[i];if(this.isAllowedVolume_(volumeInfo)){numRemovedVolumes++}}const addedVolumes=[];for(let i=0;i<event.added.length;i++){const volumeInfo=event.added[i];if(this.isAllowedVolume_(volumeInfo)){addedVolumes.push(volumeInfo)}}this.list_.splice.apply(this.list_,[index,numRemovedVolumes].concat(addedVolumes))}ensureInitialized(callback){this.initialized_.then(callback)}getDriveConnectionState(){if(!this.isAllowedVolumeType_(VolumeManagerCommon$2.VolumeType.DRIVE)||!this.volumeManager_){return{type:chrome.fileManagerPrivate.DriveConnectionStateType.OFFLINE,reason:chrome.fileManagerPrivate.DriveOfflineReason.NO_SERVICE,hasCellularNetworkAccess:false,canPinHostedFiles:false}}return this.volumeManager_.getDriveConnectionState()}getVolumeInfo(entry){return this.filterDisallowedVolume_(this.volumeManager_&&this.volumeManager_.getVolumeInfo(entry))}getCurrentProfileVolumeInfo(volumeType){return this.filterDisallowedVolume_(this.volumeManager_&&this.volumeManager_.getCurrentProfileVolumeInfo(volumeType))}getDefaultDisplayRoot(callback){this.ensureInitialized((()=>{const defaultVolume=this.getCurrentProfileVolumeInfo(VolumeManagerCommon$2.VolumeType.DOWNLOADS);if(!defaultVolume){console.warn("Cannot get default display root");callback(null);return}defaultVolume.resolveDisplayRoot(callback,(()=>{console.error("Cannot resolve default display root");callback(null)}))}))}getLocationInfo(entry){const locationInfo=this.volumeManager_&&this.volumeManager_.getLocationInfo(entry);if(!locationInfo){return null}if(locationInfo.volumeInfo&&!this.filterDisallowedVolume_(locationInfo.volumeInfo)){return null}return locationInfo}findByDevicePath(devicePath){for(let i=0;i<this.volumeInfoList.length;i++){const volumeInfo=this.volumeInfoList.item(i);if(volumeInfo.devicePath&&volumeInfo.devicePath===devicePath){return this.filterDisallowedVolume_(volumeInfo)}}return null}async whenVolumeInfoReady(volumeId){await this.initialized_;const volumeInfo=this.filterDisallowedVolume_(await this.volumeManager_.whenVolumeInfoReady(volumeId));if(!volumeInfo){throw new Error(`Volume not allowed: ${volumeId}`)}return volumeInfo}async mountArchive(fileUrl,password){await this.initialized_;return this.volumeManager_.mountArchive(fileUrl,password)}async unmount(volumeInfo){await this.initialized_;return this.volumeManager_.unmount(volumeInfo)}async configure(volumeInfo){await this.initialized_;return this.volumeManager_.configure(volumeInfo)}filterDisallowedVolume_(volumeInfo){if(volumeInfo&&this.isAllowedVolume_(volumeInfo)){return volumeInfo}else{return null}}}// Copyright (c) 2013 The Chromium Authors. All rights reserved.
const STORED_DRIVE_MOUNT_PATH="/drive";class FolderShortcutsDataModel extends NativeEventTarget{constructor(volumeManager){super();this.volumeManager_=volumeManager;this.array_=[];this.pendingPaths_={};this.unresolvablePaths_={};this.lastDriveRootURL_=null;this.queue_=new AsyncUtil.Queue;this.queue_.run(this.volumeManager_.ensureInitialized.bind(this.volumeManager_));this.load_();chrome.storage.onChanged.addListener(((changes,namespace)=>{if(!(FolderShortcutsDataModel.NAME in changes)||namespace!=="sync"){return}this.reload_()}));this.volumeManager_.volumeInfoList.addEventListener("permuted",this.reload_.bind(this));this.volumeManager_.addEventListener("drive-connection-changed",this.reload_.bind(this))}get length(){return this.array_.length}rememberLastDriveURL_(){if(this.lastDriveRootURL_){return}const volumeInfo=this.volumeManager_.getCurrentProfileVolumeInfo(VolumeManagerCommon$3.VolumeType.DRIVE);if(volumeInfo){this.lastDriveRootURL_=volumeInfo.fileSystem.root.toURL()}}processEntries_(list){this.queue_.run((callback=>{this.pendingPaths_={};this.unresolvablePaths_={};list.forEach((function(path){this.pendingPaths_[path]=true}),this);callback()}));this.queue_.run((queueCallback=>{const volumeInfo=this.volumeManager_.getCurrentProfileVolumeInfo(VolumeManagerCommon$3.VolumeType.DRIVE);let changed=false;const resolvedURLs={};this.rememberLastDriveURL_();const onResolveSuccess=(path,entry)=>{if(path in this.pendingPaths_){delete this.pendingPaths_[path]}if(path in this.unresolvablePaths_){changed=true;delete this.unresolvablePaths_[path]}if(!this.exists(entry)){changed=true;this.addInternal_(entry)}resolvedURLs[entry.toURL()]=true};const onResolveFailure=(path,url)=>{if(path in this.pendingPaths_){delete this.pendingPaths_[path]}const existingIndex=this.getIndexByURL_(url);if(existingIndex!==-1){changed=true;this.removeInternal_(this.item(existingIndex))}if(!volumeInfo||this.volumeManager_.getDriveConnectionState().type!==chrome.fileManagerPrivate.DriveConnectionStateType.ONLINE){if(!this.unresolvablePaths_[path]){changed=true;this.unresolvablePaths_[path]=true}}};const group=new AsyncUtil.Group;list.forEach((function(path){group.add(((path,callback)=>{const url=this.lastDriveRootURL_&&this.convertStoredPathToUrl_(path);if(url&&volumeInfo){window.webkitResolveLocalFileSystemURL(url,(entry=>{onResolveSuccess(path,entry);callback()}),(()=>{onResolveFailure(path,url);callback()}))}else{onResolveFailure(path,url);callback()}}).bind(null,path))}),this);group.run((()=>{let index=0;while(index<this.length){const entry=this.item(index);if(!resolvedURLs[entry.toURL()]){this.removeInternal_(entry);changed=true}else{index++}}if(changed){this.save_()}queueCallback()}))}))}load_(){this.queue_.run((callback=>{chrome.storage.sync.get(FolderShortcutsDataModel.NAME,(value=>{if(chrome.runtime.lastError){console.error("Failed to load shortcut paths from chrome.storage: "+chrome.runtime.lastError.message);callback();return}const shortcutPaths=value[FolderShortcutsDataModel.NAME]||[];metrics.recordSmallCount("FolderShortcut.Count",shortcutPaths.length);this.processEntries_(shortcutPaths);callback()}))}))}reload_(){this.queue_.run((callback=>{chrome.storage.sync.get(FolderShortcutsDataModel.NAME,(value=>{const shortcutPaths=value[FolderShortcutsDataModel.NAME]||[];this.processEntries_(shortcutPaths);callback()}))}))}slice(begin,opt_end){return this.array_.slice(begin,opt_end)}item(index){return this.array_[index]}getIndexByURL_(value){for(let i=0;i<this.length;i++){if(this.array_[i].toURL()===value){return i}}return-1}getIndex(value){for(let i=0;i<this.length;i++){if(util$3.isSameEntry(this.array_[i],value)){return i}}return-1}compare(a,b){return util$3.comparePath(a,b)}add(value){const result=this.addInternal_(value);metrics.recordUserAction("FolderShortcut.Add");this.save_();return result}addInternal_(value){this.rememberLastDriveURL_();const oldArray=this.array_.slice(0);let addedIndex=-1;for(let i=0;i<this.length;i++){if(util$3.isSameEntry(this.array_[i],value)){return i}if(this.compare(this.array_[i],value)>=0){this.array_.splice(i,0,value);addedIndex=i;break}}if(addedIndex==-1){this.array_.push(value);addedIndex=this.length}this.firePermutedEvent_(this.calculatePermutation_(oldArray,this.array_));return addedIndex}remove(value){const result=this.removeInternal_(value);if(result!==-1){this.save_();metrics.recordUserAction("FolderShortcut.Remove")}return result}removeInternal_(value){let removedIndex=-1;const oldArray=this.array_.slice(0);for(let i=0;i<this.length;i++){if(util$3.isSameEntry(this.array_[i],value)){this.array_.splice(i,1);removedIndex=i;break}}if(removedIndex!==-1){this.firePermutedEvent_(this.calculatePermutation_(oldArray,this.array_));return removedIndex}return-1}exists(entry){const index=this.getIndex(entry);return index>=0}save_(){this.rememberLastDriveURL_();if(!this.lastDriveRootURL_){return}const paths=this.array_.map((entry=>entry.toURL())).map(this.convertUrlToStoredPath_.bind(this)).concat(Object.keys(this.pendingPaths_)).concat(Object.keys(this.unresolvablePaths_));const prefs={};prefs[FolderShortcutsDataModel.NAME]=paths;chrome.storage.sync.set(prefs,(()=>{}))}calculatePermutation_(oldArray,newArray){let oldIndex=0;let newIndex=0;const permutation=[];for(;oldIndex<oldArray.length;oldIndex++){if(newIndex>=newArray.length){permutation[oldIndex]=-1;continue}while(newIndex<newArray.length){if(util$3.isSameEntry(oldArray[oldIndex],newArray[newIndex])){permutation[oldIndex]=newIndex;newIndex++;break}if(this.compare(oldArray[oldIndex],newArray[newIndex])<0){permutation[oldIndex]=-1;break}newIndex++}}return permutation}firePermutedEvent_(permutation){const permutedEvent=new Event("permuted");permutedEvent.newLength=this.length;permutedEvent.permutation=permutation;this.dispatchEvent(permutedEvent)}onItemNotFoundError(entry){if(this.volumeManager_.getDriveConnectionState().type!==chrome.fileManagerPrivate.DriveConnectionStateType.ONLINE){const path=this.convertUrlToStoredPath_(entry.toURL());this.unresolvablePaths_[path]=true}this.removeInternal_(entry);this.save_()}convertStoredPathToUrl_(path){if(path.indexOf(STORED_DRIVE_MOUNT_PATH+"/")!==0){console.warn(path+" is neither a drive mount path nor a stored path.");return null}return this.lastDriveRootURL_+encodeURIComponent(path.substr(STORED_DRIVE_MOUNT_PATH.length))}convertUrlToStoredPath_(url){if(url.indexOf(this.lastDriveRootURL_)!==0){console.warn(url+" is not a drive URL.");return null}return STORED_DRIVE_MOUNT_PATH+"/"+decodeURIComponent(url.substr(this.lastDriveRootURL_.length))}}FolderShortcutsDataModel.NAME="folder-shortcuts-list";// Copyright 2019 The Chromium Authors. All rights reserved.
class AndroidAppListModel extends NativeEventTarget{constructor(showAndroidPickerApps,includeAllFiles,typeList){super();this.apps_=[];if(!showAndroidPickerApps){return}let extensions=[];if(!includeAllFiles){for(let i=0;i<typeList.length;i++){extensions=extensions.concat(typeList[i].extensions)}}chrome.fileManagerPrivate.getAndroidPickerApps(extensions,(apps=>{this.apps_=apps;this.dispatchEvent(new Event("permuted"))}))}length(){return this.apps_.length}item(index){return this.apps_[index]}}// Copyright 2020 The Chromium Authors. All rights reserved.
class TrashConfig{constructor(volumeType,topDir,trashDir,prefixPathWithRemoteMount=false){this.id=`${volumeType}-${topDir}`;this.volumeType=volumeType;this.topDir=topDir;this.trashDir=trashDir;this.prefixPathWithRemoteMount=prefixPathWithRemoteMount;this.pathPrefix=""}}TrashConfig.CONFIG=[new TrashConfig(VolumeManagerCommon$3.VolumeType.DOWNLOADS,"/Downloads/","/Downloads/.Trash/"),new TrashConfig(VolumeManagerCommon$3.VolumeType.DOWNLOADS,"/","/.Trash/"),new TrashConfig(VolumeManagerCommon$3.VolumeType.CROSTINI,"/","/.local/share/Trash/",true)];class TrashDirs{constructor(files,info){this.files=files;this.info=info}static getDirectory(dirEntry,path,create){return new Promise(((resolve,reject)=>{dirEntry.getDirectory(path,{create:create},resolve,(()=>resolve(null)))}))}static async getTrashDirs(fileSystem,config,create){let trashRoot=fileSystem.root;const parts=config.trashDir.split("/");for(const part of parts){if(part){trashRoot=await TrashDirs.getDirectory(trashRoot,part,create);if(!trashRoot){return null}}}const files=await TrashDirs.getDirectory(trashRoot,"files",create);const info=await TrashDirs.getDirectory(trashRoot,"info",create);return files&&info?new TrashDirs(files,info):null}}class TrashEntry{constructor(name,deletionDate,filesEntry,infoEntry){this.name=name;this.filesEntry=filesEntry;this.infoEntry=infoEntry;this.deletionDate_=deletionDate;this.filesystem=filesEntry.filesystem;this.fullPath=filesEntry.fullPath;this.isDirectory=filesEntry.isDirectory;this.isFile=filesEntry.isFile;this.rootType=VolumeManagerCommon$3.RootType.TRASH;this.type_name="TrashEntry"}toURL(){return this.filesEntry.toURL()}getMetadata(success,error){this.filesEntry.getMetadata((m=>{success({modificationTime:this.deletionDate_,size:m.size})}),error)}getParent(){}remove(success,error){this.filesEntry.remove((()=>this.infoEntry.remove(success,error)),error)}file(success,error){this.filesEntry.file(success,error)}createReader(){return this.filesEntry.createReader()}getDirectory(path,options,success,error){this.filesEntry.createReader(path,options,success,error)}getFile(path,options,success,error){this.filesEntry.getFile(path,options,success,error)}removeRecursively(success,error){this.filesEntry.removeRecursively((()=>this.infoEntry.remove(success,error)),error)}get isNativeType(){return true}getNativeEntry(){return this.filesEntry}static parsePath(text){const found=text.match(/^Path=(.*)/m);return found?found[1]:null}static parseDeletionDate(text){const found=text.match(/^DeletionDate=(.*)/m);if(found){const n=Date.parse(found[1]);if(!Number.isNaN(n)){return new Date(n)}}return null}}class TrashDirectoryReader{constructor(fileSystem,config,rootLabel){this.fileSystem_=fileSystem;this.config_=config;this.rootLabel_=rootLabel;this.filesEntries_={};this.infoReader_=null}async createTrashEntry_(infoEntry){const error=(msg,text="")=>{console.warn(`${msg}: ${infoEntry.toURL()}: ${text}`);return null};if(!infoEntry.isFile){return error("Ignoring unexpected trash info directory")}if(!infoEntry.name.endsWith(".trashinfo")){return error("Ignoring unexpected trash info file")}const fileName=infoEntry.name.substring(0,infoEntry.name.length-10);const filesEntry=this.filesEntries_[fileName];delete this.filesEntries_[fileName];if(!filesEntry){return error("Ignoring trash info file with no matching files entry")}let text;try{const file=await new Promise(((resolve,reject)=>infoEntry.file(resolve,reject)));text=await file.text()}catch(e){return error("Ignoring removed file")}const path=TrashEntry.parsePath(text);if(!path){return error("Ignoring trash info file with no Path",text)}const deletionDate=TrashEntry.parseDeletionDate(text);if(!deletionDate){return error("Ignoring trash info file with invalid DeletionDate",text)}const trashName=this.rootLabel_+path.replace(/\//g," › ");return new TrashEntry(trashName,deletionDate,filesEntry,infoEntry)}async readEntriesAsync_(success,error){const ls=reader=>new Promise(((resolve,reject)=>{reader.readEntries((results=>resolve(results)),(error=>reject(error)))}));if(!this.infoReader_){const trashDirs=await TrashDirs.getTrashDirs(this.fileSystem_,this.config_,false);if(!trashDirs){return success([])}const filesReader=trashDirs.files.createReader();try{while(true){const entries=await ls(filesReader);if(!entries.length){break}entries.forEach((entry=>this.filesEntries_[entry.name]=entry))}}catch(e){console.warn("Error reading trash files entries",e);error(e);return}this.infoReader_=trashDirs.info.createReader()}const result=[];while(true){let entries=[];try{entries=await ls(this.infoReader_)}catch(e){console.warn("Error reading trash info entries",e);error(e);return}for(const e of entries){const trashEntry=await this.createTrashEntry_(e);if(trashEntry){result.push(trashEntry)}}if(!entries.length||result.length){break}}success(result)}readEntries(success,error){this.readEntriesAsync_(success,error)}}class TrashRootEntry extends FakeEntryImpl{constructor(volumeManager){super("Trash",VolumeManagerCommon$3.RootType.TRASH);this.volumeManager_=volumeManager}createReader(){const readers=[];TrashConfig.CONFIG.forEach((c=>{const info=this.volumeManager_.getCurrentProfileVolumeInfo(c.volumeType);if(info&&info.fileSystem){const locationInfo=this.volumeManager_.getLocationInfo(info.fileSystem.root);const rootLabel=util$3.getRootTypeLabel(assert(locationInfo));readers.push(new TrashDirectoryReader(info.fileSystem,c,rootLabel))}}));return new CombinedReaders(readers)}}// Copyright (c) 2012 The Chromium Authors. All rights reserved.
const NavigationModelItemType={SHORTCUT:"shortcut",VOLUME:"volume",RECENT:"recent",CROSTINI:"crostini",ENTRY_LIST:"entry-list",DRIVE:"drive",ANDROID_APP:"android-app",TRASH:"trash"};const NavigationSection={TOP:"top",MY_FILES:"my_files",REMOVABLE:"removable",CLOUD:"cloud",ANDROID_APPS:"android_apps"};class NavigationModelItem{constructor(label,type){this.label_=label;this.type_=type;this.section_=NavigationSection.TOP;this.originalOrder_=-1}get label(){return this.label_}get type(){return this.type_}get section(){return this.section_}set section(section){this.section_=section}get originalOrder(){return this.originalOrder_}set originalOrder(order){this.originalOrder_=order}}class NavigationModelShortcutItem extends NavigationModelItem{constructor(label,entry){super(label,NavigationModelItemType.SHORTCUT);this.entry_=entry}get entry(){return this.entry_}}class NavigationModelAndroidAppItem extends NavigationModelItem{constructor(androidApp){super(androidApp.name,NavigationModelItemType.ANDROID_APP);this.androidApp_=androidApp}get androidApp(){return this.androidApp_}}class NavigationModelVolumeItem extends NavigationModelItem{constructor(label,volumeInfo){super(label,NavigationModelItemType.VOLUME);this.volumeInfo_=volumeInfo;this.volumeInfo_.resolveDisplayRoot((()=>{}),(()=>{}))}get volumeInfo(){return this.volumeInfo_}}class NavigationModelFakeItem extends NavigationModelItem{constructor(label,type,entry){super(label,type);this.entry_=entry}get entry(){return this.entry_}}class NavigationListModel extends NativeEventTarget{constructor(volumeManager,shortcutListModel,recentModelItem,directoryModel,androidAppListModel){super();this.volumeManager_=volumeManager;this.shortcutListModel_=shortcutListModel;this.recentModelItem_=recentModelItem;this.directoryModel_=directoryModel;this.androidAppListModel_=androidAppListModel;this.linuxFilesItem_=null;this.trashItem_=null;this.myFilesModel_=null;this.removableModels_=new Map;this.navigationItems_=[];this.fakeDriveItem_;const volumeInfoToModelItem=volumeInfo=>new NavigationModelVolumeItem(volumeInfo.label,volumeInfo);const entryToModelItem=entry=>{const item=new NavigationModelShortcutItem(entry.name,entry);return item};const ListType={VOLUME_LIST:1,SHORTCUT_LIST:2,ANDROID_APP_LIST:3};Object.freeze(ListType);this.volumeList_=[];for(let i=0;i<this.volumeManager_.volumeInfoList.length;i++){this.volumeList_.push(volumeInfoToModelItem(this.volumeManager_.volumeInfoList.item(i)))}this.shortcutList_=[];for(let i=0;i<this.shortcutListModel_.length;i++){const shortcutEntry=this.shortcutListModel_.item(i);const volumeInfo=this.volumeManager_.getVolumeInfo(shortcutEntry);this.shortcutList_.push(entryToModelItem(shortcutEntry))}this.androidAppList_=[];for(let i=0;i<this.androidAppListModel_.length();i++){this.androidAppList_.push(this.androidAppListModel_.item(i))}this.reorderNavigationItems_();const permutedHandler=function(listType,event){let permutation;if(listType==ListType.VOLUME_LIST){const newList=[];for(let i=0;i<event.permutation.length;i++){if(event.permutation[i]>=0){newList[event.permutation[i]]=this.volumeList_[i]}}for(let i=0;i<event.newLength;i++){if(!newList[i]){newList[i]=volumeInfoToModelItem(this.volumeManager_.volumeInfoList.item(i))}}this.volumeList_=newList;permutation=event.permutation.slice();for(let i=0;i<this.shortcutList_.length;i++){permutation.push(i+this.volumeList_.length)}}else if(listType==ListType.SHORTCUT_LIST){permutation=[];for(let i=0;i<this.volumeList_.length;i++){permutation[i]=i}let modelIndex=0;let oldListIndex=0;const newList=[];while(modelIndex<this.shortcutListModel_.length&&oldListIndex<this.shortcutList_.length){const shortcutEntry=this.shortcutListModel_.item(modelIndex);const cmp=this.shortcutListModel_.compare(shortcutEntry,this.shortcutList_[oldListIndex].entry);if(cmp>0){permutation.push(-1);oldListIndex++;continue}if(cmp===0){permutation.push(newList.length+this.volumeList_.length);newList.push(this.shortcutList_[oldListIndex]);oldListIndex++}else{newList.push(entryToModelItem(shortcutEntry))}modelIndex++}for(;modelIndex<this.shortcutListModel_.length;modelIndex++){const shortcutEntry=this.shortcutListModel_.item(modelIndex);newList.push(entryToModelItem(shortcutEntry))}for(;oldListIndex<this.shortcutList_.length;oldListIndex++){permutation.push(-1)}this.shortcutList_=newList}else if(listType==ListType.ANDROID_APP_LIST){this.androidAppList_=[];for(let i=0;i<this.androidAppListModel_.length();i++){this.androidAppList_.push(this.androidAppListModel_.item(i))}}this.reorderNavigationItems_();const permutedEvent=new Event("permuted");permutedEvent.newLength=this.volumeList_.length+this.shortcutList_.length+this.androidAppList_.length;permutedEvent.permutation=permutation;this.dispatchEvent(permutedEvent)};this.volumeManager_.volumeInfoList.addEventListener("permuted",permutedHandler.bind(this,ListType.VOLUME_LIST));this.shortcutListModel_.addEventListener("permuted",permutedHandler.bind(this,ListType.SHORTCUT_LIST));this.androidAppListModel_.addEventListener("permuted",permutedHandler.bind(this,ListType.ANDROID_APP_LIST))}get length(){return this.length_()}get folderShortcutList(){return this.shortcutList_}set linuxFilesItem(item){this.linuxFilesItem_=item;this.reorderNavigationItems_()}set fakeDriveItem(item){this.fakeDriveItem_=item;this.reorderNavigationItems_()}reorderNavigationItems_(){return this.orderAndNestItems_()}orderAndNestItems_(){const volumeIndexes={};const volumeList=this.volumeList_;for(let i=0;i<volumeList.length;i++){const volumeType=volumeList[i].volumeInfo.volumeType;volumeList[i].originalOrder=i;let providedType;let volumeId;switch(volumeType){case VolumeManagerCommon$3.VolumeType.CROSTINI:case VolumeManagerCommon$3.VolumeType.DOWNLOADS:case VolumeManagerCommon$3.VolumeType.ANDROID_FILES:volumeIndexes[volumeType]=i;break;case VolumeManagerCommon$3.VolumeType.PROVIDED:volumeId=volumeList[i].volumeInfo.volumeId;providedType=VolumeManagerCommon$3.VolumeType.PROVIDED;if(volumeId.includes(NavigationListModel.ZIP_EXTENSION_ID)){providedType=NavigationListModel.ZIP_VOLUME_TYPE}if(!volumeIndexes[providedType]){volumeIndexes[providedType]=[i]}else{volumeIndexes[providedType].push(i)}break;case VolumeManagerCommon$3.VolumeType.REMOVABLE:case VolumeManagerCommon$3.VolumeType.ARCHIVE:case VolumeManagerCommon$3.VolumeType.MTP:case VolumeManagerCommon$3.VolumeType.DRIVE:case VolumeManagerCommon$3.VolumeType.MEDIA_VIEW:case VolumeManagerCommon$3.VolumeType.DOCUMENTS_PROVIDER:case VolumeManagerCommon$3.VolumeType.SMB:if(!volumeIndexes[volumeType]){volumeIndexes[volumeType]=[i]}else{volumeIndexes[volumeType].push(i)}break;default:assertNotReached(`No explict order for VolumeType: "${volumeType}"`);break}}const getSingleVolume=volumeType=>volumeList[volumeIndexes[volumeType]];const getVolumes=volumeType=>{const indexes=volumeIndexes[volumeType]||[];return indexes.map((idx=>volumeList[idx]))};const groupRemovables=()=>{const removableGroups=new Map;const removableVolumes=getVolumes(VolumeManagerCommon$3.VolumeType.REMOVABLE);for(const removable of removableVolumes){const key=removable.volumeInfo.devicePath+"/"+removable.volumeInfo.driveLabel;if(!removableGroups.has(key)){removableGroups.set(key,[])}removableGroups.get(key).push(removable)}return removableGroups};const createFilteredRecentModelItem=(label,fileType,rootType)=>{const entry=Object.assign(Object.create(FakeEntryImpl.prototype),this.recentModelItem_.entry);entry.recentFileType=fileType;entry.rootType=rootType;return new NavigationModelFakeItem(label,NavigationModelItemType.RECENT,entry)};this.navigationItems_=[];if(this.recentModelItem_){this.navigationItems_.push(this.recentModelItem_);if(util$3.isUnifiedMediaViewEnabled()&&!util$3.isRecentsFilterEnabled()){this.navigationItems_.push(createFilteredRecentModelItem(str("MEDIA_VIEW_AUDIO_ROOT_LABEL"),chrome.fileManagerPrivate.RecentFileType.AUDIO,VolumeManagerCommon$3.RootType.RECENT_AUDIO));this.navigationItems_.push(createFilteredRecentModelItem(str("MEDIA_VIEW_IMAGES_ROOT_LABEL"),chrome.fileManagerPrivate.RecentFileType.IMAGE,VolumeManagerCommon$3.RootType.RECENT_IMAGES));this.navigationItems_.push(createFilteredRecentModelItem(str("MEDIA_VIEW_VIDEOS_ROOT_LABEL"),chrome.fileManagerPrivate.RecentFileType.VIDEO,VolumeManagerCommon$3.RootType.RECENT_VIDEOS))}}if(!util$3.isUnifiedMediaViewEnabled()){for(const mediaView of getVolumes(VolumeManagerCommon$3.VolumeType.MEDIA_VIEW)){this.navigationItems_.push(mediaView);mediaView.section=NavigationSection.TOP}}for(const shortcut of this.shortcutList_){this.navigationItems_.push(shortcut)}let myFilesEntry,myFilesModel;if(!this.myFilesModel_){const myFilesVolumeModel=getSingleVolume(VolumeManagerCommon$3.VolumeType.DOWNLOADS);if(myFilesVolumeModel){myFilesEntry=new VolumeEntry(myFilesVolumeModel.volumeInfo);myFilesModel=new NavigationModelFakeItem(str("MY_FILES_ROOT_LABEL"),NavigationModelItemType.ENTRY_LIST,myFilesEntry);myFilesModel.section=NavigationSection.MY_FILES;this.myFilesModel_=myFilesModel}else{myFilesEntry=new EntryList(str("MY_FILES_ROOT_LABEL"),VolumeManagerCommon$3.RootType.MY_FILES);myFilesModel=new NavigationModelFakeItem(myFilesEntry.label,NavigationModelItemType.ENTRY_LIST,myFilesEntry);myFilesModel.section=NavigationSection.MY_FILES}}else{myFilesEntry=this.myFilesModel_.entry;myFilesModel=this.myFilesModel_}this.directoryModel_.setMyFiles(myFilesEntry);this.navigationItems_.push(myFilesModel);const androidVolume=getSingleVolume(VolumeManagerCommon$3.VolumeType.ANDROID_FILES);if(androidVolume){if(myFilesEntry.findIndexByVolumeInfo(androidVolume.volumeInfo)===-1){myFilesEntry.addEntry(new VolumeEntry(androidVolume.volumeInfo))}}else{myFilesEntry.removeByVolumeType(VolumeManagerCommon$3.VolumeType.ANDROID_FILES)}const crostiniVolume=getSingleVolume(VolumeManagerCommon$3.VolumeType.CROSTINI);myFilesEntry.removeByRootType(VolumeManagerCommon$3.RootType.CROSTINI);if(crostiniVolume){if(myFilesEntry.findIndexByVolumeInfo(crostiniVolume.volumeInfo)===-1){myFilesEntry.addEntry(new VolumeEntry(crostiniVolume.volumeInfo))}}else{myFilesEntry.removeByVolumeType(VolumeManagerCommon$3.VolumeType.CROSTINI);if(this.linuxFilesItem_){this.linuxFilesItem_.entry.navigationModel=this.linuxFilesItem_;myFilesEntry.addEntry(this.linuxFilesItem_.entry)}}if(loadTimeData.getBoolean("FILES_TRASH_ENABLED")){if(!this.trashItem_){this.trashItem_=new NavigationModelFakeItem(str("TRASH_ROOT_LABEL"),NavigationModelItemType.TRASH,new TrashRootEntry(this.volumeManager_))}myFilesEntry.removeByRootType(VolumeManagerCommon$3.RootType.TRASH);myFilesEntry.addEntry(this.trashItem_.entry)}let hasDrive=false;for(const driveItem of getVolumes(VolumeManagerCommon$3.VolumeType.DRIVE)){this.navigationItems_.push(driveItem);driveItem.section=NavigationSection.CLOUD;hasDrive=true}if(!hasDrive&&this.fakeDriveItem_){this.navigationItems_.push(this.fakeDriveItem_);this.fakeDriveItem_.section=NavigationSection.CLOUD}for(const provided of getVolumes(VolumeManagerCommon$3.VolumeType.SMB)){this.navigationItems_.push(provided);provided.section=NavigationSection.CLOUD}for(const provided of getVolumes(VolumeManagerCommon$3.VolumeType.PROVIDED)){this.navigationItems_.push(provided);provided.section=NavigationSection.CLOUD}for(const provider of getVolumes(VolumeManagerCommon$3.VolumeType.DOCUMENTS_PROVIDER)){this.navigationItems_.push(provider);provider.section=NavigationSection.CLOUD}const removableModels=new Map;for(const[devicePath,removableGroup]of groupRemovables().entries()){if(removableGroup.length==1&&!util$3.isSinglePartitionFormatEnabled()){this.navigationItems_.push(removableGroup[0]);removableGroup[0].section=NavigationSection.REMOVABLE;continue}let removableModel;let removableEntry;if(this.removableModels_.has(devicePath)){removableModel=this.removableModels_.get(devicePath);removableEntry=removableModel.entry}else{const rootLabel=removableGroup[0].volumeInfo.driveLabel?removableGroup[0].volumeInfo.driveLabel:"External Drive";removableEntry=new EntryList(rootLabel,VolumeManagerCommon$3.RootType.REMOVABLE,removableGroup[0].volumeInfo.devicePath);removableModel=new NavigationModelFakeItem(removableEntry.label,NavigationModelItemType.ENTRY_LIST,removableEntry);removableModel.section=NavigationSection.REMOVABLE}const existingVolumeInfos=new Set(removableGroup.map((p=>p.volumeInfo)));for(const partition of removableEntry.getUIChildren()){if(!existingVolumeInfos.has(partition.volumeInfo)){removableEntry.removeChildEntry(partition)}}for(const partition of removableGroup){if(removableEntry.findIndexByVolumeInfo(partition.volumeInfo)===-1){removableEntry.addEntry(new VolumeEntry(partition.volumeInfo))}}removableModels.set(devicePath,removableModel);this.navigationItems_.push(removableModel)}this.removableModels_=removableModels;const zipIndexes=volumeIndexes[NavigationListModel.ZIP_VOLUME_TYPE]||[];const otherVolumes=[].concat(getVolumes(VolumeManagerCommon$3.VolumeType.ARCHIVE),getVolumes(VolumeManagerCommon$3.VolumeType.MTP),zipIndexes.map((idx=>volumeList[idx]))).sort(((volume1,volume2)=>volume1.originalOrder-volume2.originalOrder));for(const volume of otherVolumes){this.navigationItems_.push(volume);volume.section=NavigationSection.REMOVABLE}for(const androidApp of this.androidAppList_){const androidAppItem=new NavigationModelAndroidAppItem(androidApp);androidAppItem.section=NavigationSection.ANDROID_APPS;this.navigationItems_.push(androidAppItem)}}item(index){return this.navigationItems_[index]}length_(){return this.navigationItems_.length}indexOf(modelItem,opt_fromIndex){for(let i=opt_fromIndex||0;i<this.length;i++){if(modelItem===this.item(i)){return i}}return-1}onItemNotFoundError(modelItem){if(modelItem.type===NavigationModelItemType.SHORTCUT){this.shortcutListModel_.onItemNotFoundError(modelItem.entry)}}findDownloadsVolumeIndex_(){for(let i=0;i<this.volumeList_.length;i++){if(this.volumeList_[i].volumeInfo.volumeType==VolumeManagerCommon$3.VolumeType.DOWNLOADS){return i}}return-1}}NavigationListModel.ZIP_VOLUME_TYPE="_ZIP_VOLUME_";NavigationListModel.ZIP_EXTENSION_ID="dmboannefpncccogfdikhmhpmdnddgoe";// Copyright (c) 2011 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
var EventTracker=class{constructor(){this.listeners_=[]}add(target,eventType,listener,opt_capture){const capture=!!opt_capture;const h={target:target,eventType:eventType,listener:listener,capture:capture};this.listeners_.push(h);target.addEventListener(eventType,listener,capture)}remove(target,eventType){this.listeners_=this.listeners_.filter((listener=>{if(listener.target===target&&(!eventType||listener.eventType===eventType)){EventTracker.removeEventListener(listener);return false}return true}))}removeAll(){this.listeners_.forEach((listener=>EventTracker.removeEventListener(listener)));this.listeners_=[]}static removeEventListener(entry){entry.target.removeEventListener(entry.eventType,entry.listener,entry.capture)}};// Copyright (c) 2012 The Chromium Authors. All rights reserved.
const AnchorType={BEFORE:1,AFTER:2,ABOVE:3,BELOW:4};function positionPopupAroundRect(anchorRect,popupElement,type,opt_invertLeftRight){const popupRect=popupElement.getBoundingClientRect();let availRect;const ownerDoc=popupElement.ownerDocument;const cs=ownerDoc.defaultView.getComputedStyle(popupElement);const docElement=ownerDoc.documentElement;if(cs.position==="fixed"){availRect={height:docElement.clientHeight,width:docElement.clientWidth,top:0,bottom:docElement.clientHeight,left:0,right:docElement.clientWidth}}else{availRect=popupElement.offsetParent.getBoundingClientRect()}if(cs.direction==="rtl"){opt_invertLeftRight=!opt_invertLeftRight}if(opt_invertLeftRight){if(type===AnchorType.BEFORE){type=AnchorType.AFTER}else if(type===AnchorType.AFTER){type=AnchorType.BEFORE}}switch(type){case AnchorType.BELOW:if(anchorRect.bottom+popupRect.height>availRect.height&&popupRect.height<=anchorRect.top){type=AnchorType.ABOVE}break;case AnchorType.ABOVE:if(popupRect.height>anchorRect.top&&anchorRect.bottom+popupRect.height<=availRect.height){type=AnchorType.BELOW}break;case AnchorType.AFTER:if(anchorRect.right+popupRect.width>availRect.width&&popupRect.width<=anchorRect.left){type=AnchorType.BEFORE}break;case AnchorType.BEFORE:if(popupRect.width>anchorRect.left&&anchorRect.right+popupRect.width<=availRect.width){type=AnchorType.AFTER}break}const style=popupElement.style;style.left=style.right=style.top=style.bottom="auto";switch(type){case AnchorType.BELOW:if(anchorRect.bottom+popupRect.height<=availRect.height){style.top=anchorRect.bottom+"px"}else{style.bottom="0"}break;case AnchorType.ABOVE:if(availRect.height-anchorRect.top>=0){style.bottom=availRect.height-anchorRect.top+"px"}else{style.top="0"}break;case AnchorType.AFTER:if(anchorRect.right+popupRect.width<=availRect.width){style.left=anchorRect.right+"px"}else{style.right="0"}break;case AnchorType.BEFORE:if(availRect.width-anchorRect.left>=0){style.right=availRect.width-anchorRect.left+"px"}else{style.left="0"}break}switch(type){case AnchorType.BELOW:case AnchorType.ABOVE:if(opt_invertLeftRight){if(anchorRect.right-popupRect.width>=0){style.right=availRect.width-anchorRect.right+"px"}else if(anchorRect.left+popupRect.width<=availRect.width){style.left=anchorRect.left+"px"}else{style.right="0"}}else{if(anchorRect.left+popupRect.width<=availRect.width){style.left=anchorRect.left+"px"}else if(anchorRect.right-popupRect.width>=0){style.right=availRect.width-anchorRect.right+"px"}else{style.left="0"}}break;case AnchorType.AFTER:case AnchorType.BEFORE:if(anchorRect.top+popupRect.height<=availRect.height){style.top=anchorRect.top+"px"}else if(anchorRect.bottom-popupRect.height>=0){style.bottom=availRect.height-anchorRect.bottom+"px"}else{style.top="0"}break}}function positionPopupAroundElement(anchorElement,popupElement,type,opt_invertLeftRight){const anchorRect=anchorElement.getBoundingClientRect();positionPopupAroundRect(anchorRect,popupElement,type,!!opt_invertLeftRight)}function positionPopupAtPoint(x,y,popupElement,opt_anchorType){const rect={left:x,top:y,width:0,height:0,right:x,bottom:y};const anchorType=opt_anchorType||AnchorType.BELOW;positionPopupAroundRect(rect,popupElement,anchorType)}
// Copyright (c) 2012 The Chromium Authors. All rights reserved.
const HideType={INSTANT:0,DELAYED:1};const MenuButton=define("button");MenuButton.prototype={__proto__:HTMLButtonElement.prototype,decorate(){this.ownerDocument.addEventListener("touchstart",this);this.addEventListener("mousedown",this);this.addEventListener("keydown",this);this.addEventListener("dblclick",this);this.addEventListener("blur",this);this.classList.add("custom-appearance");this.classList.add("menu-button");let menu;if(menu=this.getAttribute("menu")){this.menu=menu}this.showingEvents_=new EventTracker;this.anchorType=AnchorType.BELOW;this.invertLeftRight=false},get menu(){return this.menu_},set menu(menu){if(typeof menu==="string"&&menu[0]==="#"){menu=assert(this.ownerDocument.getElementById(menu.slice(1)));decorate(menu,Menu)}this.menu_=menu;if(menu){if(menu.id){this.setAttribute("menu","#"+menu.id)}}},respondToArrowKeys:true,shouldDismissMenu_(e){return e.target instanceof Node&&!this.contains(e.target)&&!this.menu.contains(e.target)},handleEvent(e){if(!this.menu){return}switch(e.type){case"touchstart":if(this.shouldDismissMenu_(e)){this.hideMenuWithoutTakingFocus_()}break;case"mousedown":if(e.currentTarget===this.ownerDocument){if(this.shouldDismissMenu_(e)){this.hideMenuWithoutTakingFocus_()}else{e.preventDefault()}}else{if(this.isMenuShown()){this.hideMenuWithoutTakingFocus_()}else if(e.button===0){this.showMenu(false,{x:e.screenX,y:e.screenY});e.preventDefault()}}this.classList.add("using-mouse");break;case"keydown":this.handleKeyDown(e);if(this.isMenuShown()&&e.currentTarget===this.ownerDocument){this.menu.handleKeyDown(e);e.preventDefault();e.stopPropagation()}this.classList.remove("using-mouse");break;case"focus":if(this.shouldDismissMenu_(e)){this.hideMenu();this.classList.remove("using-mouse")}break;case"blur":this.classList.remove("using-mouse");break;case"activate":const hideDelayed=e.target instanceof MenuItem&&e.target.checkable;const hideType=hideDelayed?HideType.DELAYED:HideType.INSTANT;if(e.originalEvent instanceof MouseEvent||e.originalEvent instanceof TouchEvent){this.hideMenuWithoutTakingFocus_(hideType)}else{this.hideMenu(hideType)}break;case"scroll":if(!(e.target===this.menu||this.menu.contains(e.target))){this.hideMenu()}break;case"popstate":case"resize":this.hideMenu();break;case"contextmenu":if((!this.menu||!this.menu.contains(e.target))&&(!this.hideTimestamp_||Date.now()-this.hideTimestamp_>50)){this.showMenu(true,{x:e.screenX,y:e.screenY})}e.preventDefault();e.stopPropagation();break;case"dblclick":e.preventDefault();e.stopPropagation();break}},showMenu(shouldSetFocus,opt_mousePos){this.hideMenu();this.menu.updateCommands(this);const event=new UIEvent("menushow",{bubbles:true,cancelable:true,view:window});if(!this.dispatchEvent(event)){return}this.menu.show(opt_mousePos);this.setAttribute("menu-shown","");const doc=this.ownerDocument;const win=doc.defaultView;this.showingEvents_.add(doc,"keydown",this,true);this.showingEvents_.add(doc,"mousedown",this,true);this.showingEvents_.add(doc,"focus",this,true);this.showingEvents_.add(doc,"scroll",this,true);this.showingEvents_.add(win,"popstate",this);this.showingEvents_.add(win,"resize",this);this.showingEvents_.add(this.menu,"contextmenu",this);this.showingEvents_.add(this.menu,"activate",this);this.positionMenu_();if(shouldSetFocus){this.menu.focusSelectedItem()}},hideMenu(opt_hideType){this.hideMenuInternal_(true,opt_hideType)},hideMenuWithoutTakingFocus_(opt_hideType){this.hideMenuInternal_(false,opt_hideType)},hideMenuInternal_(shouldTakeFocus,opt_hideType){if(!this.isMenuShown()){return}this.removeAttribute("menu-shown");if(opt_hideType===HideType.DELAYED){this.menu.classList.add("hide-delayed")}else{this.menu.classList.remove("hide-delayed")}this.menu.hide();this.showingEvents_.removeAll();if(shouldTakeFocus){this.focus()}const event=new UIEvent("menuhide",{bubbles:true,cancelable:false,view:window});this.dispatchEvent(event);this.hideTimestamp_=isWindows?Date.now():0},isMenuShown(){return this.hasAttribute("menu-shown")},positionMenu_(){positionPopupAroundElement(this,this.menu,this.anchorType,this.invertLeftRight)},handleKeyDown(e){switch(e.key){case"ArrowDown":case"ArrowUp":if(!this.respondToArrowKeys){break}case"Enter":case" ":if(!this.isMenuShown()){this.showMenu(true)}e.preventDefault();break;case"Escape":case"Tab":this.hideMenu();break}}};
// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class ContextMenuHandler extends NativeEventTarget{constructor(){super();this.showingEvents_=new EventTracker;this.menu_=null;this.hideTimestamp_=null;this.keyIsDown_=false}get menu(){return this.menu_}showMenu(e,menu){menu.updateCommands(assertInstanceof(e.currentTarget,Node));if(!menu.hasVisibleItems()){return}this.menu_=menu;menu.classList.remove("hide-delayed");menu.show({x:e.screenX,y:e.screenY});menu.contextElement=e.currentTarget;const doc=menu.ownerDocument;const win=doc.defaultView;this.showingEvents_.add(doc,"keydown",this,true);this.showingEvents_.add(doc,"mousedown",this,true);this.showingEvents_.add(doc,"touchstart",this,true);this.showingEvents_.add(doc,"focus",this);this.showingEvents_.add(win,"popstate",this);this.showingEvents_.add(win,"resize",this);this.showingEvents_.add(win,"blur",this);this.showingEvents_.add(menu,"contextmenu",this);this.showingEvents_.add(menu,"activate",this);this.positionMenu_(e,menu);const ev=new Event("show");ev.element=menu.contextElement;ev.menu=menu;this.dispatchEvent(ev)}hideMenu(opt_hideType){const menu=this.menu;if(!menu){return}if(opt_hideType===HideType.DELAYED){menu.classList.add("hide-delayed")}else{menu.classList.remove("hide-delayed")}menu.hide();const originalContextElement=menu.contextElement;menu.contextElement=null;this.showingEvents_.removeAll();menu.selectedIndex=-1;this.menu_=null;this.hideTimestamp_=isWindows?Date.now():0;const ev=new Event("hide");ev.element=originalContextElement;ev.menu=menu;this.dispatchEvent(ev)}positionMenu_(e,menu){const element=e.currentTarget;let x,y;if(this.keyIsDown_){const rect=element.getRectForContextMenu?element.getRectForContextMenu():element.getBoundingClientRect();const offset=Math.min(rect.width,rect.height)/2;x=rect.left+offset;y=rect.top+offset}else{x=e.clientX;y=e.clientY}positionPopupAtPoint(x,y,menu)}handleEvent(e){switch(e.type){case"keydown":this.keyIsDown_=!e.ctrlKey&&!e.altKey&&(e.keyCode===93&&!e.shiftKey||e.key==="F10"&&e.shiftKey);break;case"keyup":this.keyIsDown_=false;break}if(e.type!=="contextmenu"&&!this.menu){return}switch(e.type){case"mousedown":if(!this.menu.contains(e.target)){this.hideMenu();if(e.button===0&&(isLinux||isMac||isLacros)){e.preventDefault();e.stopPropagation()}}else{e.preventDefault()}break;case"touchstart":if(!this.menu.contains(e.target)){this.hideMenu()}break;case"keydown":if(e.key==="Escape"){this.hideMenu();e.stopPropagation();e.preventDefault()}else if(this.menu){this.menu.handleKeyDown(e);e.preventDefault();e.stopPropagation()}break;case"activate":const hideDelayed=e.target instanceof MenuItem&&e.target.checkable;this.hideMenu(hideDelayed?HideType.DELAYED:HideType.INSTANT);break;case"focus":if(!this.menu.contains(e.target)){this.hideMenu()}break;case"blur":this.hideMenu();break;case"popstate":case"resize":this.hideMenu();break;case"contextmenu":if((!this.menu||!this.menu.contains(e.target))&&(!this.hideTimestamp_||Date.now()-this.hideTimestamp_>50)){this.showMenu(e,e.currentTarget.contextMenu)}e.preventDefault();e.stopPropagation();break}}addContextMenuProperty(elementOrClass){const target=typeof elementOrClass==="function"?elementOrClass.prototype:elementOrClass;target.__defineGetter__("contextMenu",(function(){return this.contextMenu_}));target.__defineSetter__("contextMenu",(function(menu){const oldContextMenu=this.contextMenu;if(typeof menu==="string"&&menu[0]==="#"){menu=this.ownerDocument.getElementById(menu.slice(1));decorate(menu,Menu)}if(menu===oldContextMenu){return}if(oldContextMenu&&!menu){this.removeEventListener("contextmenu",contextMenuHandler);this.removeEventListener("keydown",contextMenuHandler);this.removeEventListener("keyup",contextMenuHandler)}if(menu&&!oldContextMenu){this.addEventListener("contextmenu",contextMenuHandler);this.addEventListener("keydown",contextMenuHandler);this.addEventListener("keyup",contextMenuHandler)}this.contextMenu_=menu;if(menu&&menu.id){this.setAttribute("contextmenu","#"+menu.id)}dispatchPropertyChange(this,"contextMenu",menu,oldContextMenu)}));if(!target.getRectForContextMenu){target.getRectForContextMenu=function(){return this.getBoundingClientRect()}}}setContextMenu(element,contextMenu){if(!element.contextMenu){this.addContextMenuProperty(element)}element.contextMenu=contextMenu}}const contextMenuHandler=new ContextMenuHandler;
// Copyright (c) 2012 The Chromium Authors. All rights reserved.
const INDENT=20;let customRowElementDepthStyleHandler=undefined;function getComputedStyle$2(el){return assert(el.ownerDocument.defaultView.getComputedStyle(el))}function findTreeItem(node){while(node&&!(node instanceof TreeItem)){node=node.parentNode}return node}const Tree=define("tree");Tree.prototype={__proto__:HTMLElement.prototype,decorate(){if(!this.hasAttribute("tabindex")){this.tabIndex=0}this.addEventListener("click",this.handleClick);this.addEventListener("mousedown",this.handleMouseDown);this.addEventListener("dblclick",this.handleDblClick);this.addEventListener("keydown",this.handleKeyDown);if(!this.hasAttribute("role")){this.setAttribute("role","tree")}},get rowElementDepthStyleHandler(){return customRowElementDepthStyleHandler},set rowElementDepthStyleHandler(handler){customRowElementDepthStyleHandler=handler},get items(){return this.children},add(treeItem){this.addAt(treeItem,4294967295)},addAt(treeItem,index){this.insertBefore(treeItem,this.children[index]);treeItem.setDepth_(this.depth+1)},remove(treeItem){this.removeChild(treeItem)},get depth(){return 0},handleClick(e){const treeItem=findTreeItem(e.target);if(treeItem){treeItem.handleClick(e)}},handleMouseDown(e){if(e.button===2){this.handleClick(e)}},handleDblClick(e){const treeItem=findTreeItem(e.target);if(treeItem){treeItem.expanded=!treeItem.expanded}},handleKeyDown(e){let itemToSelect;if(e.ctrlKey){return}const item=this.selectedItem;if(!item){return}const rtl=getComputedStyle$2(item).direction==="rtl";switch(e.key){case"ArrowUp":itemToSelect=item?getPrevious(item):this.items[this.items.length-1];break;case"ArrowDown":itemToSelect=item?getNext(item):this.items[0];break;case"ArrowLeft":case"ArrowRight":if(!isMac&&e.altKey||isMac&&e.metaKey){break}if(e.key==="ArrowLeft"&&!rtl||e.key==="ArrowRight"&&rtl){if(item.expanded){item.expanded=false}else{itemToSelect=findTreeItem(item.parentNode)}}else{if(!item.expanded){item.expanded=true}else{itemToSelect=item.items[0]}}break;case"Home":itemToSelect=this.items[0];break;case"End":itemToSelect=this.items[this.items.length-1];break}if(itemToSelect){itemToSelect.selected=true;e.preventDefault()}},get selectedItem(){return this.selectedItem_||null},set selectedItem(item){const oldSelectedItem=this.selectedItem_;if(oldSelectedItem!==item){this.selectedItem_=item;if(oldSelectedItem){oldSelectedItem.selected=false}if(item){item.selected=true;if(item.id){this.setAttribute("aria-activedescendant",item.id)}}else{this.removeAttribute("aria-activedescendant")}dispatchSimpleEvent(this,"change")}},getRectForContextMenu(){if(this.selectedItem){return this.selectedItem.rowElement.getBoundingClientRect()}return this.getBoundingClientRect()}};Tree.prototype.iconVisibility;Object.defineProperty(Tree.prototype,"iconVisibility",getPropertyDescriptor("iconVisibility",PropertyKind.ATTR));let treeItemAutoGeneratedIdCounter=0;const treeItemProto=function(){const treeItem=document.createElement("div");treeItem.className="tree-item";const htmlString='<div class="tree-row">'+'<span class="expand-icon"></span>'+'<span class="tree-label-icon"></span>'+'<span class="tree-label"></span>'+"</div>"+'<div class="tree-children" role="group"></div>';if(window.trustedTypes){const staticHtmlPolicy=trustedTypes.createPolicy("cr-ui-tree-js-static",{createHTML:()=>htmlString});treeItem.innerHTML=staticHtmlPolicy.createHTML("")}else{treeItem.innerHTML=htmlString}treeItem.setAttribute("role","treeitem");return treeItem}();const TreeItem=define((function(){const treeItem=treeItemProto.cloneNode(true);treeItem.id="tree-item-autogen-id-"+treeItemAutoGeneratedIdCounter++;return treeItem}));TreeItem.prototype={__proto__:HTMLElement.prototype,decorate(){const labelId="tree-item-label-autogen-id-"+treeItemAutoGeneratedIdCounter;this.labelElement.id=labelId;this.setAttribute("aria-labelledby",labelId)},get items(){return this.lastElementChild.children},depth_:0,get depth(){return this.depth_},setDepth_(depth){if(depth!==this.depth_){const rowDepth=Math.max(0,depth-1);if(!customRowElementDepthStyleHandler){this.rowElement.style.paddingInlineStart=rowDepth*INDENT+"px"}else{customRowElementDepthStyleHandler(this,rowDepth)}this.depth_=depth;const items=this.items;for(let i=0,item;item=items[i];i++){item.setDepth_(depth+1)}}},add(child){this.addAt(child,4294967295)},addAt(child,index){this.lastElementChild.insertBefore(child,this.items[index]);if(this.items.length===1){this.hasChildren=true}child.setDepth_(this.depth+1)},remove(child){const tree=this.tree;const selectedItem=tree.selectedItem;if(selectedItem&&child.contains(selectedItem)){this.selected=true}this.lastElementChild.removeChild(child);if(this.items.length===0){this.hasChildren=false}},get parentItem(){let p=this.parentNode;while(p&&!(p instanceof TreeItem)&&!(p instanceof Tree)){p=p.parentNode}return p},get tree(){let t=this.parentItem;while(t&&!(t instanceof Tree)){t=t.parentItem}return t},get expanded(){return this.hasAttribute("expanded")},set expanded(b){if(this.expanded===b){return}const treeChildren=this.lastElementChild;if(b){if(this.mayHaveChildren_){this.setAttribute("expanded","");this.setAttribute("aria-expanded","true");treeChildren.setAttribute("expanded","");dispatchSimpleEvent(this,"expand",true);this.scrollIntoViewIfNeeded(false)}}else{const tree=this.tree;if(tree&&!this.selected){const oldSelected=tree.selectedItem;if(oldSelected&&this.contains(oldSelected)){this.selected=true}}this.removeAttribute("expanded");if(this.mayHaveChildren_){this.setAttribute("aria-expanded","false")}else{this.removeAttribute("aria-expanded")}treeChildren.removeAttribute("expanded");dispatchSimpleEvent(this,"collapse",true)}},reveal(){let pi=this.parentItem;while(pi&&!(pi instanceof Tree)){pi.expanded=true;pi=pi.parentItem}},get rowElement(){return this.firstElementChild},get labelElement(){return this.rowElement.lastElementChild},get label(){return this.labelElement.textContent},set label(s){this.labelElement.textContent=s},get selected(){return this.hasAttribute("selected")},set selected(b){if(this.selected===b){return}const rowItem=this.rowElement;const tree=this.tree;if(b){this.setAttribute("selected","");rowItem.setAttribute("selected","");this.reveal();this.labelElement.scrollIntoViewIfNeeded(false);if(tree){tree.selectedItem=this}}else{this.removeAttribute("selected");rowItem.removeAttribute("selected");if(tree&&tree.selectedItem===this){tree.selectedItem=null}}},get mayHaveChildren_(){return this.hasAttribute("may-have-children")},set mayHaveChildren_(b){const rowItem=this.rowElement;if(b){this.setAttribute("may-have-children","");rowItem.setAttribute("may-have-children","")}else{this.removeAttribute("may-have-children");rowItem.removeAttribute("may-have-children")}},get hasChildren(){return!!this.items[0]},set hasChildren(b){const rowItem=this.rowElement;this.setAttribute("has-children",b);rowItem.setAttribute("has-children",b);if(b){this.mayHaveChildren_=true;this.setAttribute("aria-expanded",this.expanded)}},handleClick(e){if(e.target.className==="expand-icon"){this.expanded=!this.expanded}else{this.selected=true}},set editing(editing){const oldEditing=this.editing;if(editing===oldEditing){return}const self=this;const labelEl=this.labelElement;const text=this.label;let input;function handleKeydown(e){e.stopPropagation();switch(e.key){case"Escape":input.value=text;case"Enter":self.tree.focus()}}function stopPropagation(e){e.stopPropagation()}if(editing){this.selected=true;this.setAttribute("editing","");this.draggable=false;input=this.ownerDocument.createElement("input");input.value=text;if(labelEl.firstChild){labelEl.replaceChild(input,labelEl.firstChild)}else{labelEl.appendChild(input)}input.addEventListener("keydown",handleKeydown);input.addEventListener("blur",function(){this.editing=false}.bind(this));const eventsToStop=["mousedown","mouseup","contextmenu","dblclick"];eventsToStop.forEach((function(type){input.addEventListener(type,stopPropagation)}));const rowElement=this.rowElement;const onFocus=function(){input.removeEventListener("focus",onFocus);limitInputWidth(input,rowElement,100)};input.addEventListener("focus",onFocus);input.focus();input.select();this.oldLabel_=text}else{this.removeAttribute("editing");this.draggable=true;input=labelEl.firstChild;const value=input.value;if(/^\s*$/.test(value)){labelEl.textContent=this.oldLabel_}else{labelEl.textContent=value;if(value!==this.oldLabel_){dispatchSimpleEvent(this,"rename",true)}}delete this.oldLabel_}},get editing(){return this.hasAttribute("editing")}};function getNext(item){if(item.expanded){const firstChild=item.items[0];if(firstChild){return firstChild}}return getNextHelper(item)}function getNextHelper(item){if(!item){return null}const nextSibling=item.nextElementSibling;if(nextSibling){return assertInstanceof(nextSibling,TreeItem)}return getNextHelper(item.parentItem)}function getPrevious(item){const previousSibling=item.previousElementSibling;if(previousSibling){return getLastHelper(assertInstanceof(previousSibling,TreeItem))}return item.parentItem}function getLastHelper(item){if(!item){return null}if(item.expanded&&item.hasChildren){const lastChild=item.items[item.items.length-1];return getLastHelper(lastChild)}return item}
// Copyright (c) 2013 The Chromium Authors. All rights reserved.
const directorytree={};const DirectoryItemTreeBaseMethods={};DirectoryItemTreeBaseMethods.getItemByEntry=function(entry){for(let i=0;i<this.items.length;i++){const item=this.items[i];if(!item.entry){continue}if(util$3.isSameEntry(item.entry,entry)){if(item instanceof DriveVolumeItem){return item.getItemByEntry(entry)}return item}if(util$3.isSharedDriveEntry(entry)&&item instanceof DriveVolumeItem){return item.getItemByEntry(entry)}if(util$3.isComputersEntry(entry)&&item instanceof DriveVolumeItem){return item.getItemByEntry(entry)}if(util$3.isDescendantEntry(item.entry,entry)){return item.getItemByEntry(entry)}}return null};DirectoryItemTreeBaseMethods.searchAndSelectByEntry=async function(entry){for(let i=0;i<this.items.length;i++){const item=this.items[i];if(!item.entry){continue}if(util$3.isSharedDriveEntry(entry)&&item instanceof DriveVolumeItem){await item.selectByEntry(entry);return true}if(util$3.isComputersEntry(entry)&&item instanceof DriveVolumeItem){await item.selectByEntry(entry);return true}if(util$3.isDescendantEntry(item.entry,entry)||util$3.isSameEntry(item.entry,entry)){await item.selectByEntry(entry);return true}}return false};DirectoryItemTreeBaseMethods.recordUMASelectedEntry=(e,rootType,isRootEntry)=>{const expandIconSelected=e.target.classList.contains("expand-icon");let metricName="Location.OnEntrySelected.TopLevel";if(!expandIconSelected&&isRootEntry){metricName="Location.OnEntrySelected.TopLevel"}else if(!expandIconSelected&&!isRootEntry){metricName="Location.OnEntrySelected.NonTopLevel"}else if(expandIconSelected&&isRootEntry){metricName="Location.OnEntryExpandedOrCollapsed.TopLevel"}else if(expandIconSelected&&!isRootEntry){metricName="Location.OnEntryExpandedOrCollapsed.NonTopLevel"}metrics.recordEnum(metricName,rootType,VolumeManagerCommon$3.RootTypesForUMA)};Object.freeze(DirectoryItemTreeBaseMethods);directorytree.createRowElementContent=(id,label)=>`\n    <div class='file-row'>\n     <span class='expand-icon'></span>\n     <span class='icon'></span>\n     <span class='label entry-name' id='${id}'>${label}</span>\n    </div>`;directorytree.styleRowElementDepth=(item,depth)=>{const fileRowElement=item.rowElement.firstElementChild;const indent=depth*22;let style="padding-inline-start: "+indent+"px";const width=indent+60;style+="; min-width: "+width+"px;";fileRowElement.setAttribute("style",style)};class FilesTreeItem extends TreeItem{constructor(label,tree){super();const id=this.labelElement.id;this.__proto__=FilesTreeItem.prototype;if(window.IN_TEST){this.setAttribute("entry-label",label)}this.parentTree_=tree;const innerHTML=directorytree.createRowElementContent(id,label);this.rowElement.innerHTML=innerHTML}get labelElement(){return this.rowElement.querySelector(".label")}updateExpandIcon(){}activate(){}handleClick(e){super.handleClick(e);if(e.button===2){return}if(e.target.classList.contains("expand-icon")){return}this.activate()}}class DirectoryItem extends FilesTreeItem{constructor(label,tree){super(label,tree);this.__proto__=DirectoryItem.prototype;if(window.IN_TEST){this.setAttribute("dir-type","DirectoryItem")}this.directoryModel_=tree.directoryModel;this.fileFilter_=tree.directoryModel.getFileFilter();this.addEventListener("expand",this.onExpand_.bind(this),false);this.addEventListener("collapse",this.onCollapse_.bind(this),false);this.delayExpansion=false;this.hasChildren=false;this.entries_=[];this.onMetadataUpdateBound_=undefined}get entry(){return null}get insideMyDrive(){let rootType;if(this.entry){const root=this.parentTree_.volumeManager.getLocationInfo(this.entry);rootType=root?root.rootType:null}return rootType&&rootType===VolumeManagerCommon$3.RootType.DRIVE}get insideComputers(){let rootType;if(this.entry){const root=this.parentTree_.volumeManager.getLocationInfo(this.entry);rootType=root?root.rootType:null}return rootType&&(rootType===VolumeManagerCommon$3.RootType.COMPUTERS_GRAND_ROOT||rootType===VolumeManagerCommon$3.RootType.COMPUTER)}get insideDrive(){let rootType;if(this.entry){const root=this.parentTree_.volumeManager.getLocationInfo(this.entry);rootType=root?root.rootType:null}return rootType&&(rootType===VolumeManagerCommon$3.RootType.DRIVE||rootType===VolumeManagerCommon$3.RootType.SHARED_DRIVES_GRAND_ROOT||rootType===VolumeManagerCommon$3.RootType.SHARED_DRIVE||rootType===VolumeManagerCommon$3.RootType.COMPUTERS_GRAND_ROOT||rootType===VolumeManagerCommon$3.RootType.COMPUTER||rootType===VolumeManagerCommon$3.RootType.DRIVE_OFFLINE||rootType===VolumeManagerCommon$3.RootType.DRIVE_SHARED_WITH_ME||rootType===VolumeManagerCommon$3.RootType.DRIVE_FAKE_ROOT)}get supportDriveSpecificIcons(){return this.insideMyDrive||this.insideComputers}onMetadataUpdated_(event){if(!this.supportDriveSpecificIcons){return}const updateableProperties=["shared","isMachineRoot","isExternalMedia"];if(!updateableProperties.some((prop=>event.names.has(prop)))){return}let index=0;while(this.entries_[index]){const childEntry=this.entries_[index];const childElement=this.items[index];if(event.entriesMap.has(childEntry.toURL())){childElement.updateDriveSpecificIcons()}index++}}updateSubElementsFromList(recursive){let index=0;const tree=this.parentTree_;let item;while(this.entries_[index]){const currentEntry=this.entries_[index];const currentElement=this.items[index];const label=util$3.getEntryLabel(tree.volumeManager_.getLocationInfo(currentEntry),currentEntry)||"";if(index>=this.items.length){if(currentEntry.navigationModel){item=DirectoryTree.createDirectoryItem(currentEntry.navigationModel,tree)}else{item=new SubDirectoryItem(label,currentEntry,this,tree)}this.add(item);index++}else if(util$3.isSameEntry(currentEntry,currentElement.entry)){currentElement.updateDriveSpecificIcons();if(recursive&&this.expanded){if(this.delayExpansion){if(currentElement.expanded){currentElement.updateSubDirectories(true)}currentElement.mayHaveChildren_=true}else{currentElement.updateExpandIcon()}}index++}else if(currentEntry.toURL()<currentElement.entry.toURL()){if(currentEntry.navigationModel){item=DirectoryTree.createDirectoryItem(currentEntry.navigationModel,tree)}else{item=new SubDirectoryItem(label,currentEntry,this,tree)}this.addAt(item,index);index++}else if(currentEntry.toURL()>currentElement.entry.toURL()){this.remove(currentElement)}}let removedChild;while(removedChild=this.items[index]){this.remove(removedChild)}if(index===0){this.hasChildren=false;this.expanded=false}else{this.hasChildren=true}}getItemByEntry(entry){return DirectoryItemTreeBaseMethods.getItemByEntry.call(this,entry)}async searchAndSelectByEntry(entry){return await DirectoryItemTreeBaseMethods.searchAndSelectByEntry.call(this,entry)}scrollIntoViewIfNeeded(opt_unused){}remove(child){this.lastElementChild.removeChild(child);if(this.items.length==0){this.hasChildren=false}}clearHasChildren(){const rowItem=this.firstElementChild;this.removeAttribute("has-children");rowItem.removeAttribute("has-children")}onExpand_(e){if(this.supportDriveSpecificIcons&&!this.onMetadataUpdateBound_){this.onMetadataUpdateBound_=this.onMetadataUpdated_.bind(this);this.parentTree_.metadataModel_.addEventListener("update",this.onMetadataUpdateBound_)}this.updateSubDirectories(true,(()=>{if(!this.insideDrive){return}this.parentTree_.metadataModel_.get(this.entries_,constants.LIST_CONTAINER_METADATA_PREFETCH_PROPERTY_NAMES)}),(()=>{this.expanded=false}));e.stopPropagation()}onCollapse_(e){if(this.onMetadataUpdateBound_){this.parentTree_.metadataModel_.removeEventListener("update",this.onMetadataUpdateBound_);this.onMetadataUpdateBound_=undefined}if(this.delayExpansion){for(let i=0;i<this.items.length;i++){const item=this.items[i];if(item.expanded){item.expanded=false}}}e.stopPropagation()}handleClick(e){super.handleClick(e);if(!this.entry){return}if(!(this instanceof DriveVolumeItem)){const location=this.tree.volumeManager.getLocationInfo(this.entry);DirectoryItemTreeBaseMethods.recordUMASelectedEntry.call(this,e,location.rootType,location.isRootEntry)}}sortEntries(entries){entries.sort(util$3.compareName);const filter=this.fileFilter_.filter.bind(this.fileFilter_);return entries.filter(filter)}updateSubDirectories(recursive,opt_successCallback,opt_errorCallback){if(!this.entry||this.entry.createReader===undefined){opt_errorCallback&&opt_errorCallback();return}const onSuccess=entries=>{this.entries_=entries;this.updateSubElementsFromList(recursive);opt_successCallback&&opt_successCallback()};const reader=this.entry.createReader();const entries=[];const readEntry=()=>{reader.readEntries((results=>{if(!results.length){onSuccess(this.sortEntries(entries));return}for(let i=0;i<results.length;i++){const entry=results[i];if(entry.isDirectory){entries.push(entry)}}readEntry()}))};readEntry()}updateExpandIcon(){if(!this.entry||this.entry.createReader===undefined){this.hasChildren=false;return}const reader=this.entry.createReader();const readEntry=()=>{reader.readEntries((results=>{if(!results.length){this.hasChildren=false;return}for(let i=0;i<results.length;i++){const entry=results[i];if(entry.isDirectory&&this.fileFilter_.filter(entry)){this.hasChildren=true;return}}readEntry()}))};readEntry()}updateItemByEntry(changedDirectoryEntry){if(util$3.isSameEntry(changedDirectoryEntry,this.entry)){this.updateSubDirectories(false);return}for(let i=0;i<this.items.length;i++){const item=this.items[i];if(!item.entry){continue}if(util$3.isDescendantEntry(item.entry,changedDirectoryEntry)||util$3.isSameEntry(item.entry,changedDirectoryEntry)){item.updateItemByEntry(changedDirectoryEntry);break}}}updateDriveSpecificIcons(){}async selectByEntry(entry){if(util$3.isSameEntry(entry,this.entry)){this.selected=true;return}if(await this.searchAndSelectByEntry(entry)){return}await new Promise(this.updateSubDirectories.bind(this,false));await this.searchAndSelectByEntry(entry)}doDropTargetAction(){this.expanded=true}activate(){if(this.entry){this.parentTree_.directoryModel.activateDirectoryEntry(this.entry)}}setupEjectButton_(rowElement){const ejectButton=document.createElement("cr-button");ejectButton.className="root-eject align-right-icon";ejectButton.setAttribute("aria-label",str("UNMOUNT_DEVICE_BUTTON_LABEL"));ejectButton.setAttribute("tabindex","0");ejectButton.addEventListener("mouseup",(event=>{event.stopPropagation()}));ejectButton.addEventListener("up",(event=>{event.stopPropagation()}));ejectButton.addEventListener("mousedown",(event=>{event.stopPropagation()}));ejectButton.addEventListener("down",(event=>{event.stopPropagation()}));ejectButton.addEventListener("click",(event=>{event.stopPropagation();const command=document.querySelector("command#unmount");command.canExecuteChange(this);command.execute(this)}));const ironIcon=document.createElement("iron-icon");ironIcon.setAttribute("icon",`files20:eject`);ejectButton.appendChild(ironIcon);const label=rowElement.querySelector(".label");label.parentElement.appendChild(ejectButton);label.setAttribute("style","margin-inline-end: 2px; min-width: 0;")}setContextMenu_(menu){contextMenuHandler.setContextMenu(this,menu)}}class SubDirectoryItem extends DirectoryItem{constructor(label,dirEntry,parentDirItem,tree){super(label,tree);this.__proto__=SubDirectoryItem.prototype;if(window.IN_TEST){this.setAttribute("dir-type","SubDirectoryItem")}this.dirEntry_=dirEntry;this.entry=dirEntry;this.delayExpansion=parentDirItem.delayExpansion;if(this.delayExpansion){this.clearHasChildren();this.mayHaveChildren_=true}const icon=this.querySelector(".icon");icon.classList.add("item-icon");const location=tree.volumeManager.getLocationInfo(this.entry);if(location&&location.rootType&&location.isRootEntry){icon.setAttribute("volume-type-icon",location.rootType);if(window.IN_TEST&&location.volumeInfo){this.setAttribute("volume-type-for-testing",location.volumeInfo.volumeType);this.setAttribute("drive-label",location.volumeInfo.driveLabel)}}else{const rootType=location&&location.rootType?location.rootType:null;const iconOverride=FileType.getIconOverrides(dirEntry,rootType);if(iconOverride){icon.setAttribute("volume-type-icon",iconOverride)}icon.setAttribute("file-type-icon",iconOverride||"folder");this.updateDriveSpecificIcons()}if(tree.contextMenuForSubitems){this.setContextMenu_(tree.contextMenuForSubitems)}if(parentDirItem.expanded){this.updateExpandIcon()}}updateDriveSpecificIcons(){const metadata=this.parentTree_.metadataModel.getCache([this.dirEntry_],["shared","isMachineRoot","isExternalMedia"]);const icon=this.querySelector(".icon");icon.classList.toggle("shared",!!(metadata[0]&&metadata[0].shared));if(metadata[0]&&metadata[0].isMachineRoot){icon.setAttribute("volume-type-icon",VolumeManagerCommon$3.RootType.COMPUTER)}if(metadata[0]&&metadata[0].isExternalMedia){icon.setAttribute("volume-type-icon",VolumeManagerCommon$3.RootType.EXTERNAL_MEDIA)}}get entry(){return this.dirEntry_}set entry(value){this.dirEntry_=value;if(window.IN_TEST){this.setAttribute("full-path-for-testing",this.dirEntry_.fullPath)}}}class EntryListItem extends DirectoryItem{constructor(rootType,modelItem,tree){super(modelItem.label,tree);this.__proto__=EntryListItem.prototype;if(window.IN_TEST){this.setAttribute("dir-type","EntryListItem")}this.dirEntry_=modelItem.entry;this.modelItem_=modelItem;this.rootType_=rootType;if(rootType===VolumeManagerCommon$3.RootType.REMOVABLE){this.setupEjectButton_(this.rowElement);if(tree.contextMenuForRootItems){this.setContextMenu_(tree.contextMenuForRootItems)}}else{if(tree.contextMenuForSubitems){this.setContextMenu_(tree.contextMenuForSubitems)}}const icon=this.querySelector(".icon");icon.classList.add("item-icon");icon.setAttribute("root-type-icon",rootType);if(window.IN_TEST&&this.entry&&this.entry.volumeInfo){this.setAttribute("volume-type-for-testing",this.entry.volumeInfo.volumeType)}if(rootType===VolumeManagerCommon$3.RootType.MY_FILES){this.mayHaveChildren_=true;this.expanded=true}this.updateSubDirectories(false)}sortEntries(entries){if(!entries.length){return[]}if(!this.entry){return DirectoryItem.prototype.sortEntries.apply(this,[entries])}const locationInfo=this.parentTree_.volumeManager_.getLocationInfo(entries[0]);const compareFunction=util$3.compareLabelAndGroupBottomEntries(locationInfo,this.entry.getUIChildren());const filter=this.fileFilter_.filter.bind(this.fileFilter_);return entries.filter(filter).sort(compareFunction)}updateSubDirectories(recursive,opt_successCallback,opt_errorCallback){if(!this.entry||this.entry.createReader===undefined){opt_errorCallback&&opt_errorCallback();return}this.entries_=[];const onSuccess=entries=>{this.entries_=entries;this.updateSubElementsFromList(recursive);opt_successCallback&&opt_successCallback()};const reader=this.entry.createReader();const entries=[];const readEntry=()=>{reader.readEntries((results=>{if(!results.length){onSuccess(this.sortEntries(entries));return}for(let i=0;i<results.length;i++){const entry=results[i];if(entry.isDirectory){entries.push(entry)}}readEntry()}))};readEntry()}get entry(){return this.dirEntry_}get modelItem(){return this.modelItem_}}class VolumeItem extends DirectoryItem{constructor(modelItem,tree){super(modelItem.volumeInfo.label,tree);this.__proto__=VolumeItem.prototype;this.modelItem_=modelItem;this.volumeInfo_=modelItem.volumeInfo;this.delayExpansion=this.volumeInfo.volumeType==="provided";if(window.IN_TEST){this.setAttribute("volume-type-for-testing",this.volumeInfo_.volumeType);this.setAttribute("dir-type","VolumeItem");this.setAttribute("drive-label",this.volumeInfo_.driveLabel)}this.setupIcon_(this.querySelector(".icon"),this.volumeInfo_);if(modelItem.volumeInfo_.source===VolumeManagerCommon$3.Source.DEVICE&&modelItem.volumeInfo_.volumeType!==VolumeManagerCommon$3.VolumeType.MTP||modelItem.volumeInfo_.source===VolumeManagerCommon$3.Source.FILE){this.setupRenamePlaceholder_(this.rowElement);this.setupEjectButton_(this.rowElement)}if(tree.contextMenuForRootItems){this.setContextMenu_(tree.contextMenuForRootItems)}this.resolved_=false;if(modelItem.volumeInfo_.providerId!=="@smb"&&modelItem.volumeInfo_.volumeType!==VolumeManagerCommon$3.VolumeType.SMB){this.volumeInfo_.resolveDisplayRoot((displayRoot=>{this.resolved_=true;this.updateSubDirectories(false)}))}}updateSubDirectories(recursive,opt_successCallback,opt_errorCallback){if(!this.resolved_){return}if(this.volumeInfo.volumeType===VolumeManagerCommon$3.VolumeType.MEDIA_VIEW){opt_successCallback&&opt_successCallback()}else{DirectoryItem.prototype.updateSubDirectories.call(this,recursive,opt_successCallback,opt_errorCallback)}}activate(){const directoryModel=this.parentTree_.directoryModel;const onEntryResolved=entry=>{this.resolved_=true;if(!util$3.isSameEntry(directoryModel.getCurrentDirEntry(),entry)){directoryModel.changeDirectoryEntry(entry)}this.updateSubDirectories(false)};this.volumeInfo_.resolveDisplayRoot(onEntryResolved,(()=>{this.parentTree_.dataModel.onItemNotFoundError(this.modelItem)}))}setupIcon_(icon,volumeInfo){icon.classList.add("item-icon");const backgroundImage=util$3.iconSetToCSSBackgroundImageValue(volumeInfo.iconSet);if(backgroundImage!=="none"){icon.setAttribute("style","background-image: "+backgroundImage)}else if(VolumeManagerCommon$3.shouldProvideIcons(assert(volumeInfo.volumeType))){icon.setAttribute("use-generic-provided-icon","")}icon.setAttribute("volume-type-icon",volumeInfo.volumeType);if(volumeInfo.volumeType===VolumeManagerCommon$3.VolumeType.MEDIA_VIEW){const subtype=VolumeManagerCommon$3.getMediaViewRootTypeFromVolumeId(volumeInfo.volumeId);icon.setAttribute("volume-subtype",subtype)}else{icon.setAttribute("volume-subtype",volumeInfo.deviceType||"")}}setupRenamePlaceholder_(rowElement){const placeholder=document.createElement("span");placeholder.className="rename-placeholder";rowElement.querySelector(".label").insertAdjacentElement("afterend",placeholder)}get entry(){return this.volumeInfo_.displayRoot}get volumeInfo(){return this.volumeInfo_}get modelItem(){return this.modelItem_}}class DriveVolumeItem extends VolumeItem{constructor(modelItem,tree){super(modelItem,tree);this.__proto__=DriveVolumeItem.prototype;if(window.IN_TEST){this.setAttribute("dir-type","DriveVolumeItem")}this.classList.add("drive-volume")}handleClick(e){super.handleClick(e);this.selectDisplayRoot_(e.target);DirectoryItemTreeBaseMethods.recordUMASelectedEntry.call(this,e,VolumeManagerCommon$3.RootType.DRIVE_FAKE_ROOT,true)}createSharedDrivesGrandRoot_(){return new Promise((resolve=>{const sharedDriveGrandRoot=this.volumeInfo_.sharedDriveDisplayRoot;if(!sharedDriveGrandRoot){resolve();return}let index;for(let i=0;i<this.items.length;i++){const entry=this.items[i]&&this.items[i].entry;if(entry&&util$3.isSameEntry(entry,sharedDriveGrandRoot)){index=i;break}}const reader=sharedDriveGrandRoot.createReader();reader.readEntries((results=>{metrics.recordSmallCount("TeamDrivesCount",results.length);if(results.length){if(index!==undefined){this.items[index].hidden=false;resolve(this.items[index]);return}const label=util$3.getEntryLabel(this.parentTree_.volumeManager_.getLocationInfo(sharedDriveGrandRoot),sharedDriveGrandRoot)||"";const item=new SubDirectoryItem(label,sharedDriveGrandRoot,this,this.parentTree_);this.addAt(item,1);item.updateExpandIcon();resolve(item);return}else{if(index&&this.items[index].parentItem){this.items[index].parentItem.remove(this.items[index])}resolve();return}}))}))}createComputersGrandRoot_(){return new Promise((resolve=>{const computerGrandRoot=this.volumeInfo_.computersDisplayRoot;if(!computerGrandRoot){resolve();return}let index;for(let i=0;i<this.items.length;i++){const entry=this.items[i]&&this.items[i].entry;if(entry&&util$3.isSameEntry(entry,computerGrandRoot)){index=i;break}}const reader=computerGrandRoot.createReader();reader.readEntries((results=>{metrics.recordSmallCount("ComputersCount",results.length);if(results.length){if(index!==undefined){this.items[index].hidden=false;resolve(this.items[index]);return}const label=util$3.getEntryLabel(this.parentTree_.volumeManager_.getLocationInfo(computerGrandRoot),computerGrandRoot)||"";const item=new SubDirectoryItem(label,computerGrandRoot,this,this.parentTree_);const position=this.computersIndexPosition_();this.addAt(item,position);item.updateExpandIcon();resolve(item);return}else{if(index&&this.items[index].parentItem){this.items[index].parentItem.remove(this.items[index])}resolve();return}}))}))}activate(){super.activate();this.selectDisplayRoot_(this)}selectDisplayRoot_(target){if(!target.classList.contains("expand-icon")){this.volumeInfo_.resolveDisplayRoot((displayRoot=>{this.searchAndSelectByEntry(displayRoot)}))}}updateSubDirectories(recursive){if(!this.entry||this.hasChildren){return}let entries=[this.entry];const teamDrivesDisplayRoot=this.volumeInfo_.sharedDriveDisplayRoot;if(teamDrivesDisplayRoot){entries.push(teamDrivesDisplayRoot)}const computersDisplayRoot=this.volumeInfo_.computersDisplayRoot;if(computersDisplayRoot){entries.push(computersDisplayRoot)}const fakeEntries=[];if(this.parentTree_.fakeEntriesVisible_){for(const key in this.volumeInfo_.fakeEntries){fakeEntries.push(this.volumeInfo_.fakeEntries[key])}fakeEntries.sort(((a,b)=>{if(a.toURL()===b.toURL()){return 0}return b.toURL()>a.toURL()?1:-1}));entries=entries.concat(fakeEntries)}for(let i=0;i<entries.length;i++){const entry=entries[i];if(entry===teamDrivesDisplayRoot){this.createSharedDrivesGrandRoot_()}else if(entry===computersDisplayRoot){this.createComputersGrandRoot_()}else{const label=util$3.getEntryLabel(this.parentTree_.volumeManager_.getLocationInfo(entry),entry)||"";const item=new SubDirectoryItem(label,entry,this,this.parentTree_);this.add(item);item.updateSubDirectories(false)}}}updateItemByEntry(changedDirectoryEntry){const isTeamDriveChild=util$3.isSharedDriveEntry(changedDirectoryEntry);if(isTeamDriveChild){this.createSharedDrivesGrandRoot_().then((sharedDriveGrandRootItem=>{if(sharedDriveGrandRootItem){sharedDriveGrandRootItem.updateItemByEntry(changedDirectoryEntry)}}));return}const isComputersChild=util$3.isComputersEntry(changedDirectoryEntry);if(isComputersChild){this.createComputersGrandRoot_().then((computersGrandRootItem=>{if(computersGrandRootItem){computersGrandRootItem.updateItemByEntry(changedDirectoryEntry)}}));return}this.items[0].updateItemByEntry(changedDirectoryEntry)}async selectByEntry(entry){await this.searchAndSelectByEntry(entry)}computersIndexPosition_(){for(let i=0;i<this.items.length;i++){const item=this.items[i];if(!item.entry){continue}if(util$3.isSharedDriveEntry(item.entry)){return 2}}return 1}get expanded(){return Object.getOwnPropertyDescriptor(TreeItem.prototype,"expanded").get.call(this)}set expanded(b){Object.getOwnPropertyDescriptor(TreeItem.prototype,"expanded").set.call(this,b);if(b){if(this.selected&&this.entry){this.selectByEntry(this.entry)}}}}class ShortcutItem extends FilesTreeItem{constructor(modelItem,tree){super(modelItem.entry.name,tree);this.__proto__=ShortcutItem.prototype;if(window.IN_TEST){this.setAttribute("dir-type","ShortcutItem")}this.dirEntry_=modelItem.entry;this.modelItem_=modelItem;const icon=this.querySelector(".icon");icon.classList.add("item-icon");icon.setAttribute("volume-type-icon","shortcut");if(tree.contextMenuForRootItems){this.setContextMenu_(tree.contextMenuForRootItems)}}searchAndSelectByEntry(entry){return false}handleClick(e){super.handleClick(e);if(e.button===2){return}this.parentTree_.directoryModel.clearSelection();const location=this.tree.volumeManager.getLocationInfo(this.entry);DirectoryItemTreeBaseMethods.recordUMASelectedEntry.call(this,e,location.rootType,location.isRootEntry)}selectByEntry(entry){if(util$3.isSameEntry(entry,this.entry)){this.selected=true}}setContextMenu_(menu){contextMenuHandler.setContextMenu(this,menu)}activate(){const directoryModel=this.parentTree_.directoryModel;const onEntryResolved=entry=>{if(!util$3.isSameEntry(directoryModel.getCurrentDirEntry(),entry)){metrics.recordUserAction("FolderShortcut.Navigate");directoryModel.changeDirectoryEntry(entry)}};window.webkitResolveLocalFileSystemURL(this.entry.toURL(),onEntryResolved,(()=>{this.parentTree_.dataModel.onItemNotFoundError(this.modelItem)}))}get entry(){return this.dirEntry_}get modelItem(){return this.modelItem_}}class AndroidAppItem extends FilesTreeItem{constructor(modelItem,tree){super(modelItem.androidApp.name,tree);this.__proto__=AndroidAppItem.prototype;if(window.IN_TEST){this.setAttribute("dir-type","AndroidAppItem")}this.modelItem_=modelItem;const icon=this.querySelector(".icon");icon.classList.add("item-icon");if(modelItem.androidApp.iconSet){const backgroundImage=util$3.iconSetToCSSBackgroundImageValue(modelItem.androidApp.iconSet);if(backgroundImage!=="none"){icon.setAttribute("style","background-image: "+backgroundImage)}}icon.setAttribute("use-generic-provided-icon","");this.setAttribute("aria-describedby","external-link-label");const externalLinkIcon=document.createElement("span");externalLinkIcon.className="external-link-icon align-right-icon";const ironIcon=document.createElement("iron-icon");ironIcon.setAttribute("icon",`files20:external-link`);externalLinkIcon.appendChild(ironIcon);const label=this.rowElement.querySelector(".label");label.parentElement.appendChild(externalLinkIcon);label.setAttribute("style","margin-inline-end: 2px; min-width: 0;")}handleClick(e){chrome.fileManagerPrivate.selectAndroidPickerApp(this.modelItem_.androidApp,(()=>{if(chrome.runtime.lastError){console.error("selectAndroidPickerApp error: ",chrome.runtime.lastError.message)}else{window.close()}}))}}class FakeItem extends FilesTreeItem{constructor(rootType,modelItem,tree){super(modelItem.label,tree);this.__proto__=FakeItem.prototype;if(window.IN_TEST){this.setAttribute("dir-type","FakeItem")}this.directoryModel_=tree.directoryModel;this.dirEntry_=modelItem.entry;this.modelItem_=modelItem;this.rootType_=rootType;const icon=this.querySelector(".icon");icon.classList.add("item-icon");icon.setAttribute("root-type-icon",rootType);if(util$3.isRecentRootType(rootType)){if(this.dirEntry_.recentFileType){icon.setAttribute("recent-file-type",this.dirEntry_.recentFileType)}else{this.labelElement.scrollIntoViewIfNeeded=()=>{this.scrollIntoView(true)}}}if(tree.disabledContextMenu){contextMenuHandler.setContextMenu(this,tree.disabledContextMenu)}}searchAndSelectByEntry(entry){return false}handleClick(e){super.handleClick(e);DirectoryItemTreeBaseMethods.recordUMASelectedEntry.call(this,e,this.rootType_,true)}selectByEntry(entry){if(util$3.isSameEntry(entry,this.entry)){this.selected=true}}activate(){this.parentTree_.directoryModel.activateDirectoryEntry(this.entry)}updateSubDirectories(recursive,opt_successCallback,opt_errorCallback){return opt_successCallback&&opt_successCallback()}updateDriveSpecificIcons(){}get entry(){return this.dirEntry_}get modelItem(){return this.modelItem_}}class DirectoryTree extends Tree{constructor(){super();this.activeRow_=null;this.dataModel_=null;this.sequence_=0;this.directoryModel_=null;this.volumeManager_=null;this.metadataModel_=null;this.fileFilter_=null;this.onListContentChangedBound_=null;this.privateOnDirectoryChangedBound_=null}decorateDirectoryTree(directoryModel,volumeManager,metadataModel,fileOperationManager,fakeEntriesVisible){Tree.prototype.decorate.call(this);this.sequence_=0;this.directoryModel_=directoryModel;this.volumeManager_=volumeManager;this.metadataModel_=metadataModel;this.fileFilter_=this.directoryModel_.getFileFilter();this.fileFilter_.addEventListener("changed",this.onFilterChanged_.bind(this));this.directoryModel_.addEventListener("directory-changed",this.onCurrentDirectoryChanged_.bind(this));util$3.addEventListenerToBackgroundComponent(fileOperationManager,"entries-changed",this.onEntriesChanged_.bind(this));this.addEventListener("scroll",this.onTreeScrollEvent_.bind(this),{passive:true});this.addEventListener("click",(event=>{if(document.activeElement===document.body){this.focus()}}));this.privateOnDirectoryChangedBound_=this.onDirectoryContentChanged_.bind(this);chrome.fileManagerPrivate.onDirectoryChanged.addListener(this.privateOnDirectoryChangedBound_);this.fakeEntriesVisible_=fakeEntriesVisible}updateAndSelectNewDirectory(parentDirectory,newDirectory){const parentItem=DirectoryItemTreeBaseMethods.getItemByEntry.call(this,parentDirectory);parentItem.expanded=true;for(let i=0;i<parentItem.items.length;i++){const item=parentItem.items[i];if(util$3.isSameEntry(item.entry,newDirectory)){this.selectedItem=item;return}}const newDirectoryItem=new SubDirectoryItem(newDirectory.name,newDirectory,parentItem,this);let addAt=0;while(addAt<parentItem.items.length&&util$3.compareName(parentItem.items[addAt].entry,newDirectory)<0){addAt++}parentItem.addAt(newDirectoryItem,addAt);this.selectedItem=newDirectoryItem}updateSubElementsFromList(recursive){for(let i=0;i<this.items.length;){let found=false;for(let j=0;j<this.dataModel.length;j++){if(this.items[i].modelItem===this.dataModel.item(j)){found=true;break}}if(!found){if(this.items[i].selected){this.items[i].selected=false}this.remove(this.items[i])}else{i++}}let modelIndex=0;let itemIndex=0;let previousSection=this.dataModel.item(modelIndex).section;while(modelIndex<this.dataModel.length){const currentItem=this.items[itemIndex];if(itemIndex<this.items.length&&currentItem.modelItem===this.dataModel.item(modelIndex)){const modelItem=currentItem.modelItem;if(previousSection!==modelItem.section){currentItem.setAttribute("section-start",modelItem.section);previousSection=modelItem.section}if(recursive&&currentItem instanceof VolumeItem){currentItem.updateSubDirectories(true)}if(currentItem instanceof EntryListItem){currentItem.updateSubDirectories(recursive)}}else{const modelItem=this.dataModel.item(modelIndex);if(modelItem){const item=DirectoryTree.createDirectoryItem(modelItem,this);if(item){this.addAt(item,itemIndex);if(previousSection!==modelItem.section){item.setAttribute("section-start",modelItem.section)}}previousSection=modelItem.section}}itemIndex++;modelIndex++}}async searchAndSelectByEntry(entry){for(let i=0;i<this.items.length;i++){const item=this.items[i];if(item instanceof DriveVolumeItem){continue}if(util$3.isSameEntry(item.entry,entry)){await item.selectByEntry(entry);return true}}const found=await DirectoryItemTreeBaseMethods.searchAndSelectByEntry.call(this,entry);return found}onEntriesChanged_(event){const directories=event.entries.filter((entry=>entry.isDirectory));if(directories.length===0){return}switch(event.kind){case util$3.EntryChangedKind.CREATED:Promise.all(directories.map((directory=>new Promise(directory.getParent.bind(directory))))).then((parentDirectories=>{parentDirectories.forEach((parentDirectory=>this.updateTreeByEntry_(parentDirectory)))}));break;case util$3.EntryChangedKind.DELETED:directories.forEach((directory=>this.updateTreeByEntry_(directory)));break;default:assertNotReached()}}async selectByEntry(entry){if(this.selectedItem&&util$3.isSameEntry(entry,this.selectedItem.entry)){return}if(await this.searchAndSelectByEntry(entry)){return}this.updateSubDirectories(false);const currentSequence=++this.sequence_;const volumeInfo=this.volumeManager_.getVolumeInfo(entry);if(!volumeInfo){return}volumeInfo.resolveDisplayRoot((async()=>{if(this.sequence_!==currentSequence){return}if(!await this.searchAndSelectByEntry(entry)){this.selectedItem=null}}))}activateByIndex(index){if(index<0||index>=this.items.length){return false}this.items[index].selected=true;this.items[index].activate();return true}updateSubDirectories(recursive,opt_callback){this.redraw(recursive);if(opt_callback){opt_callback()}}redraw(recursive){this.updateSubElementsFromList(recursive)}onFilterChanged_(){if(this.hidden){return}this.redraw(true)}onDirectoryContentChanged_(event){if(event.eventType!=="changed"||!event.entry){return}this.updateTreeByEntry_(event.entry)}updateTreeByEntry_(entry){entry.getDirectory(entry.fullPath,{create:false},(()=>{for(let i=0;i<this.items.length;i++){if(this.items[i]instanceof VolumeItem||this.items[i]instanceof EntryListItem){this.items[i].updateItemByEntry(entry)}}}),(()=>{entry.getParent((parentEntry=>{this.updateTreeByEntry_(parentEntry)}),(error=>{const volumeInfo=this.volumeManager.getVolumeInfo(entry);if(!volumeInfo){return}for(let i=0;i<this.items.length;i++){if(this.items[i]instanceof VolumeItem&&this.items[i].volumeInfo===volumeInfo){this.items[i].updateSubDirectories(true)}}}))}))}async onCurrentDirectoryChanged_(event){await this.selectByEntry(event.newDirEntry);const selectedItem=this.selectedItem;if(this.activeRow_){this.activeRow_.removeAttribute("active")}this.activeRow_=selectedItem?selectedItem.rowElement:null;if(this.activeRow_){this.activeRow_.setAttribute("active","")}this.updateSubDirectories(false,(()=>{}))}onListContentChanged_(){this.updateSubDirectories(false,(()=>{if(!this.selectedItem){const currentDir=this.directoryModel_.getCurrentDirEntry();if(currentDir){this.selectByEntry(currentDir)}}}))}onTreeScrollEvent_(){if(this.scrollRAFActive_===true){return}this.scrollRAFActive_=true;window.requestAnimationFrame((()=>{this.scrollRAFActive_=false;if(document.documentElement.getAttribute("dir")==="rtl"){const scrollRight=this.scrollWidth-this.clientWidth;if(this.scrollLeft!==scrollRight){this.scrollLeft=scrollRight}}else if(this.scrollLeft){this.scrollLeft=0}}))}relayout(){dispatchSimpleEvent(this,"relayout",true)}get expanded(){return true}set expanded(value){}get directoryModel(){return this.directoryModel_}get volumeManager(){return this.volumeManager_}get metadataModel(){return this.metadataModel_}set dataModel(dataModel){if(!this.onListContentChangedBound_){this.onListContentChangedBound_=this.onListContentChanged_.bind(this)}if(this.dataModel_){this.dataModel_.removeEventListener("change",this.onListContentChangedBound_);this.dataModel_.removeEventListener("permuted",this.onListContentChangedBound_)}this.dataModel_=dataModel;dataModel.addEventListener("change",this.onListContentChangedBound_);dataModel.addEventListener("permuted",this.onListContentChangedBound_)}get dataModel(){return this.dataModel_}}DirectoryTree.decorate=(el,directoryModel,volumeManager,metadataModel,fileOperationManager,fakeEntriesVisible)=>{el.__proto__=DirectoryTree.prototype;el.setAttribute("files-ng","");Object.freeze(directorytree);el.decorateDirectoryTree(directoryModel,volumeManager,metadataModel,fileOperationManager,fakeEntriesVisible);el.rowElementDepthStyleHandler=directorytree.styleRowElementDepth};DirectoryTree.prototype.contextMenuForSubitems;Object.defineProperty(DirectoryTree.prototype,"contextMenuForSubitems",getPropertyDescriptor("contextMenuForSubitems",PropertyKind.JS));DirectoryTree.prototype.contextMenuForRootItems;Object.defineProperty(DirectoryTree.prototype,"contextMenuForRootItems",getPropertyDescriptor("contextMenuForRootItems",PropertyKind.JS));DirectoryTree.prototype.disabledContextMenu;Object.defineProperty(DirectoryTree.prototype,"disabledContextMenu",getPropertyDescriptor("disabledContextMenu",PropertyKind.JS));DirectoryTree.createDirectoryItem=(modelItem,tree)=>{switch(modelItem.type){case NavigationModelItemType.VOLUME:const volumeModelItem=modelItem;if(volumeModelItem.volumeInfo.volumeType===VolumeManagerCommon$3.VolumeType.DRIVE){return new DriveVolumeItem(volumeModelItem,tree)}else{return new VolumeItem(volumeModelItem,tree)}break;case NavigationModelItemType.SHORTCUT:return new ShortcutItem(modelItem,tree);break;case NavigationModelItemType.RECENT:return new FakeItem(VolumeManagerCommon$3.RootType.RECENT,modelItem,tree);break;case NavigationModelItemType.CROSTINI:return new FakeItem(VolumeManagerCommon$3.RootType.CROSTINI,modelItem,tree);break;case NavigationModelItemType.DRIVE:return new FakeItem(VolumeManagerCommon$3.RootType.DRIVE,modelItem,tree);break;case NavigationModelItemType.ENTRY_LIST:const rootType=modelItem.section===NavigationSection.REMOVABLE?VolumeManagerCommon$3.RootType.REMOVABLE:VolumeManagerCommon$3.RootType.MY_FILES;return new EntryListItem(rootType,modelItem,tree);break;case NavigationModelItemType.ANDROID_APP:return new AndroidAppItem(modelItem,tree);break;case NavigationModelItemType.TRASH:return new FakeItem(VolumeManagerCommon$3.RootType.TRASH,modelItem,tree);break}assertNotReached(`No DirectoryItem model: "${modelItem.type}"`)};// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
const DialogType={SELECT_FOLDER:"folder",SELECT_UPLOAD_FOLDER:"upload-folder",SELECT_SAVEAS_FILE:"saveas-file",SELECT_OPEN_FILE:"open-file",SELECT_OPEN_MULTI_FILE:"open-multi-file",FULL_PAGE:"full-page"};DialogType.isModal=type=>type==DialogType.SELECT_FOLDER||type==DialogType.SELECT_UPLOAD_FOLDER||type==DialogType.SELECT_SAVEAS_FILE||type==DialogType.SELECT_OPEN_FILE||type==DialogType.SELECT_OPEN_MULTI_FILE;DialogType.isOpenDialog=type=>type==DialogType.SELECT_OPEN_FILE||type==DialogType.SELECT_OPEN_MULTI_FILE||type==DialogType.SELECT_FOLDER||type==DialogType.SELECT_UPLOAD_FOLDER;DialogType.isOpenFileDialog=type=>type==DialogType.SELECT_OPEN_FILE||type==DialogType.SELECT_OPEN_MULTI_FILE;DialogType.isFolderDialog=type=>type==DialogType.SELECT_FOLDER||type==DialogType.SELECT_UPLOAD_FOLDER;// Copyright 2014 The Chromium Authors. All rights reserved.
class LaunchParam{constructor(unformatted){this.type=unformatted["type"]||DialogType.FULL_PAGE;this.action=unformatted["action"]?unformatted["action"]:"";this.currentDirectoryURL=unformatted["currentDirectoryURL"]?unformatted["currentDirectoryURL"]:"";this.selectionURL=unformatted["selectionURL"]?unformatted["selectionURL"]:"";this.targetName=unformatted["targetName"]?unformatted["targetName"]:"";this.typeList=unformatted["typeList"]?unformatted["typeList"]:[];this.includeAllFiles=!!unformatted["includeAllFiles"];this.allowedPaths=unformatted["allowedPaths"]?unformatted["allowedPaths"]:AllowedPaths$1.ANY_PATH_OR_URL;this.searchQuery=unformatted["searchQuery"]||"";this.showAndroidPickerApps=!!unformatted["showAndroidPickerApps"]}}// Copyright 2015 The Chromium Authors. All rights reserved.
class ProvidersModelItem{constructor(providerId,iconSet,name,configurable,watchable,multipleMounts,source){this.providerId_=providerId;this.iconSet_=iconSet;this.name_=name;this.configurable_=configurable;this.watchable_=watchable;this.multipleMounts_=multipleMounts;this.source_=source}get providerId(){return this.providerId_}get iconSet(){return this.iconSet_}get name(){return this.name_}get configurable(){return this.configurable_}get watchable(){return this.watchable_}get multipleMounts(){return this.multipleMounts_}get source(){return this.source_}}class ProvidersModel{constructor(volumeManager){this.volumeManager_=volumeManager}getInstalledProviders(){return new Promise(((fulfill,reject)=>{chrome.fileManagerPrivate.getProviders((providers=>{if(chrome.runtime.lastError){reject(chrome.runtime.lastError.message);return}const results=[];providers.forEach((provider=>{results.push(new ProvidersModelItem(provider.providerId,provider.iconSet,provider.name,provider.configurable,provider.watchable,provider.multipleMounts,provider.source))}));fulfill(results)}))}))}getMountableProviders(){return this.getInstalledProviders().then((providers=>{const mountedProviders={};for(let i=0;i<this.volumeManager_.volumeInfoList.length;i++){const volumeInfo=this.volumeManager_.volumeInfoList.item(i);if(volumeInfo.volumeType===VolumeManagerCommon$3.VolumeType.PROVIDED){mountedProviders[volumeInfo.providerId]=true}}return providers.filter((item=>item.source==="network"&&(!mountedProviders[item.providerId]||item.multipleMounts)))}))}requestMount(providerId){chrome.fileManagerPrivate.addProvidedFileSystem(assert(providerId),(()=>{if(chrome.runtime.lastError){console.error(chrome.runtime.lastError.message)}}))}}// Copyright 2014 The Chromium Authors. All rights reserved.
class TextSearchState{constructor(){this.text="";this.date=new Date}}class ListContainer{constructor(element,table,grid,type){this.element=element;this.table=table;this.grid=grid;this.currentListType=ListContainer.ListType.UNINITIALIZED;this.renameInput=assertInstanceof(document.createElement("input"),HTMLInputElement);this.renameInput.className="rename entry-name";this.spinner=util$3.isFilesNg()?queryRequiredElement("files-spinner.loading-indicator",element):queryRequiredElement("paper-progress.loading-indicator",element);this.dataModel=null;this.listThumbnailLoader=null;this.selectionModel=null;this.emptyDataModel=null;this.emptySelectionModel_=new ListSelectionModel;this.textSearchState=new TextSearchState;this.allowContextMenuByTouch_=false;this.table.list.setAttribute("role","listbox");this.table.list.id="file-list";this.grid.setAttribute("role","listbox");this.grid.id="file-list";this.element.addEventListener("keydown",this.onKeyDown_.bind(this));this.element.addEventListener("keypress",this.onKeyPress_.bind(this));this.element.addEventListener("mousemove",this.onMouseMove_.bind(this));this.element.addEventListener("contextmenu",this.onContextMenu_.bind(this),true);this.element.addEventListener("touchstart",function(e){if(e.touches.length>1){this.allowContextMenuByTouch_=true}}.bind(this),{passive:true});this.element.addEventListener("touchend",function(e){if(e.touches.length==0){setTimeout(function(){this.allowContextMenuByTouch_=false}.bind(this))}}.bind(this));this.element.addEventListener("contextmenu",function(e){if(this.currentList.selectedItem&&!this.allowContextMenuByTouch_&&e.sourceCapabilities&&e.sourceCapabilities.firesTouchEvents){e.stopPropagation()}}.bind(this),true);if(type===DialogType.SELECT_SAVEAS_FILE){const list=table.querySelector("#file-list");list.setAttribute("aria-multiselectable","false");grid.setAttribute("aria-multiselectable","false")}}get currentView(){switch(this.currentListType){case ListContainer.ListType.DETAIL:return this.table;case ListContainer.ListType.THUMBNAIL:return this.grid}assertNotReached()}get currentList(){switch(this.currentListType){case ListContainer.ListType.DETAIL:return this.table.list;case ListContainer.ListType.THUMBNAIL:return this.grid}assertNotReached()}startBatchUpdates(){this.table.startBatchUpdates();this.grid.startBatchUpdates()}endBatchUpdates(){this.table.endBatchUpdates();this.grid.endBatchUpdates()}setCurrentListType(listType){assert(this.dataModel);assert(this.selectionModel);this.startBatchUpdates();this.currentListType=listType;this.element.classList.toggle("list-view",listType===ListContainer.ListType.DETAIL);this.element.classList.toggle("thumbnail-view",listType===ListContainer.ListType.THUMBNAIL);switch(listType){case ListContainer.ListType.DETAIL:this.table.dataModel=this.dataModel;this.table.setListThumbnailLoader(this.listThumbnailLoader);this.table.selectionModel=this.selectionModel;this.table.hidden=false;this.grid.hidden=true;this.grid.selectionModel=this.emptySelectionModel_;this.grid.setListThumbnailLoader(null);this.grid.dataModel=this.emptyDataModel;break;case ListContainer.ListType.THUMBNAIL:this.grid.dataModel=this.dataModel;this.grid.setListThumbnailLoader(this.listThumbnailLoader);this.grid.selectionModel=this.selectionModel;this.grid.hidden=false;this.table.hidden=true;this.table.selectionModel=this.emptySelectionModel_;this.table.setListThumbnailLoader(null);this.table.dataModel=this.emptyDataModel;break;default:assertNotReached();break}this.endBatchUpdates()}clearHover(){this.element.classList.add("nohover")}findListItemForNode(node){const item=this.currentList.getListItemAncestor(node);return item&&this.currentList.isItem(item)?assertInstanceof(item,ListItem):null}focus(){switch(this.currentListType){case ListContainer.ListType.DETAIL:this.table.list.focus();break;case ListContainer.ListType.THUMBNAIL:this.grid.focus();break;default:assertNotReached();break}}contextMenuHasActions_(){const menu=document.querySelector("#file-context-menu");const menuItems=menu.querySelectorAll("cr-menu-item, hr");for(const item of menuItems){if(!item.hasAttribute("hidden")&&!item.hasAttribute("disabled")&&window.getComputedStyle(item).display!="none"){return true}}return false}onContextMenu_(e){if(!this.allowContextMenuByTouch_&&e.sourceCapabilities&&e.sourceCapabilities.firesTouchEvents){this.focus()}}onKeyDown_(event){if(event.srcElement.tagName=="INPUT"){event.stopImmediatePropagation();return}switch(event.key){case"Home":case"End":case"ArrowUp":case"ArrowDown":case"ArrowLeft":case"ArrowRight":this.clearHover();break}}onKeyPress_(event){if(event.srcElement.tagName=="INPUT"||event.ctrlKey||event.metaKey||event.altKey){event.stopImmediatePropagation();return}const now=new Date;const character=String.fromCharCode(event.charCode).toLowerCase();const text=now-this.textSearchState.date>1e3?"":this.textSearchState.text;this.textSearchState.text=text+character;this.textSearchState.date=now;if(this.textSearchState.text){dispatchSimpleEvent(this.element,ListContainer.EventType.TEXT_SEARCH)}}onMouseMove_(event){this.element.classList.remove("nohover")}}ListContainer.EventType={TEXT_SEARCH:"textsearch"};ListContainer.ListType={UNINITIALIZED:"uninitialized",DETAIL:"detail",THUMBNAIL:"thumb"};ListContainer.ListTypesForUMA=Object.freeze([ListContainer.ListType.UNINITIALIZED,ListContainer.ListType.DETAIL,ListContainer.ListType.THUMBNAIL]);console.assert(Object.keys(ListContainer.ListType).length===ListContainer.ListTypesForUMA.length,"Members in ListTypesForUMA do not match those in ListType.");// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
function BaseDialog(parentNode){this.parentNode_=parentNode;this.document_=parentNode.ownerDocument;this.initialFocusElement_=null;this.previousActiveElement_=null;this.hasModalContainer=false;this.showing_=false;this.container=null;this.frame=null;this.title=null;this.text=null;this.closeButton=null;this.okButton=null;this.cancelButton=null;this.buttons=null;this.initDom()}BaseDialog.OK_LABEL="[LOCALIZE ME] Ok";BaseDialog.CANCEL_LABEL="[LOCALIZE ME] Cancel";BaseDialog.ANIMATE_STABLE_DURATION=500;BaseDialog.prototype.initDom=function(){const doc=this.document_;this.container=doc.createElement("div");this.container.className="cr-dialog-container";this.container.addEventListener("keydown",this.onContainerKeyDown.bind(this));this.shield_=doc.createElement("div");this.shield_.className="cr-dialog-shield";this.container.appendChild(this.shield_);this.container.addEventListener("mousedown",this.onContainerMouseDown_.bind(this));this.frame=doc.createElement("div");this.frame.className="cr-dialog-frame";this.frame.setAttribute("role","dialog");this.frame.tabIndex=-1;this.container.appendChild(this.frame);this.title=doc.createElement("div");this.title.className="cr-dialog-title";this.frame.appendChild(this.title);this.closeButton=doc.createElement("div");this.closeButton.className="cr-dialog-close";this.closeButton.addEventListener("click",this.onCancelClick_.bind(this));this.frame.appendChild(this.closeButton);this.text=doc.createElement("div");this.text.className="cr-dialog-text";this.frame.appendChild(this.text);this.buttons=doc.createElement("div");this.buttons.className="cr-dialog-buttons";this.frame.appendChild(this.buttons);this.okButton=doc.createElement("button");this.okButton.className="cr-dialog-ok";this.okButton.textContent=BaseDialog.OK_LABEL;this.okButton.addEventListener("click",this.onOkClick_.bind(this));this.buttons.appendChild(this.okButton);this.cancelButton=doc.createElement("button");this.cancelButton.className="cr-dialog-cancel";this.cancelButton.textContent=BaseDialog.CANCEL_LABEL;this.cancelButton.addEventListener("click",this.onCancelClick_.bind(this));this.buttons.appendChild(this.cancelButton);this.initialFocusElement_=this.okButton};BaseDialog.prototype.onOk_=null;BaseDialog.prototype.onCancel_=null;BaseDialog.prototype.onContainerKeyDown=function(event){if(event.keyCode===27&&!this.cancelButton.disabled){this.onCancelClick_(event);event.stopPropagation();event.preventDefault()}};BaseDialog.prototype.onContainerMouseDown_=function(event){if(event.target===this.container){const classList=this.container.classList;classList.remove("pulse");setTimeout(classList.add.bind(classList,"pulse"),0);event.preventDefault()}};BaseDialog.prototype.onOkClick_=function(event){this.hide();if(this.onOk_){this.onOk_()}};BaseDialog.prototype.onCancelClick_=function(event){this.hide();if(this.onCancel_){this.onCancel_()}};BaseDialog.prototype.setOkLabel=function(label){this.okButton.textContent=label};BaseDialog.prototype.setCancelLabel=function(label){this.cancelButton.textContent=label};BaseDialog.prototype.setInitialFocusOnCancel=function(){this.initialFocusElement_=this.cancelButton};BaseDialog.prototype.show=function(message,opt_onOk,opt_onCancel,opt_onShow){this.showWithTitle("",message,opt_onOk,opt_onCancel,opt_onShow)};BaseDialog.prototype.showHtml=function(title,message,opt_onOk,opt_onCancel,opt_onShow){this.text.innerHTML=message;this.show_(title,opt_onOk,opt_onCancel,opt_onShow)};BaseDialog.prototype.findFocusableElements_=function(doc){let elements=Array.prototype.filter.call(doc.querySelectorAll("*"),(function(n){return n.tabIndex>=0}));const iframes=doc.querySelectorAll("iframe");for(let i=0;i<iframes.length;i++){const iframe=iframes[i];let contentDoc;try{contentDoc=iframe.contentDocument}catch(e){}if(contentDoc){elements=elements.concat(this.findFocusableElements_(contentDoc))}}return elements};BaseDialog.prototype.showWithTitle=function(title,message,opt_onOk,opt_onCancel,opt_onShow){this.text.textContent=message;this.show_(title,opt_onOk,opt_onCancel,opt_onShow)};BaseDialog.prototype.show_=function(title,opt_onOk,opt_onCancel,opt_onShow){this.showing_=true;if(!this.hasModalContainer){this.deactivatedNodes_=this.findFocusableElements_(this.document_);this.tabIndexes_=this.deactivatedNodes_.map((function(n){return n.getAttribute("tabindex")}));this.deactivatedNodes_.forEach((function(n){n.tabIndex=-1}))}else{this.deactivatedNodes_=[]}this.previousActiveElement_=this.document_.activeElement;this.parentNode_.appendChild(this.container);this.onOk_=opt_onOk;this.onCancel_=opt_onCancel;if(title){this.title.textContent=title;this.title.hidden=false;this.frame.setAttribute("aria-label",title)}else{this.title.textContent="";this.title.hidden=true;this.frame.removeAttribute("aria-label")}const self=this;setTimeout((function(){if(self.showing_){self.container.classList.add("shown");self.initialFocusElement_.focus()}setTimeout((function(){if(opt_onShow){opt_onShow()}}),BaseDialog.ANIMATE_STABLE_DURATION)}),0)};BaseDialog.prototype.hide=function(opt_onHide){this.showing_=false;for(let i=0;i<this.deactivatedNodes_.length;i++){const node=this.deactivatedNodes_[i];if(this.tabIndexes_[i]===null){node.removeAttribute("tabindex")}else{node.setAttribute("tabindex",this.tabIndexes_[i])}}this.deactivatedNodes_=null;this.tabIndexes_=null;this.container.classList.remove("shown");this.container.classList.remove("pulse");if(this.previousActiveElement_){this.previousActiveElement_.focus()}else{this.document_.body.focus()}const self=this;setTimeout((function(){if(!self.showing_&&self.parentNode_===self.container.parentNode){self.parentNode_.removeChild(self.container)}if(opt_onHide){opt_onHide()}}),BaseDialog.ANIMATE_STABLE_DURATION)};function AlertDialog(parentNode){BaseDialog.call(this,parentNode);this.cancelButton.style.display="none"}AlertDialog.prototype={__proto__:BaseDialog.prototype};AlertDialog.prototype.show=function(message,opt_onOk,opt_onShow){return BaseDialog.prototype.show.call(this,message,opt_onOk,opt_onOk,opt_onShow)};function ConfirmDialog(parentNode){BaseDialog.call(this,parentNode)}ConfirmDialog.prototype={__proto__:BaseDialog.prototype};function PromptDialog(parentNode){BaseDialog.call(this,parentNode);this.input_=this.document_.createElement("input");this.input_.setAttribute("type","text");this.input_.addEventListener("focus",this.onInputFocus.bind(this));this.input_.addEventListener("keydown",this.onKeyDown_.bind(this));this.initialFocusElement_=this.input_;this.frame.insertBefore(this.input_,this.text.nextSibling)}PromptDialog.prototype={__proto__:BaseDialog.prototype};PromptDialog.prototype.onInputFocus=function(event){this.input_.select()};PromptDialog.prototype.onKeyDown_=function(event){if(event.keyCode===13){this.onOkClick_(event);event.preventDefault()}};PromptDialog.prototype.show=function(message,defaultValue,opt_onOk,opt_onCancel,opt_onShow){this.input_.value=defaultValue||"";return BaseDialog.prototype.show.call(this,message,opt_onOk,opt_onCancel,opt_onShow)};PromptDialog.prototype.getValue=function(){return this.input_.value};PromptDialog.prototype.onOkClick_=function(event){this.hide();if(this.onOk_){this.onOk_(this.getValue())}};// Copyright 2016 The Chromium Authors. All rights reserved.
class FilesAlertDialog extends AlertDialog{constructor(parentNode){super(parentNode);if(util$3.isFilesNg()){this.container.classList.add("files-ng")}}initDom(){super.initDom();super.hasModalContainer=true;this.frame.classList.add("files-alert-dialog")}show_(...args){this.parentNode_=util$3.getFilesAppModalDialogInstance();super.show_(...args);this.parentNode_.showModal()}hide(...args){this.parentNode_.close();super.hide(...args)}showWithTitle(title,message,...args){this.frame.classList.toggle("no-title",!title);super.showWithTitle(title,message,...args)}showHtml(title,message,...args){this.frame.classList.toggle("no-title",!title);super.showHtml(title,message,...args)}}// Copyright 2019 The Chromium Authors. All rights reserved.
class ImportCrostiniImageDialog extends ConfirmDialog{constructor(parentNode){super(parentNode);super.setOkLabel(str("IMPORT_CROSTINI_IMAGE_DIALOG_OK_LABEL"));if(util$3.isFilesNg()){this.container.classList.add("files-ng")}}showImportCrostiniImageDialog(entry){super.showWithTitle(str("IMPORT_CROSTINI_IMAGE_DIALOG_TITLE"),str("IMPORT_CROSTINI_IMAGE_DIALOG_DESCRIPTION"),chrome.fileManagerPrivate.importCrostiniImage.bind(null,entry))}}// Copyright 2014 The Chromium Authors. All rights reserved.
class DialogFooter{constructor(dialogType,container,filenameInput){this.element=container;this.dialogType_=dialogType;this.okButton=container.querySelector(".ok");this.okButtonLabel=this.okButton.querySelector("span");this.cancelButton=container.querySelector(".cancel");this.newFolderButton=container.querySelector("#new-folder-button");if(util$3.isFilesNg()){this.fileTypeSelector=container.querySelector("div.file-type");const selectorReference=this.fileTypeSelector;Object.defineProperty(selectorReference,"value",{get(){return this.getSelectValue()},enumerable:true,configurable:true});this.fileTypeSelector.getSelectValue=this.getSelectValue_.bind(this);this.fileTypeSelector.addEventListener("activate",this.onActivate_.bind(this));this.fileTypeSelector.addEventListener("click",this.onActivate_.bind(this));this.fileTypeSelector.addEventListener("blur",this.onBlur_.bind(this));this.fileTypeSelector.addEventListener("keydown",this.onKeyDown_.bind(this));this.fileTypeSelectorText=this.fileTypeSelector.querySelector("span")}else{this.fileTypeSelector=container.querySelector("select.file-type")}this.filenameInput=filenameInput;container.classList.add("button-panel");this.okButtonLabel.textContent=DialogFooter.getOKButtonLabel_(dialogType);this.filenameInput.addEventListener("keydown",this.onFilenameInputKeyDown_.bind(this));this.filenameInput.addEventListener("focus",this.onFilenameInputFocus_.bind(this))}get selectedFilterIndex(){return~~this.fileTypeSelector.value}getSelectValue_(){const selected=this.element.querySelector(".selected");if(selected){return selected.getAttribute("value")}else{return"0"}}selectShowDropDown(options){options.setAttribute("expanded","expanded");this.fileTypeSelector.setAttribute("aria-expanded","true");const selectedOption=options.querySelector(".selected");if(selectedOption){this.fileTypeSelector.setAttribute("aria-activedescendant",selectedOption.id)}}selectHideDropDown(options){options.removeAttribute("expanded");this.fileTypeSelector.setAttribute("aria-expanded","false");this.fileTypeSelector.removeAttribute("aria-activedescendant")}onActivate_(evt){const options=this.element.querySelector(".options");if(evt.target instanceof HTMLOptionElement){this.setOptionSelected(evt.target);this.selectHideDropDown(options);const changeEvent=new Event("change");this.fileTypeSelector.dispatchEvent(changeEvent)}else{const ancestor=evt.target.closest("div");if(ancestor&&ancestor.classList.contains("select")){if(options.getAttribute("expanded")==="expanded"){this.selectHideDropDown(options)}else{this.selectShowDropDown(options)}}}}onBlur_(evt){const options=this.fileTypeSelector.querySelector(".options");if(options.getAttribute("expanded")==="expanded"){this.selectHideDropDown(options)}}onKeyDown_(evt){const options=this.fileTypeSelector.querySelector(".options");const selectedItem=options.querySelector(".selected");const isExpanded=options.getAttribute("expanded")==="expanded";const fireChangeEvent=()=>{this.fileTypeSelector.dispatchEvent(new Event("change"))};const changeSelection=element=>{this.setOptionSelected(element);if(!isExpanded){fireChangeEvent()}};switch(evt.key){case"Escape":if(isExpanded){evt.stopPropagation();evt.preventDefault()}case"Tab":this.selectHideDropDown(options);break;case"Enter":case" ":if(isExpanded){fireChangeEvent();this.selectHideDropDown(options)}else{this.selectShowDropDown(options)}break;case"ArrowRight":if(isExpanded){break}case"ArrowDown":if(selectedItem&&selectedItem.nextSibling){changeSelection(selectedItem.nextSibling)}break;case"ArrowLeft":if(isExpanded){break}case"ArrowUp":if(selectedItem&&selectedItem.previousSibling){changeSelection(selectedItem.previousSibling)}break}}static findDialogFooter(dialogType,document){return new DialogFooter(dialogType,queryRequiredElement(".dialog-footer"),queryRequiredElement("#filename-input-box cr-input"))}static getOKButtonLabel_(dialogType){switch(dialogType){case DialogType.SELECT_UPLOAD_FOLDER:return str("UPLOAD_LABEL");case DialogType.SELECT_SAVEAS_FILE:return str("SAVE_LABEL");case DialogType.SELECT_FOLDER:case DialogType.SELECT_OPEN_FILE:case DialogType.SELECT_OPEN_MULTI_FILE:case DialogType.FULL_PAGE:return str("OPEN_LABEL");default:throw new Error("Unknown dialog type: "+dialogType)}}setOptionSelected(option){option.selected=true;if(util$3.isFilesNg()){const existingSelected=this.fileTypeSelector.querySelector(".options .selected");if(existingSelected){existingSelected.removeAttribute("class")}option.setAttribute("class","selected");this.fileTypeSelectorText.innerText=option.innerText;this.fileTypeSelectorText.parentElement.setAttribute("aria-activedescendant",option.id);if(option.parentNode){let optionsWidth=option.parentNode.getBoundingClientRect().width;optionsWidth-=16+12;this.fileTypeSelector.setAttribute("style","width: "+optionsWidth+"px")}}}initFileTypeFilter(fileTypes,includeAllFiles){let optionHost=this.fileTypeSelector;if(util$3.isFilesNg()){optionHost=optionHost.querySelector(".options")}for(let i=0;i<fileTypes.length;i++){const fileType=fileTypes[i];const option=document.createElement("option");let description=fileType.description;if(!description){for(let j=0;j!==fileType.extensions.length;j++){const currentDescription=FileListModel.getFileTypeString(FileType.getTypeForName("."+fileType.extensions[j]));if(!description){description=currentDescription}else if(description!=currentDescription){description=null;break}}if(!description){description=fileType.extensions.map((s=>"*."+s)).join(", ")}}option.innerText=description;option.value=i+1;option.id="file-type-option-"+(i+1);if(fileType.selected){this.setOptionSelected(option)}optionHost.appendChild(option)}if(includeAllFiles){const option=document.createElement("option");option.innerText=str("ALL_FILES_FILTER");option.value=0;if(this.dialogType_===DialogType.SELECT_SAVEAS_FILE){this.setOptionSelected(option)}optionHost.appendChild(option)}const options=this.fileTypeSelector.querySelectorAll("option");if(options.length>0&&util$3.isFilesNg()){let selectedOption=this.fileTypeSelector.querySelector(".options .selected");if(!selectedOption){selectedOption=this.fileTypeSelector.querySelector(".options option");this.setOptionSelected(selectedOption)}}this.fileTypeSelector.hidden=options.length<2}onFilenameInputFocus_(event){setTimeout((()=>{this.selectTargetNameInFilenameInput()}),0)}onFilenameInputKeyDown_(event){if(util$3.getKeyModifiers(event)+event.keyCode==="13"){this.okButton.click()}}selectTargetNameInFilenameInput(){const selectionEnd=this.filenameInput.value.lastIndexOf(".");if(selectionEnd==-1){this.filenameInput.select()}else{this.filenameInput.select(0,selectionEnd)}}}// Copyright 2013 The Chromium Authors. All rights reserved.
class FileManagerDialogBase extends BaseDialog{constructor(parentNode){super(parentNode);if(util$3.isFilesNg()){this.container.classList.add("files-ng")}}initDom(){super.initDom();super.hasModalContainer=true}showOkCancelDialog(title,message,onOk,onCancel){return this.showImpl_(title,message,onOk,onCancel)}showImpl_(title,message,onOk,onCancel){if(FileManagerDialogBase.shown){return false}FileManagerDialogBase.shown=true;const appWindow=chrome.app.window.current();if(appWindow){appWindow.focus()}super.showWithTitle(title,message,onOk,onCancel,null);return true}showWithTitle(title,message,...args){this.frame.classList.toggle("no-title",!title);super.showWithTitle(title,message,...args)}showHtml(title,message,...args){this.frame.classList.toggle("no-title",!title);super.showHtml(title,message,...args)}showBlankDialog(){return this.showImpl_("","",null,null)}showTitleOnlyDialog(title){return this.showImpl_(title,"",null,null)}showTitleAndTextDialog(title,text){this.buttons.style.display="none";return this.showImpl_(title,text,null,null)}show_(...args){this.parentNode_=util$3.getFilesAppModalDialogInstance();super.show_(...args);this.parentNode_.showModal()}hide(...args){this.parentNode_.close();FileManagerDialogBase.shown=false;super.hide(...args)}}FileManagerDialogBase.shown=false;// Copyright (c) 2018 The Chromium Authors. All rights reserved.
class InstallLinuxPackageDialog extends FileManagerDialogBase{constructor(parentNode){super(parentNode);this.frame.id="install-linux-package-dialog";this.details_frame_=this.document_.createElement("div");this.details_frame_.className="install-linux-package-details-frame";this.frame.insertBefore(this.details_frame_,this.buttons);this.details_label_=this.document_.createElement("div");this.details_label_.classList.add("install-linux-package-details-label","button2");this.details_label_.textContent=str("INSTALL_LINUX_PACKAGE_DETAILS_LABEL");this.installButton_=this.okButton.cloneNode(false);this.installButton_.textContent=str("INSTALL_LINUX_PACKAGE_INSTALL_BUTTON");this.installButton_.addEventListener("click",this.onInstallClick_.bind(this));this.buttons.insertBefore(this.installButton_,this.okButton);this.initialFocusElement_=this.installButton_;this.entry_=null}showInstallLinuxPackageDialog(entry){this.installButton_.hidden=false;this.installButton_.disabled=true;this.okButton.hidden=true;this.cancelButton.hidden=false;this.entry_=entry;const title=str("INSTALL_LINUX_PACKAGE_TITLE");const message=str("INSTALL_LINUX_PACKAGE_DESCRIPTION");const show=super.showOkCancelDialog(title,message,null,null);if(!show){console.error("InstallLinuxPackageDialog can't be shown.");return}chrome.fileManagerPrivate.getLinuxPackageInfo(this.entry_,this.onGetLinuxPackageInfo_.bind(this));this.resetDetailsFrame_(str("INSTALL_LINUX_PACKAGE_DETAILS_LOADING"))}resetDetailsFrame_(message){this.details_frame_.innerHTML="";this.details_frame_.appendChild(this.details_label_);if(message){const text=this.document_.createElement("div");text.textContent=message;text.classList.add("install-linux-package-detail-value","body2-primary");this.details_frame_.appendChild(text)}}onGetLinuxPackageInfo_(linux_package_info){if(chrome.runtime.lastError){this.resetDetailsFrame_(str("INSTALL_LINUX_PACKAGE_DETAILS_NOT_AVAILABLE"));console.error("Failed to retrieve app info: "+chrome.runtime.lastError.message);return}this.resetDetailsFrame_(null);const details=[[str("INSTALL_LINUX_PACKAGE_DETAILS_APPLICATION_LABEL"),linux_package_info.name],[str("INSTALL_LINUX_PACKAGE_DETAILS_VERSION_LABEL"),linux_package_info.version]];let description=linux_package_info.summary;if(linux_package_info.description){if(description){description+="\n\n"}description+=linux_package_info.description}if(description){details.push([str("INSTALL_LINUX_PACKAGE_DETAILS_DESCRIPTION_LABEL"),description])}this.renderDetails_(details);this.installButton_.disabled=false}renderDetails_(details){for(const detail of details){const label=this.document_.createElement("div");label.textContent=detail[0]+": ";label.className="install-linux-package-detail-label";const text=this.document_.createElement("div");text.textContent=detail[1];text.className="install-linux-package-detail-value";this.details_frame_.appendChild(label);this.details_frame_.appendChild(text);this.details_frame_.appendChild(this.document_.createElement("br"))}}onInstallClick_(){chrome.fileManagerPrivate.installLinuxPackage(assert(this.entry_),this.onInstallLinuxPackage_.bind(this));this.installButton_.hidden=true;this.cancelButton.hidden=true;this.okButton.hidden=false;this.okButton.focus()}onInstallLinuxPackage_(response,failure_reason){if(response=="started"){this.text.textContent=str("INSTALL_LINUX_PACKAGE_INSTALLATION_STARTED");return}this.title.textContent=str("INSTALL_LINUX_PACKAGE_ERROR_TITLE");this.text.textContent=str("INSTALL_LINUX_PACKAGE_ERROR_DESCRIPTION");console.error("Failed to begin package installation: "+failure_reason)}}// Copyright 2015 The Chromium Authors. All rights reserved.
class FilesMenuItem extends MenuItem{constructor(){super();this.animating_=false;this.hidden_=undefined;this.label_=null;this.iconStart_=null;this.ripple_=null;throw new Error("Designed to decorate elements")}static decorate(element){element.__proto__=FilesMenuItem.prototype;element=element;element.decorate();return element}decorate(){this.animating_=false;if(!this.children.length){this.label_=assertInstanceof(document.createElement("span"),HTMLElement);this.label_.textContent=this.textContent;this.iconStart_=assertInstanceof(document.createElement("div"),HTMLElement);this.iconStart_.classList.add("icon","start");this.textContent="";this.appendChild(this.iconStart_);this.appendChild(this.label_)}this.ripple_=assertInstanceof(document.createElement("paper-ripple"),HTMLElement);this.appendChild(this.ripple_);this.addEventListener("activate",this.onActivated_.bind(this))}onActivated_(event){if(event.originalEvent instanceof KeyboardEvent){this.ripple_.simulatedRipple()}const menu=assertInstanceof(this.parentNode,Menu);const subMenuId=event.target.getAttribute("sub-menu");if(subMenuId!==null){if(document.querySelector(subMenuId)!==null){return}}this.setMenuAsAnimating_(menu,true);const player=menu.animate([{opacity:1,offset:0},{opacity:0,offset:1}],300);player.addEventListener("finish",this.setMenuAsAnimating_.bind(this,menu,false))}setMenuAsAnimating_(menu,value){menu.classList.toggle("animating",value);for(let i=0;i<menu.menuItems.length;i++){const menuItem=menu.menuItems[i];if(menuItem instanceof FilesMenuItem){menuItem.setAnimating_(value)}}if(!value){menu.classList.remove("toolbar-menu")}}setAnimating_(value){this.animating_=value;if(this.animating_){return}if(this.hidden_!==undefined){this.hidden=this.hidden_;this.hidden_=undefined}}get hidden(){if(this.hidden_!==undefined){return this.hidden_}return Object.getOwnPropertyDescriptor(HTMLElement.prototype,"hidden").get.call(this)}set hidden(value){if(this.animating_){this.hidden_=value;return}Object.getOwnPropertyDescriptor(HTMLElement.prototype,"hidden").set.call(this,value)}get label(){return this.label_.textContent}set label(value){this.label_.textContent=value}get iconStartImage(){return this.iconStart_.style.backgroundImage}set iconStartImage(value){this.iconStart_.setAttribute("style","background-image: "+value)}}// Copyright 2020 The Chromium Authors. All rights reserved.
class PathComponent{constructor(name,url,opt_fakeEntry){this.name=name;this.url_=url;this.fakeEntry_=opt_fakeEntry||null}resolveEntry(){if(this.fakeEntry_){return Promise.resolve(this.fakeEntry_)}else{return new Promise(window.webkitResolveLocalFileSystemURL.bind(null,this.url_))}}static computeComponentsFromEntry(entry,volumeManager){const replaceRootName=(url,newRoot)=>url.slice(0,url.length-"/root".length)+newRoot;const components=[];const locationInfo=volumeManager.getLocationInfo(entry);if(!locationInfo){return components}if(util$3.isFakeEntry(entry)){components.push(new PathComponent(util$3.getEntryLabel(locationInfo,entry),entry.toURL(),entry));return components}let displayRootUrl=locationInfo.volumeInfo.displayRoot.toURL();let displayRootFullPath=locationInfo.volumeInfo.displayRoot.fullPath;const prefixEntry=locationInfo.volumeInfo.prefixEntry;if(prefixEntry){components.push(new PathComponent(prefixEntry.name,prefixEntry.toURL(),prefixEntry))}if(locationInfo.rootType===VolumeManagerCommon$3.RootType.DRIVE_OTHER){const match=entry.fullPath.match(/\/\.files-by-id\/\d+\//);if(match){displayRootFullPath=match[0]}else{displayRootFullPath="/other"}displayRootUrl=replaceRootName(displayRootUrl,displayRootFullPath);const sharedWithMeFakeEntry=locationInfo.volumeInfo.fakeEntries[VolumeManagerCommon$3.RootType.DRIVE_SHARED_WITH_ME];components.push(new PathComponent(str("DRIVE_SHARED_WITH_ME_COLLECTION_LABEL"),sharedWithMeFakeEntry.toURL(),sharedWithMeFakeEntry))}else if(locationInfo.rootType===VolumeManagerCommon$3.RootType.SHARED_DRIVE){displayRootUrl=replaceRootName(displayRootUrl,VolumeManagerCommon$3.SHARED_DRIVES_DIRECTORY_PATH);components.push(new PathComponent(util$3.getRootTypeLabel(locationInfo),displayRootUrl))}else if(locationInfo.rootType===VolumeManagerCommon$3.RootType.COMPUTER){displayRootUrl=replaceRootName(displayRootUrl,VolumeManagerCommon$3.COMPUTERS_DIRECTORY_PATH);components.push(new PathComponent(util$3.getRootTypeLabel(locationInfo),displayRootUrl))}else{components.push(new PathComponent(util$3.getRootTypeLabel(locationInfo),displayRootUrl))}let relativePath=entry.fullPath.slice(displayRootFullPath.length);if(entry.fullPath.startsWith(VolumeManagerCommon$3.SHARED_DRIVES_DIRECTORY_PATH)){relativePath=entry.fullPath.slice(VolumeManagerCommon$3.SHARED_DRIVES_DIRECTORY_PATH.length)}else if(entry.fullPath.startsWith(VolumeManagerCommon$3.COMPUTERS_DIRECTORY_PATH)){relativePath=entry.fullPath.slice(VolumeManagerCommon$3.COMPUTERS_DIRECTORY_PATH.length)}if(relativePath.indexOf("/")===0){relativePath=relativePath.slice(1)}if(relativePath.length===0){return components}let currentUrl=/^.+\/$/.test(displayRootUrl)?displayRootUrl.slice(0,displayRootUrl.length-1):displayRootUrl;const paths=relativePath.split("/");for(let i=0;i<paths.length;i++){currentUrl+="/"+encodeURIComponent(paths[i]);let path=paths[i];if(i===0&&locationInfo.rootType===VolumeManagerCommon$3.RootType.DOWNLOADS){if(path==="Downloads"){path=str("DOWNLOADS_DIRECTORY_LABEL")}if(path==="PvmDefault"){path=str("PLUGIN_VM_DIRECTORY_LABEL")}if(util$3.isFilesCameraFolderEnabled()&&path==="Camera"){path=str("CAMERA_DIRECTORY_LABEL")}}components.push(new PathComponent(path,currentUrl))}return components}}// Copyright 2014 The Chromium Authors. All rights reserved.
class FocusRow{constructor(root,boundary,delegate){this.root=root;this.boundary_=boundary||document.documentElement;this.delegate=delegate;this.eventTracker=new EventTracker}static isFocusable(element){if(!element||element.disabled){return false}let current=element;while(true){assertInstanceof(current,Element);const style=window.getComputedStyle(current);if(style.visibility==="hidden"||style.display==="none"){return false}const parent=current.parentNode;if(!parent){return false}if(parent===current.ownerDocument||parent instanceof DocumentFragment){return true}current=parent}}static getFocusableElement(element){if(element.getFocusableElement){return element.getFocusableElement()}return element}addItem(type,selectorOrElement){assert(type);let element;if(typeof selectorOrElement==="string"){element=this.root.querySelector(selectorOrElement)}else{element=selectorOrElement}if(!element){return false}element.setAttribute("focus-type",type);element.tabIndex=this.isActive()?0:-1;this.eventTracker.add(element,"blur",this.onBlur_.bind(this));this.eventTracker.add(element,"focus",this.onFocus_.bind(this));this.eventTracker.add(element,"keydown",this.onKeydown_.bind(this));this.eventTracker.add(element,"mousedown",this.onMousedown_.bind(this));return true}destroy(){this.eventTracker.removeAll()}getCustomEquivalent(sampleElement){return assert(this.getFirstFocusable())}getElements(){return Array.from(this.root.querySelectorAll("[focus-type]")).map(FocusRow.getFocusableElement)}getEquivalentElement(sampleElement){if(this.getFocusableElements().indexOf(sampleElement)>=0){return sampleElement}const sampleFocusType=this.getTypeForElement(sampleElement);if(sampleFocusType){const sameType=this.getFirstFocusable(sampleFocusType);if(sameType){return sameType}}return this.getCustomEquivalent(sampleElement)}getFirstFocusable(opt_type){const element=this.getFocusableElements().find((el=>!opt_type||el.getAttribute("focus-type")===opt_type));return element||null}getFocusableElements(){return this.getElements().filter(FocusRow.isFocusable)}getTypeForElement(element){return element.getAttribute("focus-type")||""}isActive(){return this.root.classList.contains(FocusRow.ACTIVE_CLASS)}makeActive(active){if(active===this.isActive()){return}this.getElements().forEach((function(element){element.tabIndex=active?0:-1}));this.root.classList.toggle(FocusRow.ACTIVE_CLASS,active)}onBlur_(e){if(!this.boundary_.contains(e.relatedTarget)){return}const currentTarget=e.currentTarget;if(this.getFocusableElements().indexOf(currentTarget)>=0){this.makeActive(false)}}onFocus_(e){if(this.delegate){this.delegate.onFocus(this,e)}}onMousedown_(e){if(e.button){return}if(!e.currentTarget.disabled){e.currentTarget.tabIndex=0}}onKeydown_(e){const elements=this.getFocusableElements();const currentElement=FocusRow.getFocusableElement(e.currentTarget);const elementIndex=elements.indexOf(currentElement);assert(elementIndex>=0);if(this.delegate&&this.delegate.onKeydown(this,e)){return}const isShiftTab=!e.altKey&&!e.ctrlKey&&!e.metaKey&&e.shiftKey&&e.key==="Tab";if(hasKeyModifiers(e)&&!isShiftTab){return}let index=-1;let shouldStopPropagation=true;if(isShiftTab){index=elementIndex-1;if(index<0){return}}else if(e.key==="ArrowLeft"){index=elementIndex+(isRTL()?1:-1)}else if(e.key==="ArrowRight"){index=elementIndex+(isRTL()?-1:1)}else if(e.key==="Home"){index=0}else if(e.key==="End"){index=elements.length-1}else{shouldStopPropagation=false}const elementToFocus=elements[index];if(elementToFocus){this.getEquivalentElement(elementToFocus).focus();e.preventDefault()}if(shouldStopPropagation){e.stopPropagation()}}}FocusRow.ACTIVE_CLASS="focus-row-active";// Copyright 2017 The Chromium Authors. All rights reserved.
let hideInk=false;assert(!isIOS,"pointerdown doesn't work on iOS");document.addEventListener("pointerdown",(function(){hideInk=true}),true);document.addEventListener("keydown",(function(){hideInk=false}),true);const focusWithoutInk=function(toFocus){if(!("noink"in toFocus)||!hideInk){toFocus.focus();return}assert(document===toFocus.ownerDocument);const{noink:noink}=toFocus;toFocus.noink=true;toFocus.focus();toFocus.noink=noink};// Copyright 2016 The Chromium Authors. All rights reserved.
const AnchorAlignment={BEFORE_START:-2,AFTER_START:-1,CENTER:0,BEFORE_END:1,AFTER_END:2};const DROPDOWN_ITEM_CLASS="dropdown-item";const SELECTABLE_DROPDOWN_ITEM_QUERY=`.${DROPDOWN_ITEM_CLASS}:not([hidden]):not([disabled])`;const AFTER_END_OFFSET=10;function getStartPointWithAnchor(start,end,menuLength,anchorAlignment,min,max){let startPoint=0;switch(anchorAlignment){case AnchorAlignment.BEFORE_START:startPoint=-menuLength;break;case AnchorAlignment.AFTER_START:startPoint=start;break;case AnchorAlignment.CENTER:startPoint=(start+end-menuLength)/2;break;case AnchorAlignment.BEFORE_END:startPoint=end-menuLength;break;case AnchorAlignment.AFTER_END:startPoint=end;break}if(startPoint+menuLength>max){startPoint=end-menuLength}if(startPoint<min){startPoint=start}startPoint=Math.max(min,Math.min(startPoint,max-menuLength));return startPoint}function getDefaultShowConfig(){return{top:0,left:0,height:0,width:0,anchorAlignmentX:AnchorAlignment.AFTER_START,anchorAlignmentY:AnchorAlignment.AFTER_START,minX:0,minY:0,maxX:0,maxY:0}}Polymer({_template:html`<!--css-build:shadow--><!--_html_template_start_--><style scope="cr-action-menu">:host dialog {
  background-color: var(--cr-menu-background-color);
        border: none;
        border-radius: 4px;
        box-shadow: var(--cr-menu-shadow);
        margin: 0;
        min-width: 128px;
        outline: none;
        padding: 0;
        position: absolute;
}

:host dialog::backdrop {
  background-color: transparent;
}

:host ::slotted(.dropdown-item) {
  -webkit-tap-highlight-color: transparent;
        background: none;
        border: none;
        border-radius: 0;
        box-sizing: border-box;
        color: var(--cr-primary-text-color);
        font: inherit;
        min-height: 32px;
        padding: 0 24px;
        text-align: start;
        user-select: none;
        width: 100%;
}

:host ::slotted(.dropdown-item:not([hidden])) {
  align-items: center;
        display: flex;
}

:host ::slotted(.dropdown-item[disabled]) {
  opacity: var(--cr-action-menu-disabled-item-opacity, 0.65);
}

:host ::slotted(.dropdown-item:not([disabled])) {
  cursor: pointer;
}

:host ::slotted(.dropdown-item:focus) {
  background-color: var(--cr-menu-background-focus-color);
        outline: none;
}

.item-wrapper {
  background: var(--cr-menu-background-sheen);
        outline: none;
        padding: 8px 0;
}

</style>
    <dialog id="dialog" part="dialog" on-close="onNativeDialogClose_" role="application" aria-roledescription$="[[roleDescription]]">
      <div id="wrapper" class="item-wrapper" role="menu" tabindex="-1">
        <slot id="contentNode"></slot>
      </div>
    </dialog>
<!--_html_template_end_-->`,is:"cr-action-menu",anchorElement_:null,boundClose_:null,hasMousemoveListener_:false,contentObserver_:null,resizeObserver_:null,lastConfig_:null,properties:{autoReposition:{type:Boolean,value:false},open:{type:Boolean,notify:true,value:false},roleDescription:String},listeners:{keydown:"onKeyDown_",mouseover:"onMouseover_",click:"onClick_"},detached(){this.removeListeners_()},getDialog(){return this.$.dialog},removeListeners_(){window.removeEventListener("resize",this.boundClose_);window.removeEventListener("popstate",this.boundClose_);if(this.contentObserver_){dom(this.$.contentNode).unobserveNodes(this.contentObserver_);this.contentObserver_=null}if(this.resizeObserver_){this.resizeObserver_.disconnect();this.resizeObserver_=null}},onNativeDialogClose_(e){if(e.target!==this.$.dialog){return}e.stopPropagation();this.fire("close")},onClick_(e){if(e.target===this){this.close();e.stopPropagation()}},onKeyDown_(e){e.stopPropagation();if(e.key==="Tab"||e.key==="Escape"){this.close();if(e.key==="Tab"){this.fire("tabkeyclose",{shiftKey:e.shiftKey})}e.preventDefault();return}if(e.key!=="Enter"&&e.key!=="ArrowUp"&&e.key!=="ArrowDown"){return}const options=Array.from(this.querySelectorAll(SELECTABLE_DROPDOWN_ITEM_QUERY));if(options.length===0){return}const focused=getDeepActiveElement();const index=options.findIndex((option=>FocusRow.getFocusableElement(option)===focused));if(e.key==="Enter"){if(index!==-1){return}if(isWindows||isMac){this.close();e.preventDefault();return}}e.preventDefault();this.updateFocus_(options,index,e.key!=="ArrowUp");if(!this.hasMousemoveListener_){this.hasMousemoveListener_=true;this.addEventListener("mousemove",(e=>{this.onMouseover_(e);this.hasMousemoveListener_=false}),{once:true})}},onMouseover_(e){const item=e.composedPath().find((el=>el.matches&&el.matches(SELECTABLE_DROPDOWN_ITEM_QUERY)));(item||this.$.wrapper).focus()},updateFocus_(options,focusedIndex,next){const numOptions=options.length;assert(numOptions>0);let index;if(focusedIndex===-1){index=next?0:numOptions-1}else{const delta=next?1:-1;index=(numOptions+focusedIndex+delta)%numOptions}options[index].focus()},close(){this.removeListeners_();this.$.dialog.close();this.open=false;if(this.anchorElement_){focusWithoutInk(assert(this.anchorElement_));this.anchorElement_=null}if(this.lastConfig_){this.lastConfig_=null}},showAt(anchorElement,opt_config){this.anchorElement_=anchorElement;this.anchorElement_.scrollIntoViewIfNeeded();const rect=this.anchorElement_.getBoundingClientRect();let height=rect.height;if(opt_config&&!opt_config.noOffset&&opt_config.anchorAlignmentY===AnchorAlignment.AFTER_END){height-=AFTER_END_OFFSET}this.showAtPosition(Object.assign({top:rect.top,left:rect.left,height:height,width:rect.width,anchorAlignmentX:AnchorAlignment.BEFORE_END},opt_config));this.$.wrapper.focus()},showAtPosition(config){const doc=document.scrollingElement;const scrollLeft=doc.scrollLeft;const scrollTop=doc.scrollTop;this.resetStyle_();this.$.dialog.showModal();this.open=true;config.top+=scrollTop;config.left+=scrollLeft;this.positionDialog_(Object.assign({minX:scrollLeft,minY:scrollTop,maxX:scrollLeft+doc.clientWidth,maxY:scrollTop+doc.clientHeight},config));doc.scrollTop=scrollTop;doc.scrollLeft=scrollLeft;this.addListeners_();const openedByKey=FocusOutlineManager.forDocument(document).visible;if(openedByKey){const firstSelectableItem=this.querySelector(SELECTABLE_DROPDOWN_ITEM_QUERY);if(firstSelectableItem){requestAnimationFrame((()=>{firstSelectableItem.focus()}))}}},resetStyle_(){this.$.dialog.style.left="";this.$.dialog.style.right="";this.$.dialog.style.top="0"},positionDialog_(config){this.lastConfig_=config;const c=Object.assign(getDefaultShowConfig(),config);const top=c.top;const left=c.left;const bottom=top+c.height;const right=left+c.width;const rtl=getComputedStyle(this).direction==="rtl";if(rtl){c.anchorAlignmentX*=-1}const offsetWidth=this.$.dialog.offsetWidth;const menuLeft=getStartPointWithAnchor(left,right,offsetWidth,c.anchorAlignmentX,c.minX,c.maxX);if(rtl){const menuRight=document.scrollingElement.clientWidth-menuLeft-offsetWidth;this.$.dialog.style.right=menuRight+"px"}else{this.$.dialog.style.left=menuLeft+"px"}const menuTop=getStartPointWithAnchor(top,bottom,this.$.dialog.offsetHeight,c.anchorAlignmentY,c.minY,c.maxY);this.$.dialog.style.top=menuTop+"px"},addListeners_(){this.boundClose_=this.boundClose_||function(){if(this.$.dialog.open){this.close()}}.bind(this);window.addEventListener("resize",this.boundClose_);window.addEventListener("popstate",this.boundClose_);this.contentObserver_=dom(this.$.contentNode).observeNodes((info=>{info.addedNodes.forEach((node=>{if(node.classList&&node.classList.contains(DROPDOWN_ITEM_CLASS)&&!node.getAttribute("role")){node.setAttribute("role","menuitem")}}))}));if(this.autoReposition){this.resizeObserver_=new ResizeObserver((()=>{if(this.lastConfig_){this.positionDialog_(this.lastConfig_);this.fire("cr-action-menu-repositioned")}}));this.resizeObserver_.observe(this.$.dialog)}}});// Copyright 2020 The Chromium Authors. All rights reserved.
const breadCrumbTemplate=`\n  <style>\n    :host([hidden]), [hidden] {\n      display: none !important;\n    }\n\n    :host-context(html.col-resize) > * {\n      cursor: unset !important;\n    }\n\n    :host {\n      display: flex;\n      font-family: 'Roboto Medium';\n      font-size: 14px;\n      outline: none;\n      overflow: hidden;\n      user-select: none;\n      white-space: nowrap;\n      align-items: center;\n    }\n\n    span[caret] {\n      -webkit-mask-image: url(../../images/files/ui/arrow_right.svg);\n      -webkit-mask-position: center;\n      -webkit-mask-repeat: no-repeat;\n      background-color: currentColor;\n      display: inline-flex;\n      height: 20px;\n      padding: 8px 0;\n      min-width: 20px;\n      width: 20px;\n    }\n\n    :host-context(html[dir='rtl']) span[caret] {\n      transform: scaleX(-1);\n    }\n\n    button {\n      /* don't use browser's background-color. */\n      background-color: unset;\n      border: 1px solid transparent;\n      border-radius: 4px;\n      color: var(--google-grey-700);\n      cursor: pointer;\n      display: inline-block;\n\n      /* don't use browser's button font. */\n      font: inherit;\n      height: 32px;\n      margin: 0;\n\n      /* text rendering debounce: fix a minimum width. */\n      min-width: calc(12px + 1em);\n\n      /* elide wide text */\n      max-width: 200px;\n      outline: none;\n      overflow: hidden;\n      padding: 0px 8px;\n\n      /* text rendering debounce: center. */\n      text-align: center;\n      text-overflow: ellipsis;\n    }\n\n    button[disabled] {\n      color: var(--google-grey-900);\n      cursor: default;\n      font-weight: 500;\n      margin-inline-end: 4px;\n    }\n\n    span[elider] {\n      --tap-target-shift: -7px;\n      -webkit-mask-image: url(../../images/files/ui/menu_ng.svg);\n      -webkit-mask-position: center;\n      -webkit-mask-repeat: no-repeat;\n      background-color: currentColor;\n      height: 48px;\n      margin-top: var(--tap-target-shift);\n      margin-inline-start: var(--tap-target-shift);\n      min-width: 48px;\n      position: relative;\n      transform: rotate(90deg);\n      width: 48px;\n    }\n\n    button[elider] {\n      border-radius: 50%;\n      box-sizing: border-box;\n      display: inline-flex;\n      height: 36px;\n      min-width: 36px;\n      padding: 0;\n      width: 36px;\n    }\n\n    button.dropdown-item {\n      position: relative;\n    }\n\n    :host-context(:root.pointer-active) button.dropdown-item:active {\n      background-color: rgba(0, 0, 0, 4%);\n    }\n\n    :host-context(:root:not(.pointer-active)) button.dropdown-item > paper-ripple {\n      display: none;\n    }\n\n    button.dropdown-item > paper-ripple {\n      --paper-ripple-opacity: 8%;\n      color: black;\n    }\n\n    button:not([disabled]):not(:active):hover {\n      background-color: rgba(0, 0, 0, 4%);\n    }\n\n    :host-context(:root.pointer-active) button:not(:active):hover {\n      background-color: unset;\n      cursor: default;\n    }\n\n    :host-context(:root.focus-outline-visible) > button:focus {\n      background-color: unset;\n      border: 1px solid var(--google-blue-600);\n    }\n\n    :host([checked]) button[elider] {\n      background-color: rgba(0, 0, 0, 12%);\n    }\n\n    button:active {\n      background-color: rgba(0, 0, 0, 12%);\n    }\n\n    #elider-menu button {\n      border: unset;\n      color: rgb(51, 51, 51);\n      display: block;\n      font-family: 'Roboto';\n      font-size: 13px;\n      min-width: 192px;  /* menu width */\n      max-width: min(288px, 40vw);\n      padding: 0 16px;\n      text-align: start;\n    }\n\n    :host-context(:root.focus-outline-visible) #elider-menu button:hover {\n      background-color: unset;\n    }\n\n    :host-context(:root.focus-outline-visible) #elider-menu button:focus {\n      background-color: rgba(0, 0, 0, 4%);\n    }\n  </style>\n\n  <button id='first'></button>\n  <span caret hidden></span>\n  <button elider aria-haspopup='menu' aria-expanded='false'\n      aria-label='More sub-folders…'>\n    <span elider></span>\n  </button>\n  <span caret hidden></span>\n  <button id='second'></button>\n  <span caret hidden></span>\n  <button id='third'></button>\n  <span caret hidden></span>\n  <button id='fourth'></button>\n  <cr-action-menu id='elider-menu'></cr-action-menu>\n`;class BreadCrumb extends HTMLElement{constructor(){super().attachShadow({mode:"open"}).innerHTML=breadCrumbTemplate;this.signal_=console.log;this.parts_=[]}setSignalCallback(signal){this.signal_=signal||console.log}connectedCallback(){this.onkeydown=this.onKeydown_.bind(this);this.onclick=this.onClicked_.bind(this);this.onblur=this.closeMenu_.bind(this);this.addEventListener("tabkeyclose",this.onTabkeyClose_.bind(this));this.addEventListener("close",this.onblur)}get parts(){return this.parts_}get path(){return this.parts_.join("/")}set path(path){this.parts_=path?path.split("/"):[];this.signal_("path-updated");this.renderParts_()}renderParts_(){const buttons=this.shadowRoot.querySelectorAll("button[id]");const enabled=[];function setButton(i,text){const previousSibling=buttons[i].previousElementSibling;if(previousSibling.hasAttribute("caret")){previousSibling.hidden=!text}buttons[i].removeAttribute("has-tooltip");buttons[i].textContent=window.unescape(text);buttons[i].hidden=!text;buttons[i].disabled=false;!!text&&enabled.push(i)}const parts=this.parts_;setButton(0,parts.length>0?parts[0]:null);setButton(1,parts.length==4?parts[parts.length-3]:null);buttons[1].hidden=parts.length!=4;setButton(2,parts.length>2?parts[parts.length-2]:null);setButton(3,parts.length>1?parts[parts.length-1]:null);if(enabled.length){buttons[enabled.pop()].disabled=true}this.closeMenu_();this.renderElidedParts_();this.setAttribute("path",this.path);this.signal_("path-rendered")}renderElidedParts_(){const elider=this.shadowRoot.querySelector("button[elider]");const parts=this.parts_;elider.hidden=parts.length<=4;if(elider.hidden){this.shadowRoot.querySelector("cr-action-menu").innerHTML="";elider.previousElementSibling.hidden=true;return}let elidedParts="";for(let i=1;i<parts.length-2;++i){elidedParts+=`<button class='dropdown-item'>${window.unescape(parts[i])}<paper-ripple></paper-ripple></button>`}const menu=this.shadowRoot.querySelector("cr-action-menu");menu.innerHTML=elidedParts;elider.previousElementSibling.hidden=false;elider.hidden=false}getBreadcrumbButtons_(){const parts=this.shadowRoot.querySelectorAll("button[id]:not([hidden])");if(this.parts_.length<=4){return Array.from(parts)}const elided=this.shadowRoot.querySelectorAll("cr-action-menu button");return[parts[0]].concat(Array.from(elided),Array.from(parts).slice(1))}getEllipsisButtons(){return this.getBreadcrumbButtons_().filter((button=>{if(!button.hasAttribute("has-tooltip")&&button.offsetWidth){return button.offsetWidth<button.scrollWidth}}))}getToolTipButtons(){const hasToolTip="button:not([elider])[has-tooltip]";return Array.from(this.shadowRoot.querySelectorAll(hasToolTip))}onClicked_(event){event.stopImmediatePropagation();event.preventDefault();if(event.repeat){return}const element=event.path[0];if(element.hasAttribute("elider")){this.toggleMenu_();return}if(element instanceof HTMLButtonElement){const parts=this.getBreadcrumbButtons_();this.signal_(parts.indexOf(element))}}onKeydown_(event){if(event.key===" "||event.key==="Enter"){this.onClicked_(event)}}onTabkeyClose_(event){if(!event.detail.shiftKey){this.shadowRoot.querySelector(":focus ~ button:not([hidden])").focus()}else{this.shadowRoot.querySelector("#first").focus()}}toggleMenu_(){if(this.hasAttribute("checked")){this.closeMenu_();return}let position;const elider=this.shadowRoot.querySelector("button[elider]");if(document.documentElement.getAttribute("dir")==="rtl"){position=elider.offsetLeft+elider.offsetWidth;position=document.documentElement.offsetWidth-position}else{position=elider.offsetLeft}const menu=this.shadowRoot.querySelector("cr-action-menu");const top=elider.offsetTop+elider.offsetHeight+8;menu.showAt(elider,{top:top});const dialog=menu.getDialog();dialog.style["left"]=position+"px";dialog.style["right"]=position+"px";dialog.style["overflow"]="hidden auto";dialog.style["max-height"]="272px";document.documentElement.classList.add("breadcrumb-elider-expanded");elider.setAttribute("aria-expanded","true");this.setAttribute("checked","");this.signal_("path-rendered")}closeMenu_(){document.documentElement.classList.remove("breadcrumb-elider-expanded");const elider=this.shadowRoot.querySelector("button[elider]");elider.setAttribute("aria-expanded","false");this.removeAttribute("checked");const menu=this.shadowRoot.querySelector("cr-action-menu");if(menu.getDialog().hasAttribute("open")){menu.close()}}}customElements.define("bread-crumb",BreadCrumb);// Copyright 2014 The Chromium Authors. All rights reserved.
class LocationLine extends NativeEventTarget{constructor(breadcrumbs,volumeManager,listContainer){super();this.breadcrumbs_=breadcrumbs;this.volumeManager_=volumeManager;this.listContainer_=listContainer;this.entry_=null;this.components_=[];this.filesTooltip_=null}set filesTooltip(filesTooltip){this.filesTooltip_=filesTooltip;this.filesTooltip_.addTargets(this.breadcrumbs_.querySelectorAll("[has-tooltip]"))}show(entry){if(entry===this.entry_){return}this.entry_=entry;const components=PathComponent.computeComponentsFromEntry(entry,this.volumeManager_);if(!components.length){return}if(util$3.isFilesNg()){this.updateNg_(components)}else{this.update_(components)}}getCurrentPathComponents(){return this.components_}updateNg_(components){this.components_=Array.from(components);let breadcrumbs=document.querySelector("bread-crumb");if(!breadcrumbs){breadcrumbs=document.createElement("bread-crumb");breadcrumbs.id="breadcrumbs";this.breadcrumbs_.appendChild(breadcrumbs);breadcrumbs.setSignalCallback(this.breadCrumbSignal_.bind(this))}let path=components[0].name.replace(/\//g,"%2F");for(let i=1;i<components.length;i++){path+="/"+components[i].name.replace(/\//g,"%2F")}breadcrumbs.path=path;this.breadcrumbs_.hidden=false}update_(components){this.components_=components;const newBreadcrumbs=document.createElement("div");for(let i=0;i<components.length;i++){const component=components[i];const button=document.createElement("button");button.id="breadcrumb-path-"+i;button.classList.add("breadcrumb-path","entry-name","imitate-paper-button");button.setAttribute("aria-label",component.name);button.setAttribute("has-tooltip","");if(this.filesTooltip_){this.filesTooltip_.addTarget(button)}const nameElement=document.createElement("div");nameElement.classList.add("name");nameElement.textContent=component.name;button.appendChild(nameElement);button.addEventListener("click",this.onClick_.bind(this,i));newBreadcrumbs.appendChild(button);const ripple=document.createElement("paper-ripple");ripple.classList.add("recenteringTouch");ripple.setAttribute("fit","");button.appendChild(ripple);if(i===components.length-1){break}const separator=document.createElement("span");separator.classList.add("separator");newBreadcrumbs.appendChild(separator)}let childOriginal=this.breadcrumbs_.firstChild;let childNew=newBreadcrumbs.firstChild;while(childOriginal&&childNew&&childOriginal.textContent===childNew.textContent){childOriginal=childOriginal.nextSibling;childNew=childNew.nextSibling}while(childOriginal){const childToRemove=childOriginal;childOriginal=childOriginal.nextSibling;this.breadcrumbs_.removeChild(childToRemove)}while(childNew){const childToAppend=childNew;childNew=childNew.nextSibling;this.breadcrumbs_.appendChild(childToAppend)}for(let el=this.breadcrumbs_.firstChild;el;el=el.nextSibling){if(el.classList.contains("breadcrumb-path")){const isLast=!el.nextSibling;el.tabIndex=isLast?-1:9;el.classList.toggle("breadcrumb-last",isLast)}}this.breadcrumbs_.hidden=false;this.truncate()}truncate(){if(!this.breadcrumbs_.firstChild){return}for(let item=this.breadcrumbs_.firstChild;item;item=item.nextSibling){item.removeAttribute("style");item.removeAttribute("collapsed");item.removeAttribute("hidden")}const containerWidth=this.breadcrumbs_.getBoundingClientRect().width;let pathWidth=0;let currentWidth=0;let lastSeparator;for(let item=this.breadcrumbs_.firstChild;item;item=item.nextSibling){if(item.className=="separator"){pathWidth+=currentWidth;currentWidth=item.getBoundingClientRect().width;lastSeparator=item}else{currentWidth+=item.getBoundingClientRect().width}}if(pathWidth+currentWidth<=containerWidth){return}if(!lastSeparator){this.breadcrumbs_.lastChild.style.width=Math.min(currentWidth,containerWidth)+"px";return}const lastCrumbSeparatorWidth=lastSeparator.getBoundingClientRect().width;let maxPathWidth=Math.max(Math.round(containerWidth*.3),containerWidth-currentWidth);maxPathWidth=Math.min(pathWidth,maxPathWidth);const parentCrumb=lastSeparator.previousSibling;parentCrumb.setAttribute("collapsed","");const minCrumbWidth=parentCrumb.getBoundingClientRect().width;parentCrumb.removeAttribute("collapsed");let collapsedWidth=0;if(parentCrumb&&pathWidth-parentCrumb.getBoundingClientRect().width+minCrumbWidth>maxPathWidth){parentCrumb.setAttribute("collapsed","");collapsedWidth=Math.min(maxPathWidth,parentCrumb.getBoundingClientRect().width);maxPathWidth-=collapsedWidth;if(parentCrumb.getBoundingClientRect().width!=collapsedWidth){parentCrumb.style.width=collapsedWidth+"px"}lastSeparator=parentCrumb.previousSibling;if(!lastSeparator){return}collapsedWidth+=lastSeparator.clientWidth;maxPathWidth=Math.max(0,maxPathWidth-lastSeparator.clientWidth)}pathWidth=0;for(let item=this.breadcrumbs_.firstChild;item!=lastSeparator;item=item.nextSibling){if(pathWidth===maxPathWidth){item.setAttribute("hidden","")}else{if(item.classList.contains("separator")){if(pathWidth+item.getBoundingClientRect().width+minCrumbWidth>maxPathWidth){item.setAttribute("hidden","");maxPathWidth=pathWidth}else{pathWidth+=item.getBoundingClientRect().width}}else{if(pathWidth+item.getBoundingClientRect().width>maxPathWidth){item.style.width=maxPathWidth-pathWidth+"px";pathWidth=maxPathWidth}else{pathWidth+=item.getBoundingClientRect().width}}}}currentWidth=Math.min(currentWidth,containerWidth-pathWidth-collapsedWidth);this.breadcrumbs_.lastChild.style.width=currentWidth-lastCrumbSeparatorWidth+"px"}hide(){this.breadcrumbs_.hidden=true}navigateToIndex_(index){if(index>=this.components_.length-1){this.listContainer_.focus();return}const pathComponent=this.components_[index];pathComponent.resolveEntry().then((entry=>{const pathClickEvent=new Event("pathclick");pathClickEvent.entry=entry;this.dispatchEvent(pathClickEvent)}));metrics.recordUserAction("ClickBreadcrumbs")}breadCrumbSignal_(signal){if(typeof signal==="number"){this.navigateToIndex_(Number(signal))}}onClick_(index,event){let button=event.target;while(button&&!button.classList.contains("breadcrumb-path")){button=button.parentElement}if(button){button.blur()}this.navigateToIndex_(index)}}// Copyright 2015 The Chromium Authors. All rights reserved.
class DriveShareAction{constructor(entry,metadataModel,volumeManager,ui){this.entry_=entry;this.metadataModel_=metadataModel;this.volumeManager_=volumeManager;this.ui_=ui}static create(entries,metadataModel,volumeManager,ui){if(entries.length!==1){return null}return new DriveShareAction(entries[0],metadataModel,volumeManager,ui)}execute(){chrome.fileManagerPrivate.getEntryProperties([this.entry_],["shareUrl"],(results=>{if(chrome.runtime.lastError){console.error(chrome.runtime.lastError.message);return}if(results.length!=1){console.error("getEntryProperties for shareUrl should return 1 entry "+"(returned "+results.length+")");return}if(results[0].shareUrl===undefined){console.error("getEntryProperties shareUrl is undefined");return}util$3.visitURL(assert(results[0].shareUrl))}))}canExecute(){const metadata=this.metadataModel_.getCache([this.entry_],["canShare"]);assert(metadata.length===1);const canShareItem=metadata[0].canShare!==false;return this.volumeManager_.getDriveConnectionState().type!==chrome.fileManagerPrivate.DriveConnectionStateType.OFFLINE&&canShareItem}getTitle(){return null}getEntries(){return[this.entry_]}}class DriveToggleOfflineAction{constructor(entries,metadataModel,driveSyncHandler,ui,volumeManager,value,onExecute){this.entries_=entries;this.metadataModel_=metadataModel;this.driveSyncHandler_=driveSyncHandler;this.volumeManager_=volumeManager;this.ui_=ui;this.value_=value;this.onExecute_=onExecute;this.containsOnlyHosted_=metadataModel.getCache(entries,["hosted"]).every((metadata=>metadata.hosted))}static create(entries,metadataModel,driveSyncHandler,ui,volumeManager,value,onExecute){const actionableEntries=entries.filter((entry=>metadataModel.getCache([entry],["pinned"])[0].pinned!==value));if(actionableEntries.length===0){return null}return new DriveToggleOfflineAction(actionableEntries,metadataModel,driveSyncHandler,ui,volumeManager,value,onExecute)}execute(){const entries=this.entries_;if(entries.length==0){return}let currentEntry;let error=false;const steps={start:()=>{if(entries.length===0){return}currentEntry=entries.shift();if(this.volumeManager_.getDriveConnectionState().canPinHostedFiles||!this.metadataModel_.getCache([currentEntry],["hosted"])[0].hosted){chrome.fileManagerPrivate.pinDriveFile(currentEntry,this.value_,steps.entryPinned)}else{steps.start()}},entryPinned:()=>{error=!!chrome.runtime.lastError;metrics.recordBoolean("DrivePinSuccess",!error);if(this.metadataModel_.getCache([currentEntry],["hosted"])[0].hosted){metrics.recordBoolean("DriveHostedFilePinSuccess",!error)}if(error&&this.value_){this.metadataModel_.get([currentEntry],["size"]).then((results=>{steps.showError(results[0].size)}));return}this.metadataModel_.notifyEntriesChanged([currentEntry]);this.metadataModel_.get([currentEntry],["pinned"]).then(steps.updateUI)},updateUI:()=>{if(entries.length===0){this.onExecute_()}this.ui_.listContainer.currentView.updateListItemsMetadata("external",[currentEntry]);if(!error){steps.start()}},showError:size=>{this.ui_.alertDialog.show(strf("OFFLINE_FAILURE_MESSAGE",unescape(currentEntry.name)),null,null,null)}};steps.start();if(this.value_&&this.driveSyncHandler_.isSyncSuppressed()){this.driveSyncHandler_.showDisabledMobileSyncNotification()}}canExecute(){return this.volumeManager_.getDriveConnectionState().canPinHostedFiles||!this.containsOnlyHosted_}getTitle(){return null}getEntries(){return this.entries_}}class DriveCreateFolderShortcutAction{constructor(entry,shortcutsModel,onExecute){this.entry_=entry;this.shortcutsModel_=shortcutsModel;this.onExecute_=onExecute}static create(entries,volumeManager,shortcutsModel,onExecute){if(entries.length!==1||entries[0].isFile){return null}const locationInfo=volumeManager.getLocationInfo(entries[0]);if(!locationInfo||locationInfo.isSpecialSearchRoot||locationInfo.isRootEntry){return null}return new DriveCreateFolderShortcutAction(entries[0],shortcutsModel,onExecute)}execute(){this.shortcutsModel_.add(this.entry_);this.onExecute_()}canExecute(){return!this.shortcutsModel_.exists(this.entry_)}getTitle(){return null}getEntries(){return[this.entry_]}}class DriveRemoveFolderShortcutAction{constructor(entry,shortcutsModel,onExecute){this.entry_=entry;this.shortcutsModel_=shortcutsModel;this.onExecute_=onExecute}static create(entries,shortcutsModel,onExecute){if(entries.length!==1||entries[0].isFile||!shortcutsModel.exists(entries[0])){return null}return new DriveRemoveFolderShortcutAction(entries[0],shortcutsModel,onExecute)}execute(){this.shortcutsModel_.remove(this.entry_);this.onExecute_()}canExecute(){return this.shortcutsModel_.exists(this.entry_)}getTitle(){return null}getEntries(){return[this.entry_]}}class DriveManageAction{constructor(entry,volumeManager,ui){this.entry_=entry;this.volumeManager_=volumeManager;this.ui_=ui}static create(entries,volumeManager,ui){if(entries.length!==1){return null}return new DriveManageAction(entries[0],volumeManager,ui)}execute(){chrome.fileManagerPrivate.getEntryProperties([this.entry_],["alternateUrl"],(results=>{if(chrome.runtime.lastError){console.error(chrome.runtime.lastError.message);return}if(results.length!=1){console.error("getEntryProperties for alternateUrl should return 1 entry "+"(returned "+results.length+")");return}if(results[0].alternateUrl===undefined){console.error("getEntryProperties alternateUrl is undefined");return}util$3.visitURL(assert(results[0].alternateUrl))}))}canExecute(){return this.volumeManager_.getDriveConnectionState().type!==chrome.fileManagerPrivate.DriveConnectionStateType.OFFLINE}getTitle(){return null}getEntries(){return[this.entry_]}}class CustomAction{constructor(entries,id,title,onExecute){this.entries_=entries;this.id_=id;this.title_=title;this.onExecute_=onExecute}execute(){chrome.fileManagerPrivate.executeCustomAction(this.entries_,this.id_,(()=>{if(chrome.runtime.lastError){console.error("Failed to execute a custom action because of: "+chrome.runtime.lastError.message)}this.onExecute_()}))}canExecute(){return true}getTitle(){return this.title_}getEntries(){return this.entries_}}class ActionsModel extends NativeEventTarget{constructor(volumeManager,metadataModel,shortcutsModel,driveSyncHandler,ui,entries){super();this.volumeManager_=volumeManager;this.metadataModel_=metadataModel;this.shortcutsModel_=shortcutsModel;this.driveSyncHandler_=driveSyncHandler;this.ui_=ui;this.entries_=entries;this.actions_={};this.initializePromiseReject_=null;this.initializePromise_=null;this.destroyed_=false}initialize(){if(this.initializePromise_){return this.initializePromise_}this.initializePromise_=new Promise(((fulfill,reject)=>{if(this.destroyed_){reject();return}this.initializePromiseReject_=reject;const volumeInfo=this.entries_.length>=1&&this.volumeManager_.getVolumeInfo(this.entries_[0]);if(!volumeInfo||!util$3.isSameVolume(this.entries_,this.volumeManager_)){fulfill({});return}const actions={};switch(volumeInfo.volumeType){case VolumeManagerCommon$3.VolumeType.DRIVE:const shareAction=DriveShareAction.create(this.entries_,this.metadataModel_,this.volumeManager_,this.ui_);if(shareAction){actions[ActionsModel.CommonActionId.SHARE]=shareAction}const saveForOfflineAction=DriveToggleOfflineAction.create(this.entries_,this.metadataModel_,this.driveSyncHandler_,this.ui_,this.volumeManager_,true,this.invalidate_.bind(this));if(saveForOfflineAction){actions[ActionsModel.CommonActionId.SAVE_FOR_OFFLINE]=saveForOfflineAction}const offlineNotNecessaryAction=DriveToggleOfflineAction.create(this.entries_,this.metadataModel_,this.driveSyncHandler_,this.ui_,this.volumeManager_,false,this.invalidate_.bind(this));if(offlineNotNecessaryAction){actions[ActionsModel.CommonActionId.OFFLINE_NOT_NECESSARY]=offlineNotNecessaryAction}const createFolderShortcutAction=DriveCreateFolderShortcutAction.create(this.entries_,this.volumeManager_,this.shortcutsModel_,this.invalidate_.bind(this));if(createFolderShortcutAction){actions[ActionsModel.InternalActionId.CREATE_FOLDER_SHORTCUT]=createFolderShortcutAction}const removeFolderShortcutAction=DriveRemoveFolderShortcutAction.create(this.entries_,this.shortcutsModel_,this.invalidate_.bind(this));if(removeFolderShortcutAction){actions[ActionsModel.InternalActionId.REMOVE_FOLDER_SHORTCUT]=removeFolderShortcutAction}const manageInDriveAction=DriveManageAction.create(this.entries_,this.volumeManager_,this.ui_);if(manageInDriveAction){actions[ActionsModel.InternalActionId.MANAGE_IN_DRIVE]=manageInDriveAction}fulfill(actions);break;case VolumeManagerCommon$3.VolumeType.PROVIDED:chrome.fileManagerPrivate.getCustomActions(this.entries_,(customActions=>{if(chrome.runtime.lastError){console.error("Failed to fetch custom actions because of: "+chrome.runtime.lastError.message)}else{customActions.forEach((action=>{actions[action.id]=new CustomAction(this.entries_,action.id,action.title||null,this.invalidate_.bind(this))}))}fulfill(actions)}));break;default:fulfill(actions)}})).then((actions=>{this.actions_=actions}));return this.initializePromise_}getActions(){return this.actions_}getAction(id){return this.actions_[id]||null}destroy(){this.destroyed_=true;if(this.initializePromiseReject_!==null){const reject=this.initializePromiseReject_;this.initializePromiseReject_=null;reject()}}invalidate_(){if(this.initializePromiseReject_!==null){const reject=this.initializePromiseReject_;this.initializePromiseReject_=null;this.initializePromise_=null;reject()}dispatchSimpleEvent(this,"invalidated",true)}getEntries(){return this.entries_}}ActionsModel.CommonActionId={SHARE:"SHARE",SAVE_FOR_OFFLINE:"SAVE_FOR_OFFLINE",OFFLINE_NOT_NECESSARY:"OFFLINE_NOT_NECESSARY"};ActionsModel.InternalActionId={CREATE_FOLDER_SHORTCUT:"pin-folder",REMOVE_FOLDER_SHORTCUT:"unpin-folder",MANAGE_IN_DRIVE:"manage-in-drive"};// Copyright 2015 The Chromium Authors. All rights reserved.
class ActionsSubmenu{constructor(menu){this.menu_=menu;this.separator_=queryRequiredElement("#actions-separator",this.menu_);this.items_=[]}addMenuItem_(options){const menuItem=this.menu_.addMenuItem(options);menuItem.parentNode.insertBefore(menuItem,this.separator_);this.items_.push(menuItem);return menuItem}setActionsModel(actionsModel,element){this.items_.forEach((item=>{item.parentNode.removeChild(item)}));this.items_=[];const remainingActions={};if(actionsModel){const actions=actionsModel.getActions();Object.keys(actions).forEach((key=>{remainingActions[key]=actions[key]}))}const shareAction=remainingActions[ActionsModel.CommonActionId.SHARE];if(shareAction){const menuItem=this.addMenuItem_({});menuItem.command="#share";menuItem.classList.toggle("hide-on-toolbar",true);delete remainingActions[ActionsModel.CommonActionId.SHARE]}util$3.queryDecoratedElement("#share",Command).canExecuteChange(element);const manageInDriveAction=remainingActions[ActionsModel.InternalActionId.MANAGE_IN_DRIVE];if(manageInDriveAction){const menuItem=this.addMenuItem_({});menuItem.command="#manage-in-drive";menuItem.classList.toggle("hide-on-toolbar",true);delete remainingActions[ActionsModel.InternalActionId.MANAGE_IN_DRIVE]}util$3.queryDecoratedElement("#manage-in-drive",Command).canExecuteChange(element);util$3.queryDecoratedElement("#unpin-folder",Command).canExecuteChange(element);const saveForOfflineAction=remainingActions[ActionsModel.CommonActionId.SAVE_FOR_OFFLINE];const offlineNotNecessaryAction=remainingActions[ActionsModel.CommonActionId.OFFLINE_NOT_NECESSARY];if(saveForOfflineAction||offlineNotNecessaryAction){const menuItem=this.addMenuItem_({});menuItem.command="#toggle-pinned";menuItem.classList.toggle("hide-on-toolbar",true);if(saveForOfflineAction){delete remainingActions[ActionsModel.CommonActionId.SAVE_FOR_OFFLINE]}if(offlineNotNecessaryAction){delete remainingActions[ActionsModel.CommonActionId.OFFLINE_NOT_NECESSARY]}}util$3.queryDecoratedElement("#toggle-pinned",Command).canExecuteChange(element);let hasCustomActions=false;Object.keys(remainingActions).forEach((key=>{const action=remainingActions[key];hasCustomActions=hasCustomActions||!!action.getTitle();const options={label:action.getTitle()};const menuItem=this.addMenuItem_(options);menuItem.addEventListener("activate",(()=>{action.execute()}))}));this.separator_.classList.toggle("hide-on-toolbar",!hasCustomActions);this.separator_.hidden=!this.items_.length}}// Copyright 2015 The Chromium Authors. All rights reserved.
class ProvidersMenu{constructor(model,menu){this.model_=model;this.menu_=menu;this.menu_.addEventListener("update",this.onUpdate_.bind(this))}clearProviders_(){while(this.menu_.firstChild){this.menu_.removeChild(this.menu_.lastChild)}}addMenuItem_(){const menuItem=this.menu_.addMenuItem({});decorate(menuItem,FilesMenuItem);return menuItem}addProvider_(providerId,iconSet,name){const item=this.addMenuItem_();item.label=name;const iconImage=util$3.iconSetToCSSBackgroundImageValue(iconSet);item.iconStartImage=iconImage;item.addEventListener("activate",this.onItemActivate_.bind(this,providerId))}onUpdate_(event){this.model_.getMountableProviders().then((providers=>{this.clearProviders_();providers.forEach((provider=>{this.addProvider_(provider.providerId,provider.iconSet,provider.name)}))}))}onItemActivate_(providerId,event){this.model_.requestMount(providerId)}updateSubMenu(){const updateEvent=new Event("update");this.menu_.dispatchEvent(updateEvent)}}// Copyright (c) 2018 The Chromium Authors. All rights reserved.
class MultiMenu{constructor(){this.subMenuOnLeft=null;this.overflow=null;this.currentMenu=null;this.subMenu=null;this.parentMenuItem=null;this.selectedItem=null;this.menuEndGap_=0;this.showingEvents_=null;this.contains_=undefined;this.handleKeyDown_=undefined;this.hide_=undefined;this.show_=undefined}static decorate(element){decorate(element,Menu);element.contains_=Menu.prototype["contains"];element.handleKeyDown_=Menu.prototype["handleKeyDown"];element.hide_=Menu.prototype["hide"];element.show_=Menu.prototype["show"];Object.getOwnPropertyNames(MultiMenu.prototype).forEach((name=>{if(name!=="constructor"&&!Object.getOwnPropertyDescriptor(element,name)){element[name]=MultiMenu.prototype[name]}}));element=element;element.decorate();return element}decorate(){this.showingEvents_=new EventTracker;this.currentMenu=this;this.menuEndGap_=18}handleEvent(e){switch(e.type){case"activate":if(e.currentTarget===this){const item=this.findMenuItem(e.target);if(item){const subMenuId=item.getAttribute("sub-menu");if(subMenuId){e.preventDefault();e.stopPropagation();if(!item.getAttribute("sub-menu-shown")){this.showSubMenu()}}}}else{const activationEvent=document.createEvent("Event");activationEvent.initEvent("activate",true,true);activationEvent.originalEvent=e.originalEvent;this.dispatchEvent(activationEvent)}break;case"keydown":switch(e.key){case"ArrowLeft":case"ArrowRight":if(!this.currentMenu){break}if(this.currentMenu===this){const menuItem=this.currentMenu.selectedItem;const subMenu=this.getSubMenuFromItem(menuItem);if(subMenu){if(subMenu.hidden){break}if(this.subMenuOnLeft&&e.key=="ArrowLeft"){this.moveSelectionToSubMenu_(subMenu)}else if(this.subMenuOnLeft===false&&e.key=="ArrowRight"){this.moveSelectionToSubMenu_(subMenu)}}}else{const subMenu=this.currentMenu;if(subMenu.selectedIndex==0){if(this.subMenuOnLeft&&e.key=="ArrowRight"){this.moveSelectionToTopMenu_(subMenu)}else if(this.subMenuOnLeft===false&&e.key=="ArrowLeft"){this.moveSelectionToTopMenu_(subMenu)}}}break;case"ArrowDown":case"ArrowUp":if(this.currentMenu===this){this.hideSubMenu_()}break}break;case"mouseover":case"mouseout":this.manageSubMenu(e);break}}handleKeyDown(e){if(!this.currentMenu){return false}if(this.currentMenu===this){return this.handleKeyDown_(e)}else{return this.currentMenu.handleKeyDown(e)}}positionSubMenu_(item,subMenu){const style=subMenu.style;style.marginTop="0";const itemRect=item.getBoundingClientRect();const viewportWidth=window.innerWidth;const viewportHeight=window.innerHeight;const childRect=subMenu.getBoundingClientRect();const maxShift=itemRect.width/2;style.left=style.right=style.top=style.bottom="auto";if(itemRect.right+childRect.width>viewportWidth&&viewportWidth-itemRect.right<itemRect.left){let leftPosition=itemRect.left-childRect.width;if(leftPosition<0){if(leftPosition<-maxShift){leftPosition+=maxShift}else{leftPosition=0}}this.subMenuOnLeft=true;style.left=leftPosition+"px"}else{let rightPosition=itemRect.right;if(rightPosition+childRect.width>viewportWidth){if(rightPosition+childRect.width-viewportWidth>maxShift){rightPosition-=maxShift}else{rightPosition=viewportWidth-childRect.width}}this.subMenuOnLeft=false;style.left=rightPosition+"px"}style.top=itemRect.top+"px";style.maxHeight=viewportHeight-itemRect.top-this.menuEndGap_+"px";style.overflowY="auto"}getSubMenuFromItem(item){if(!item){return null}const subMenuId=item.getAttribute("sub-menu");if(subMenuId===null){return null}return document.querySelector(subMenuId)}showSubMenu(){const item=this.selectedItem;const subMenu=this.getSubMenuFromItem(item);if(subMenu){this.subMenu=subMenu;item.setAttribute("sub-menu-shown","shown");this.positionSubMenu_(item,subMenu);subMenu.show();subMenu.parentMenuItem=item;this.moveSelectionToSubMenu_(subMenu)}}findMenuItem(node){while(node&&node.parentNode!==this&&!(node instanceof MenuItem)){node=node.parentNode}return node?assertInstanceof(node,MenuItem):null}manageSubMenu(e){const item=this.findMenuItem(e.target);const subMenu=this.getSubMenuFromItem(item);if(!subMenu){return}this.subMenu=subMenu;switch(e.type){case"activate":case"mouseover":const showing=this.querySelector("cr-menu-item[sub-menu-shown]");if(showing&&showing!==item){showing.removeAttribute("sub-menu-shown");const shownSubMenu=this.getSubMenuFromItem(showing);if(shownSubMenu){shownSubMenu.hide()}}item.setAttribute("sub-menu-shown","shown");this.positionSubMenu_(item,subMenu);subMenu.show();break;case"mouseout":const childRect=subMenu.getBoundingClientRect();if(childRect.left<=e.clientX&&e.clientX<childRect.right&&childRect.top<=e.clientY&&e.clientY<childRect.bottom){this.currentMenu=subMenu;break}item.removeAttribute("sub-menu-shown");subMenu.hide();this.subMenu=null;this.currentMenu=this;break}}moveSelectionToSubMenu_(subMenu){this.selectedItem=null;this.currentMenu=subMenu;subMenu.selectedIndex=0;subMenu.focusSelectedItem()}actAsMenu_(){return this}moveSelectionToTopMenu_(subMenu){subMenu.selectedItem=null;this.currentMenu=this;this.selectedItem=subMenu.parentMenuItem;const menu=this.actAsMenu_();menu.focusSelectedItem()}addSubMenuListeners(){const items=this.querySelectorAll("cr-menu-item[sub-menu]");items.forEach((menuItem=>{const subMenuId=menuItem.getAttribute("sub-menu");if(subMenuId){const subMenu=document.querySelector(subMenuId);if(subMenu){this.showingEvents_.add(subMenu,"activate",this)}}}))}show(opt_mouseDownPos){this.show_(opt_mouseDownPos);const doc=this.ownerDocument;if(doc){this.showingEvents_.add(doc,"keydown",this,true)}this.showingEvents_.add(this,"activate",this,true);this.showingEvents_.add(this,"mouseover",this);this.showingEvents_.add(this,"mouseout",this);this.addSubMenuListeners()}hideSubMenu_(){const items=this.querySelectorAll("cr-menu-item[sub-menu][sub-menu-shown]");items.forEach((menuItem=>{const subMenuId=menuItem.getAttribute("sub-menu");if(subMenuId){const subMenu=document.querySelector(subMenuId);if(subMenu){subMenu.hide()}menuItem.removeAttribute("sub-menu-shown")}}));this.currentMenu=this}hide(){this.showingEvents_.removeAll();this.hideSubMenu_();this.hide_()}contains(node){return this.contains_(node)||this.subMenu&&this.subMenu.contains(node)}}
// Copyright (c) 2020 The Chromium Authors. All rights reserved.
class MultiMenuButton{constructor(){this.overflow=null;this.menuEndGap_=0;this.showingEvents_=null;this.menu_=null;this.observer_=null;this.observedElement_=null;throw new Error("Designed to decorate elements")}static decorate(element){Object.getOwnPropertyNames(MultiMenuButton.prototype).forEach((name=>{if(name!=="constructor"&&!Object.getOwnPropertyDescriptor(element,name)){element[name]=MultiMenuButton.prototype[name]}}));Object.defineProperty(element,"menu",{get(){return this.menu_},set(menu){this.setMenu_(menu)},enumerable:true,configurable:true});element=element;element.decorate();return element}decorate(){this.setAttribute("aria-expanded","false");this.ownerDocument.addEventListener("touchstart",this,{passive:true});this.addEventListener("mousedown",this);this.addEventListener("keydown",this);this.addEventListener("dblclick",this);this.addEventListener("blur",this);this.menuEndGap_=18;this.classList.add("custom-appearance");this.classList.add("menu-button");this.menu=this.getAttribute("menu");this.observer_=new ResizeObserver((()=>{this.positionMenu_()}));this.showingEvents_=new EventTracker}get menu(){return this.menu_}setMenu_(menu){if(typeof menu=="string"&&menu[0]=="#"){menu=assert(this.ownerDocument.body.querySelector(menu));decorate(menu,MultiMenu)}this.menu_=menu;if(menu){if(menu.id){this.setAttribute("menu","#"+menu.id)}}}set menu(menu){this.setMenu_(menu)}shouldDismissMenu_(e){return e.target instanceof Node&&!this.contains(e.target)&&!this.menu.contains(e.target)}showSubMenu(){if(!this.isMenuShown()){return}this.menu.showSubMenu()}hasVisibleMenu_(){if(this.isMenuShown()){return true}return false}handleEvent(e){if(!this.menu){return}switch(e.type){case"touchstart":if(this.shouldDismissMenu_(e)){this.hideMenuWithoutTakingFocus_()}break;case"mousedown":if(e.currentTarget==this.ownerDocument){if(this.shouldDismissMenu_(e)){this.hideMenuWithoutTakingFocus_()}else{e.preventDefault()}}else{if(this.isMenuShown()){this.hideMenuWithoutTakingFocus_()}else if(e.button==0){this.showMenu(false,{x:e.screenX,y:e.screenY});if(!(document.hasFocus()&&(document.activeElement.tagName==="BUTTON"||document.activeElement.tagName==="CR-BUTTON"||document.activeElement.tagName==="CR-INPUT"))){e.preventDefault()}}}this.classList.add("using-mouse");break;case"keydown":this.handleKeyDown(e);if(e.currentTarget==this.ownerDocument&&this.hasVisibleMenu_()){this.menu.handleKeyDown(e);e.preventDefault();e.stopPropagation()}this.classList.remove("using-mouse");break;case"focus":if(this.shouldDismissMenu_(e)){this.hideMenu();this.classList.remove("using-mouse")}break;case"blur":this.classList.remove("using-mouse");break;case"activate":const hideDelayed=e.target instanceof MenuItem&&e.target.checkable;const hideType=hideDelayed?HideType.DELAYED:HideType.INSTANT;if(this.menu.getSubMenuFromItem(e.target)!==null){break}if(e.originalEvent instanceof MouseEvent||e.originalEvent instanceof TouchEvent){this.hideMenuWithoutTakingFocus_(hideType)}else{this.hideMenu(hideType)}break;case"popstate":case"resize":this.hideMenu();break;case"contextmenu":if(!this.menu||!this.menu.contains(e.target)){this.showMenu(true,{x:e.screenX,y:e.screenY})}e.preventDefault();e.stopPropagation();break;case"dblclick":e.preventDefault();e.stopPropagation();break}}showMenu(shouldSetFocus,opt_mousePos){this.hideMenu();this.menu.updateCommands(this);const event=new UIEvent("menushow",{bubbles:true,cancelable:true,view:window});if(!this.dispatchEvent(event)){return}this.menu.contextElement=this;this.menu.show(opt_mousePos);this.setAttribute("aria-expanded","true");this.setAttribute("menu-shown","");const doc=this.ownerDocument;const win=assert(doc.defaultView);this.showingEvents_.add(doc,"keydown",this,true);this.showingEvents_.add(doc,"mousedown",this,true);this.showingEvents_.add(doc,"focus",this,true);this.showingEvents_.add(doc,"scroll",this,true);this.showingEvents_.add(win,"popstate",this);this.showingEvents_.add(win,"resize",this);this.showingEvents_.add(this.menu,"contextmenu",this);this.showingEvents_.add(this.menu,"activate",this);this.observedElement_=this.parentElement;this.observer_.observe(assert(this.observedElement_));this.positionMenu_();if(shouldSetFocus){this.menu.focusSelectedItem()}}hideMenu(opt_hideType){this.hideMenuInternal_(true,opt_hideType)}hideMenuWithoutTakingFocus_(opt_hideType){this.hideMenuInternal_(false,opt_hideType)}hideMenuInternal_(shouldTakeFocus,opt_hideType){if(!this.isMenuShown()){return}this.setAttribute("aria-expanded","false");this.removeAttribute("menu-shown");if(opt_hideType==HideType.DELAYED){this.menu.classList.add("hide-delayed")}else{this.menu.classList.remove("hide-delayed")}this.menu.hide();this.showingEvents_.removeAll();if(shouldTakeFocus){this.focus()}this.observer_.unobserve(assert(this.observedElement_));const event=new UIEvent("menuhide",{bubbles:true,cancelable:false,view:window});this.dispatchEvent(event)}isMenuShown(){return this.hasAttribute("menu-shown")}positionMenu_(){const style=this.menu.style;if(util$3.isFilesNg()){style.marginTop="8px"}style.maxHeight="none";const invertLeftRight=false;const anchorType=AnchorType.BELOW;positionPopupAroundElement(this,this.menu,anchorType,invertLeftRight);const viewportHeight=window.innerHeight;const menuRect=this.menu.getBoundingClientRect();style.maxHeight=viewportHeight-this.menuEndGap_+"px";if(menuRect.height+this.menuEndGap_>viewportHeight){style.bottom="2px"}style.overflowY="auto"}handleKeyDown(e){switch(e.key){case"ArrowDown":case"ArrowUp":case"Enter":case" ":if(!this.isMenuShown()){this.showMenu(true)}e.preventDefault();break;case"Escape":case"Tab":this.hideMenu();break}}}MultiMenuButton.prototype.__proto__=HTMLButtonElement.prototype;
// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class ComboButton extends MultiMenuButton{constructor(){super();this.defaultItem_=null;this.trigger_=null;this.actionNode_=null;this.filesToggleRipple_=null;this.disabled=false;this.multiple=false}clear(){this.menu.clear();this.multiple=false}addDropDownItem(item){this.multiple=true;const menuitem=this.menu.addMenuItem(item);if(this.menu.classList.contains("files-menu")){decorate(menuitem,FilesMenuItem)}menuitem.data=item;if(item.iconType){menuitem.style.backgroundImage="";menuitem.setAttribute("file-type-icon",item.iconType)}if(item.bold){menuitem.style.fontWeight="bold"}return menuitem}addSeparator(){this.menu.addSeparator()}get defaultItem(){return this.defaultItem_}setDefaultItem_(defaultItem){this.defaultItem_=defaultItem;this.actionNode_.textContent=defaultItem.label||""}set defaultItem(defaultItem){this.setDefaultItem_(defaultItem)}addBooleanProperty_(property){Object.defineProperty(this,property,{get(){return this.getAttribute(property)},set(value){if(value){this.setAttribute(property,property)}else{this.removeAttribute(property)}},enumerable:true,configurable:true})}static decorate(el){Object.getOwnPropertyNames(ComboButton.prototype).forEach((name=>{if(name!=="constructor"&&name!=="multiple"&&name!=="disabled"){el[name]=ComboButton.prototype[name]}}));Object.getOwnPropertyNames(MultiMenuButton.prototype).forEach((name=>{if(name!=="constructor"&&!Object.getOwnPropertyDescriptor(el,name)){el[name]=MultiMenuButton.prototype[name]}}));Object.defineProperty(el,"menu",{get(){return this.menu_},set(menu){this.setMenu_(menu)},enumerable:true,configurable:true});Object.defineProperty(el,"defaultItem",{get(){return this.defaultItem_},set(defaultItem){this.setDefaultItem_(defaultItem)},enumerable:true,configurable:true});el.addBooleanProperty_("multiple");el.addBooleanProperty_("disabled");el=el;el.decorate();return el}decorate(){MultiMenuButton.prototype.decorate.call(this);this.classList.add("combobutton");const buttonLayer=this.ownerDocument.createElement("div");buttonLayer.classList.add("button");this.appendChild(buttonLayer);this.actionNode_=this.ownerDocument.createElement("div");this.actionNode_.classList.add("action");buttonLayer.appendChild(this.actionNode_);const triggerIcon=this.ownerDocument.createElement("iron-icon");triggerIcon.setAttribute("icon","files:arrow-drop-down");this.trigger_=this.ownerDocument.createElement("div");this.trigger_.classList.add("trigger");this.trigger_.appendChild(triggerIcon);buttonLayer.appendChild(this.trigger_);const ripplesLayer=this.ownerDocument.createElement("div");ripplesLayer.classList.add("ripples");this.appendChild(ripplesLayer);if(util$3.isFilesNg()){ripplesLayer.setAttribute("hidden","")}this.filesToggleRipple_=this.ownerDocument.createElement("files-toggle-ripple");ripplesLayer.appendChild(this.filesToggleRipple_);this.paperRipple_=this.ownerDocument.createElement("paper-ripple");ripplesLayer.appendChild(this.paperRipple_);this.addEventListener("click",this.handleButtonClick_.bind(this));this.addEventListener("menushow",this.handleMenuShow_.bind(this));this.addEventListener("menuhide",this.handleMenuHide_.bind(this));this.trigger_.addEventListener("click",this.handleTriggerClicked_.bind(this));this.menu.addEventListener("activate",this.handleMenuActivate_.bind(this));this.removeEventListener("mousedown",this);this.trigger_.addEventListener("mousedown",this)}handleKeyDown(e){switch(e.key){case"ArrowDown":case"ArrowUp":if(!this.isMenuShown()){this.showMenu(false)}e.preventDefault();break;case"Escape":this.hideMenu();break}}handleTriggerClicked_(event){event.stopPropagation()}handleMenuActivate_(event){this.dispatchSelectEvent(event.target.data)}handleButtonClick_(event){if(this.multiple){if(this.isMenuShown()){this.hideMenu()}else{this.showMenu(true)}}else{this.paperRipple_.simulatedRipple();this.blur();this.dispatchSelectEvent(this.defaultItem_)}}handleMenuShow_(){this.filesToggleRipple_.activated=true}handleMenuHide_(){this.filesToggleRipple_.activated=false}dispatchSelectEvent(item){const selectEvent=new Event("select");selectEvent.item=item;this.dispatchEvent(selectEvent)}}// Copyright 2013 The Chromium Authors. All rights reserved.
class ProgressCenterPanel{constructor(){this.feedbackHost_=document.querySelector("#progress-panel");this.items_={};this.cancelCallback=null;this.dismissErrorItemCallback=null;this.PENDING_TIME_MS_=2e3;if(window.IN_TEST){this.PENDING_TIME_MS_=0}}generateSourceString_(item,info){switch(item.state){case"progressing":if(item.itemCount===1){if(item.type===ProgressItemType.COPY){return strf("COPY_FILE_NAME",info["source"])}else if(item.type===ProgressItemType.MOVE){return strf("MOVE_FILE_NAME",info["source"])}else{return item.message}}else{if(item.type===ProgressItemType.COPY){return strf("COPY_ITEMS_REMAINING",info["source"])}else if(item.type===ProgressItemType.MOVE){return strf("MOVE_ITEMS_REMAINING",info["source"])}else{return item.message}}break;case"completed":if(info["count"]>1){return strf("FILE_ITEMS",info["source"])}return info["source"]||item.message;case"error":return item.message;case"canceled":return"";default:assertNotReached();break}return""}isNonEmptyString_(candidate){if(!candidate||candidate.trim().length===0){return false}return true}generatePrimaryString_(item,info){const hasDestination=this.isNonEmptyString_(info["destination"]);switch(item.state){case"progressing":if(!hasDestination){return this.generateSourceString_(item,info)}case"completed":if(item.itemCount===1){if(item.type===ProgressItemType.COPY){if(hasDestination){return strf("COPY_FILE_NAME_LONG",info["source"],info["destination"])}else{return strf("FILE_COPIED",info["source"])}}else if(item.type===ProgressItemType.MOVE){if(hasDestination){return strf("MOVE_FILE_NAME_LONG",info["source"],info["destination"])}else{return strf("FILE_MOVED",info["source"])}}else{return item.message}}else{if(item.type===ProgressItemType.COPY){if(hasDestination){return strf("COPY_ITEMS_REMAINING_LONG",info["source"],info["destination"])}else{return strf("FILE_ITEMS_COPIED",info["source"])}}else if(item.type===ProgressItemType.MOVE){if(hasDestination){return strf("MOVE_ITEMS_REMAINING_LONG",info["source"],info["destination"])}else{return strf("FILE_ITEMS_MOVED",info["source"])}}else{return item.message}}break;case"error":return item.message;case"canceled":return"";default:assertNotReached();break}return""}generateRemainingTimeMessage(item){const seconds=item.remainingTime;if(seconds==0&&item.state=="progressing"){return str("PENDING_LABEL")}if(!seconds){return""}const hours=Math.floor(seconds/3600);const minutes=Math.floor(seconds%3600/60);const hourFormatter=new Intl.NumberFormat(navigator.language,{style:"unit",unit:"hour",unitDisplay:"long"});const minuteFormatter=new Intl.NumberFormat(navigator.language,{style:"unit",unit:"minute",unitDisplay:"short"});if(hours>0&&minutes>0){return strf("TIME_REMAINING_ESTIMATE_2",hourFormatter.format(hours),minuteFormatter.format(minutes))}else if(hours>0){return strf("TIME_REMAINING_ESTIMATE",hourFormatter.format(hours))}else if(minutes>0){return strf("TIME_REMAINING_ESTIMATE",minuteFormatter.format(minutes))}else{return strf("TIME_REMAINING_ESTIMATE",minuteFormatter.format(1))}}updateFeedbackPanelItem(item,newItem){let panelItem=this.feedbackHost_.findPanelItemById(item.id);if(newItem){if(!panelItem){panelItem=this.feedbackHost_.createPanelItem(item.id);setTimeout((()=>{this.feedbackHost_.attachPanelItem(panelItem)}),this.PENDING_TIME_MS_);if(item.type==="format"){panelItem.panelType=panelItem.panelTypeFormatProgress}else if(item.type==="sync"){panelItem.panelType=panelItem.panelTypeSyncProgress}else{panelItem.panelType=panelItem.panelTypeProgress}panelItem.userData={source:item.sourceMessage,destination:item.destinationMessage,count:item.itemCount}}const primaryText=this.generatePrimaryString_(item,panelItem.userData);panelItem.secondaryText=this.generateRemainingTimeMessage(item);panelItem.primaryText=primaryText;panelItem.setAttribute("data-progress-id",item.id);const cancelLabel=strf("CANCEL_ACTIVITY_LABEL",primaryText);panelItem.closeButtonAriaLabel=cancelLabel;panelItem.signalCallback=signal=>{if(signal==="cancel"&&item.cancelCallback){item.cancelCallback()}if(signal==="dismiss"){this.feedbackHost_.removePanelItem(panelItem);this.dismissErrorItemCallback(item.id)}};panelItem.progress=item.progressRateInPercent.toString();switch(item.state){case"completed":if(item.type==="copy"||item.type==="move"||item.type==="format"){const donePanelItem=this.feedbackHost_.addPanelItem(item.id);donePanelItem.id=item.id;donePanelItem.panelType=donePanelItem.panelTypeDone;donePanelItem.primaryText=primaryText;donePanelItem.secondaryText=str("COMPLETE_LABEL");donePanelItem.signalCallback=signal=>{if(signal==="dismiss"){this.feedbackHost_.removePanelItem(donePanelItem);delete this.items_[donePanelItem.id]}};setTimeout((()=>{this.feedbackHost_.removePanelItem(donePanelItem);delete this.items_[donePanelItem.id]}),4e3)}case"canceled":this.feedbackHost_.removePanelItem(panelItem);break;case"error":panelItem.panelType=panelItem.panelTypeError;panelItem.primaryText=item.message;panelItem.secondaryText="";this.feedbackHost_.attachPanelItem(panelItem);break}}else if(panelItem){this.feedbackHost_.removePanelItem(panelItem)}}updateItemState_(item){const previousItem=this.items_[item.id];switch(item.state){case ProgressItemState.ERROR:if(previousItem&&previousItem.state!==ProgressItemState.PROGRESSING){return}this.items_[item.id]=item.clone();break;case ProgressItemState.PROGRESSING:case ProgressItemState.COMPLETED:if(!previousItem&&item.state===ProgressItemState.COMPLETED||previousItem&&previousItem.state!==ProgressItemState.PROGRESSING){return}this.items_[item.id]=item.clone();break;case ProgressItemState.CANCELED:if(!previousItem||previousItem.state!==ProgressItemState.PROGRESSING){return}delete this.items_[item.id]}}updateItem(item){this.updateItemState_(item);const newItem=this.items_[item.id]||null;this.updateFeedbackPanelItem(item,newItem)}dismissErrorItem(id){delete this.items_[id]}}// Copyright 2014 The Chromium Authors. All rights reserved.
class GearMenu{constructor(element){this.syncButton=queryRequiredElement("#gear-menu-drive-sync-settings",element);this.volumeSpaceInfo=queryRequiredElement("#volume-space-info",element);this.volumeSpaceInfoSeparator_=queryRequiredElement("#volume-space-info-separator",element);this.volumeSpaceInfoLabel_=queryRequiredElement("#volume-space-info-label",element);this.volumeSpaceInnerBar_=queryRequiredElement("#volume-space-info-bar",element);this.volumeSpaceOuterBar_=assertInstanceof(this.volumeSpaceInnerBar_.parentElement,HTMLElement);this.providersMenuItem_=queryRequiredElement("#gear-menu-providers",element);this.spaceInfoPromise_=null;this.syncButton.checkable=true}updateShowProviders(shouldHide){this.providersMenuItem_.hidden=shouldHide}setSpaceInfo(spaceInfoPromise,showLoadingCaption){this.spaceInfoPromise_=spaceInfoPromise;if(!spaceInfoPromise||loadTimeData.getBoolean("HIDE_SPACE_INFO")){this.volumeSpaceInfo.hidden=true;this.volumeSpaceInfoSeparator_.hidden=true;return}this.volumeSpaceInfo.hidden=false;this.volumeSpaceInfoSeparator_.hidden=false;this.volumeSpaceInnerBar_.setAttribute("pending","");if(showLoadingCaption){this.volumeSpaceInfoLabel_.innerText=str("WAITING_FOR_SPACE_INFO");this.volumeSpaceInnerBar_.style.width="100%"}spaceInfoPromise.then((spaceInfo=>{if(this.spaceInfoPromise_!=spaceInfoPromise){return}this.volumeSpaceInnerBar_.removeAttribute("pending");this.volumeSpaceOuterBar_.hidden=true;if(spaceInfo){const sizeStr=util$3.bytesToString(spaceInfo.remainingSize);this.volumeSpaceInfoLabel_.textContent=strf("SPACE_AVAILABLE",sizeStr);if(spaceInfo.totalSize>0){const usedSpace=spaceInfo.totalSize-spaceInfo.remainingSize;this.volumeSpaceInnerBar_.style.width=100*usedSpace/spaceInfo.totalSize+"%";this.volumeSpaceOuterBar_.hidden=false}}else{this.volumeSpaceInfoLabel_.textContent=str("FAILED_SPACE_INFO")}}))}}// Copyright 2015 The Chromium Authors. All rights reserved.
class EmptyFolder{constructor(emptyFolder){this.emptyFolder_=emptyFolder;this.label_=queryRequiredElement("#empty-folder-label",emptyFolder)}show(){this.emptyFolder_.hidden=false}hide(){this.emptyFolder_.hidden=true}setMessage(html){this.label_.innerHTML=html}}// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class AutocompleteList extends List{constructor(){super();this.__proto__=AutocompleteList.prototype;this.targetInput_=null;this.textFieldKeyHandler_=null;this.textFieldInputHandler_=null;this.boundSyncWidthAndPositionToInput_=undefined;this.decorate()}decorate(){List.prototype.decorate.call(this);this.classList.add("autocomplete-suggestions");this.selectionModel=new ListSingleSelectionModel;this.itemConstructor=ListItem;this.textFieldKeyHandler_=this.handleAutocompleteKeydown_.bind(this);const self=this;this.textFieldInputHandler_=function(e){self.requestSuggestions(self.targetInput_.value)};this.addEventListener("change",(function(e){if(self.selectedItem){self.handleSelectedSuggestion(self.selectedItem)}}));this.hidden=true}createItem(pageInfo){return new this.itemConstructor(pageInfo)}set suggestions(suggestions){this.dataModel=new ArrayDataModel(suggestions);this.hidden=!this.targetInput_||suggestions.length==0}requestSuggestions(query){}handleEnterKeydown(){this.suggestions=[]}handleSelectedSuggestion(selectedSuggestion){const input=this.targetInput_;if(!input){return}input.value=selectedSuggestion["url"];dispatchSimpleEvent(input,"change",true)}attachToInput(input){if(this.targetInput_==input){return}this.detach();this.targetInput_=input;this.style.width=input.getBoundingClientRect().width+"px";this.hidden=false;positionPopupAroundElement(input,this,AnchorType.BELOW);this.hidden=true;input.addEventListener("keydown",this.textFieldKeyHandler_,true);input.addEventListener("input",this.textFieldInputHandler_);if(!this.boundSyncWidthAndPositionToInput_){this.boundSyncWidthAndPositionToInput_=this.syncWidthAndPositionToInput.bind(this)}window.addEventListener("resize",this.boundSyncWidthAndPositionToInput_)}detach(){const input=this.targetInput_;if(!input){return}input.removeEventListener("keydown",this.textFieldKeyHandler_,true);input.removeEventListener("input",this.textFieldInputHandler_);this.targetInput_=null;this.suggestions=[];if(this.boundSyncWidthAndPositionToInput_){window.removeEventListener("resize",this.boundSyncWidthAndPositionToInput_)}}syncWidthAndPositionToInput(){const input=this.targetInput_;if(input){this.style.width=input.getBoundingClientRect().width+"px";positionPopupAroundElement(input,this,AnchorType.BELOW)}}get targetInput(){return this.targetInput_}handleAutocompleteKeydown_(event){if(this.hidden){return}let handled=false;switch(event.key){case"Escape":this.suggestions=[];handled=true;break;case"Enter":this.handleEnterKeydown();break;case"ArrowUp":case"ArrowDown":this.dispatchEvent(new KeyboardEvent(event.type,event));handled=true;break}if(handled){event.preventDefault();event.stopPropagation()}}}AutocompleteList.prototype.__proto__=List.prototype;// Copyright 2013 The Chromium Authors. All rights reserved.
class SearchBox extends NativeEventTarget{constructor(element,searchWrapper,searchButton){super();this.autocompleteList=new SearchBox.AutocompleteList(element.ownerDocument);this.element=element;this.searchWrapper=searchWrapper;this.searchButton=searchButton;this.searchButtonToggleRipple_=queryRequiredElement("files-toggle-ripple",this.searchButton);this.inputElement=element.querySelector("cr-input");this.clearButton_=assert(element.querySelector(".clear"));this.isClicking_=false;this.collapsed=true;this.inputElement.addEventListener("input",this.onInput_.bind(this));this.inputElement.addEventListener("keydown",this.onKeyDown_.bind(this));this.inputElement.addEventListener("focus",this.onFocus_.bind(this));this.inputElement.addEventListener("blur",this.onBlur_.bind(this));this.inputElement.ownerDocument.addEventListener("dragover",this.onDragEnter_.bind(this),true);this.inputElement.ownerDocument.addEventListener("dragend",this.onDragEnd_.bind(this));this.searchButton.addEventListener("click",this.onSearchButtonClick_.bind(this));this.clearButton_.addEventListener("click",this.onClearButtonClick_.bind(this));const dispatchItemSelect=()=>{dispatchSimpleEvent(this,SearchBox.EventType.ITEM_SELECT)};this.autocompleteList.handleEnterKeydown=dispatchItemSelect;this.autocompleteList.addEventListener("mousedown",dispatchItemSelect);document.addEventListener("mousedown",(()=>{if(this.collapsed){return}this.isClicking_=true}),{capture:true,passive:true});document.addEventListener("mouseup",(()=>{if(this.collapsed){return}this.isClicking_=false;window.requestAnimationFrame((()=>{this.removeHidePending()}))}),{passive:true});this.searchWrapper.addEventListener("focusout",this.onFocusOut_.bind(this));element.parentNode.appendChild(this.autocompleteList)}get collapsed(){return this.searchWrapper.hasAttribute("collapsed")}set collapsed(collapsed){if(collapsed){this.searchWrapper.setAttribute("collapsed",true)}else{this.searchWrapper.removeAttribute("collapsed")}}clear(){this.inputElement.value="";this.updateStyles_()}setHidden(hidden){this.element.hidden=hidden;this.searchButton.hidden=hidden}onFocusOut_(){window.requestAnimationFrame((()=>{if(document.activeElement&&this.element.contains(document.activeElement)){return}if(this.isClicking_){return}if(this.element.classList.contains("hide-pending")){this.removeHidePending()}}))}onInput_(){this.updateStyles_();dispatchSimpleEvent(this,SearchBox.EventType.TEXT_CHANGE)}onFocus_(){if(this.element.classList.contains("hide-pending")){return}this.inputElement.addEventListener("transitionend",(()=>{this.collapsed=false}),{once:true});this.isClicking_=false;this.element.classList.toggle("has-cursor",true);this.searchWrapper.classList.toggle("has-cursor",true);this.autocompleteList.attachToInput(this.inputElement);this.updateStyles_();this.searchButtonToggleRipple_.activated=true;metrics.recordUserAction("SelectSearch")}onBlur_(){this.element.classList.toggle("has-cursor",false);this.element.classList.toggle("hide-pending",true);this.searchWrapper.classList.toggle("has-cursor",false);this.searchWrapper.classList.toggle("hide-pending",true);this.autocompleteList.detach();this.updateStyles_();this.searchButtonToggleRipple_.activated=false}removeHidePending(){this.inputElement.disabled=this.inputElement.value.length==0;this.element.classList.toggle("hide-pending",false);this.searchWrapper.classList.toggle("hide-pending",false);this.inputElement.addEventListener("transitionend",(()=>{this.collapsed=true}),{once:true})}onKeyDown_(event){event=event;if(event.key!="Escape"||this.inputElement.value){return}this.inputElement.tabIndex=-1;this.inputElement.blur();this.inputElement.disabled=this.inputElement.value.length==0;this.element.classList.toggle("hide-pending",false);this.searchWrapper.classList.toggle("hide-pending",false)}onDragEnter_(event){event=event;if(event.dataTransfer.types.indexOf("text/plain")===-1){this.inputElement.style.pointerEvents="none"}}onDragEnd_(){this.inputElement.style.pointerEvents=""}updateStyles_(){const hasText=!!this.inputElement.value;this.element.classList.toggle("has-text",hasText);this.searchWrapper.classList.toggle("has-text",hasText);const hasFocusOnInput=this.element.classList.contains("has-cursor");this.inputElement.tabIndex=hasText||hasFocusOnInput?0:-1;this.searchButton.tabIndex=hasText||hasFocusOnInput?-1:0}onSearchButtonClick_(){this.inputElement.disabled=false;this.inputElement.focus()}onClearButtonClick_(){this.inputElement.value="";this.onInput_()}}SearchBox.EventType={TEXT_CHANGE:"textchange",ITEM_SELECT:"itemselect"};SearchBox.AutocompleteList=class extends AutocompleteList{constructor(document){super();this.__proto__=SearchBox.AutocompleteList.prototype;this.id="autocomplete-list";this.autoExpands=true;this.itemConstructor=SearchBox.AutocompleteListItem_.bind(null,document);this.addEventListener("mouseover",this.onMouseOver_.bind(this))}handleSelectedSuggestion(){}onMouseOver_(event){if(event.target.itemInfo){this.selectedItem=event.target.itemInfo}}};SearchBox.AutocompleteListItem_=class AutocompleteListItem_ extends ListItem{constructor(document,item){super();this.itemInfo=item;const icon=document.createElement("div");icon.className="detail-icon";const text=document.createElement("div");text.className="detail-text";if(item.isHeaderItem){icon.setAttribute("search-icon","");text.innerHTML=strf("SEARCH_DRIVE_HTML",util$3.htmlEscape(item.searchQuery))}else{const iconType=FileType.getIcon(item.entry);icon.setAttribute("file-type-icon",iconType);text.innerHTML=item.highlightedBaseName}this.appendChild(icon);this.appendChild(text)}};// Copyright 2016 The Chromium Authors. All rights reserved.
class FilesConfirmDialog extends ConfirmDialog{constructor(parentElement){super(parentElement);if(util$3.isFilesNg()){this.container.classList.add("files-ng")}this.showModalElement=null;this.doneCallback=null;this.focusCancelButton=false}initDom(){super.initDom();super.hasModalContainer=true;this.frame.classList.add("files-confirm-dialog")}show_(...args){if(!this.showModalElement){this.parentNode_=util$3.getFilesAppModalDialogInstance()}if(this.focusCancelButton){this.setInitialFocusOnCancel()}super.show_(...args);if(!this.showModalElement){this.parentNode_.showModal()}}hide(...args){if(!this.showModalElement){this.parentNode_.close()}super.hide(...args)}showWithTitle(title,message,...args){this.frame.classList.toggle("no-title",!title);super.showWithTitle(title,message,...args)}showHtml(title,message,...args){this.frame.classList.toggle("no-title",!title);super.showHtml(title,message,...args)}}// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class DefaultTaskDialog extends FileManagerDialogBase{constructor(parentNode){super(parentNode);this.frame.id="default-task-dialog";this.list_=new List;this.list_.id="default-tasks-list";this.frame.insertBefore(this.list_,this.text.nextSibling);this.selectionModel_=this.list_.selectionModel=new ListSingleSelectionModel;this.dataModel_=this.list_.dataModel=new ArrayDataModel([]);this.list_.autoExpands=true;this.list_.activateItemAtIndex=this.activateItemAtIndex_.bind(this);this.list_.addEventListener("click",this.onSelected_.bind(this));this.list_.addEventListener("change",this.onListChange_.bind(this));this.listScrollRaf_=null;this.list_.addEventListener("scroll",this.onListScroll_.bind(this),{passive:true});this.initialFocusElement_=this.list_;this.onSelectedItemCallback_=null;const self=this;this.list_.itemConstructor=function(item){return self.renderItem(item)}}onListScroll_(event){if(this.listScrollRaf_&&!this.frame.classList.contains("scrollable-list")){return}this.listScrollRaf_=window.requestAnimationFrame((()=>{const atTheBottom=this.list_.scrollHeight-this.list_.scrollTop===this.list_.clientHeight;this.frame.classList.toggle("bottom-shadow",!atTheBottom);this.listScrollRaf_=null}))}renderItem(item){const result=this.document_.createElement("li");const div=this.document_.createElement("div");div.textContent=item.label;if(item.iconType){div.setAttribute("file-type-icon",item.iconType)}else if(item.iconUrl){div.style.backgroundImage="url("+item.iconUrl+")"}if(item.class){div.classList.add(item.class)}result.appendChild(div);result.setAttribute("tabindex","-1");Object.defineProperty(result,"lead",getPropertyDescriptor("lead",PropertyKind.BOOL_ATTR));Object.defineProperty(result,"selected",getPropertyDescriptor("selected",PropertyKind.BOOL_ATTR));return result}showDefaultTaskDialog(title,message,items,defaultIndex,onSelectedItem){this.onSelectedItemCallback_=onSelectedItem;const show=super.showTitleAndTextDialog(title,message);if(!show){console.error("DefaultTaskDialog can't be shown.");return}if(!message){this.text.setAttribute("hidden","hidden")}else{this.text.removeAttribute("hidden")}this.list_.startBatchUpdates();this.dataModel_.splice(0,this.dataModel_.length);for(let i=0;i<items.length;i++){this.dataModel_.push(items[i])}this.frame.classList.toggle("scrollable-list",items.length>6);this.frame.classList.toggle("bottom-shadow",items.length>6);this.selectionModel_.selectedIndex=defaultIndex;this.list_.endBatchUpdates()}activateItemAtIndex_(index){this.hide();this.onSelectedItemCallback_(this.dataModel_.item(index))}onSelected_(){if(this.selectionModel_.selectedIndex!==-1){this.activateItemAtIndex_(this.selectionModel_.selectedIndex)}}onListChange_(event){const list=event.target;const activeItem=list.getListItemByIndex(list.selectionModel_.selectedIndex);if(activeItem){activeItem.focus()}}onContainerKeyDown(event){if(event.keyCode==27){this.hide();event.preventDefault()}else if(event.keyCode==32||event.keyCode==13){this.onSelected_();event.preventDefault()}}}// Copyright 2014 The Chromium Authors. All rights reserved.
class FileManagerUI{constructor(providersModel,element,launchParam){BaseDialog.OK_LABEL=str("OK_LABEL");BaseDialog.CANCEL_LABEL=str("CANCEL_LABEL");this.element=element;this.dialogType_=launchParam.type;this.separators_=[].slice.call(document.querySelectorAll("cr-menu > hr"));this.alertDialog=new FilesAlertDialog(this.element);this.confirmDialog=new FilesConfirmDialog(this.element);this.deleteConfirmDialog=new FilesConfirmDialog(this.element);this.deleteConfirmDialog.setOkLabel(str("DELETE_BUTTON_LABEL"));this.deleteConfirmDialog.focusCancelButton=true;this.moveConfirmDialog=new FilesConfirmDialog(this.element);this.moveConfirmDialog.setOkLabel(str("CONFIRM_MOVE_BUTTON_LABEL"));this.copyConfirmDialog=new FilesConfirmDialog(this.element);this.copyConfirmDialog.setOkLabel(str("CONFIRM_COPY_BUTTON_LABEL"));this.defaultTaskPicker=new DefaultTaskDialog(this.element);this.installLinuxPackageDialog=new InstallLinuxPackageDialog(this.element);this.importCrostiniImageDialog=new ImportCrostiniImageDialog(this.element);this.formatDialog=queryRequiredElement("#format-dialog");this.passwordDialog_=null;this.dialogContainer=queryRequiredElement(".dialog-container",this.element);this.dialogContainer.addEventListener("relayout",(event=>{this.layoutChanged_()}));this.textContextMenu=util$3.queryDecoratedElement("#text-context-menu",Menu);this.locationLine=null;this.toolbar=queryRequiredElement(".dialog-header",this.element);this.actionbar=queryRequiredElement("#action-bar",this.toolbar);this.dialogNavigationList=queryRequiredElement(".dialog-navigation-list",this.element);this.searchBox=new SearchBox(queryRequiredElement("#search-box",this.element),queryRequiredElement("#search-wrapper",this.element),queryRequiredElement("#search-button",this.element));this.emptyFolder=new EmptyFolder(queryRequiredElement("#empty-folder",this.element));this.toggleViewButton=queryRequiredElement("#view-button",this.element);this.sortButton=util$3.queryDecoratedElement("#sort-button",MultiMenuButton);this.sortButtonToggleRipple=queryRequiredElement("files-toggle-ripple",this.sortButton);this.gearButton=util$3.queryDecoratedElement("#gear-button",MultiMenuButton);this.gearButtonToggleRipple=queryRequiredElement("files-toggle-ripple",this.gearButton);this.gearMenu=new GearMenu(this.gearButton.menu);this.selectionMenuButton=util$3.queryDecoratedElement("#selection-menu-button",MultiMenuButton);this.directoryTree=null;this.progressCenterPanel=new ProgressCenterPanel;this.activityProgressPanel=queryRequiredElement("#progress-panel",this.element);this.listContainer;this.formatPanelError=queryRequiredElement("#format-panel > .error",this.element);this.fileContextMenu=util$3.queryDecoratedElement("#file-context-menu",MultiMenu);this.defaultTaskMenuItem=queryRequiredElement("#default-task-menu-item",this.fileContextMenu);this.tasksSeparator=queryRequiredElement("#tasks-separator",this.fileContextMenu);this.taskMenuButton=util$3.queryDecoratedElement("#tasks",ComboButton);this.taskMenuButton.showMenu=function(shouldSetFocus){if(!this.menu.length){return}ComboButton.prototype.showMenu.call(this,shouldSetFocus)};this.shareMenuButton=util$3.queryDecoratedElement("#share-menu-button",MultiMenuButton);const shareMenuButtonToggleRipple=queryRequiredElement("files-toggle-ripple",this.shareMenuButton);this.shareMenuButton.addEventListener("menushow",(()=>{shareMenuButtonToggleRipple.activated=true}));this.shareMenuButton.addEventListener("menuhide",(()=>{shareMenuButtonToggleRipple.activated=false}));this.shareSubMenu=util$3.queryDecoratedElement("#share-sub-menu",Menu);this.shareMenuButton.overflow=this.shareSubMenu;this.banners=null;this.dialogFooter=DialogFooter.findDialogFooter(this.dialogType_,this.element.ownerDocument);this.providersMenu=new ProvidersMenu(providersModel,util$3.queryDecoratedElement("#providers-menu",Menu));this.actionsSubmenu=new ActionsSubmenu(this.fileContextMenu);this.toast=document.querySelector("files-toast");this.fileTypeFilterContainer=queryRequiredElement("#file-type-filter-container",this.element);this.a11yMessage_=queryRequiredElement("#a11y-msg",this.element);if(window.IN_TEST){this.a11yAnnounces=[]}this.element.setAttribute("type",this.dialogType_);if(launchParam.allowedPaths!==AllowedPaths$1.ANY_PATH_OR_URL){this.element.setAttribute("block-hosted-docs","")}this.element.addEventListener("click",this.onExternalLinkClick_.bind(this));this.element.addEventListener("drop",(e=>{e.preventDefault()}));if(util$3.runningInBrowser()){this.element.addEventListener("contextmenu",(e=>{e.preventDefault();e.stopPropagation()}))}this.dragInProcess=false}get passwordDialog(){if(this.passwordDialog_){return this.passwordDialog_}this.passwordDialog_=document.createElement("files-password-dialog");this.element.appendChild(this.passwordDialog_);return this.passwordDialog_}initAdditionalUI(table,grid,volumeManager){this.listContainer=new ListContainer(queryRequiredElement("#list-container",this.element),table,grid,this.dialogType_);this.locationLine=new LocationLine(queryRequiredElement("#location-breadcrumbs",this.element),volumeManager,this.listContainer);this.decorateSplitter_(queryRequiredElement("#navigation-list-splitter",this.element));contextMenuHandler.setContextMenu(grid,this.fileContextMenu);contextMenuHandler.setContextMenu(table.list,this.fileContextMenu);contextMenuHandler.setContextMenu(queryRequiredElement(".drive-welcome.page"),this.fileContextMenu);document.defaultView.addEventListener("resize",this.relayout.bind(this));const rootElement=document.documentElement;let pointerActive=["pointerdown","pointerup","dragend","touchend"];if(window.IN_TEST){pointerActive=pointerActive.concat(["mousedown","mouseup"])}pointerActive.forEach((eventType=>{document.addEventListener(eventType,(e=>{rootElement.classList.toggle("pointer-active",/down$/.test(e.type))}),true)}));let activeDropTarget=null;["dragenter","dragleave","drop"].forEach((eventType=>{document.addEventListener(eventType,(event=>{const dragDropActive="drag-drop-active";if(event.type==="dragenter"){rootElement.classList.add(dragDropActive);activeDropTarget=event.target}else if(activeDropTarget===event.target){rootElement.classList.remove(dragDropActive);activeDropTarget=null}}))}));document.addEventListener("dragstart",(()=>{this.dragInProcess=true}));document.addEventListener("dragend",(()=>{this.dragInProcess=false}))}initUIFocus(){let targetElement=null;if(this.dialogType_==DialogType.SELECT_SAVEAS_FILE){targetElement=this.dialogFooter.filenameInput}else if(this.listContainer.currentListType!=ListContainer.ListType.UNINITIALIZED){targetElement=this.listContainer.currentList}if(targetElement){targetElement.focus()}}initDirectoryTree(directoryTree){this.directoryTree=directoryTree;this.directoryTree.contextMenuForRootItems=util$3.queryDecoratedElement("#roots-context-menu",Menu);this.directoryTree.contextMenuForSubitems=util$3.queryDecoratedElement("#directory-tree-context-menu",Menu);this.directoryTree.disabledContextMenu=util$3.queryDecoratedElement("#disabled-context-menu",Menu)}initBanners(banners){this.banners=banners;this.banners.addEventListener("relayout",this.relayout.bind(this))}attachFilesTooltip(){const filesTooltip=assertInstanceof(document.querySelector("files-tooltip"),FilesTooltip);filesTooltip.addTargets(document.querySelectorAll("[has-tooltip]"));this.locationLine.filesTooltip=filesTooltip}decorateFilesMenuItems(){const filesMenuItems=document.querySelectorAll("cr-menu.files-menu > cr-menu-item");for(let i=0;i<filesMenuItems.length;i++){const filesMenuItem=filesMenuItems[i];assertInstanceof(filesMenuItem,MenuItem);decorate(filesMenuItem,FilesMenuItem)}}relayout(){this.locationLine.truncate();if(this.listContainer.currentListType!==ListContainer.ListType.UNINITIALIZED){this.listContainer.currentView.relayout()}if(this.directoryTree){this.directoryTree.relayout()}}layoutChanged_(){if(this.scrollRAFActive_===true){return}this.scrollRAFActive_=true;window.requestAnimationFrame((()=>{this.scrollRAFActive_=false;const mainWindow=document.querySelector(".dialog-container");const navigationList=document.querySelector(".dialog-navigation-list");const splitter=document.querySelector(".splitter");const dialogMain=document.querySelector(".dialog-main");const mainWindowWidth=mainWindow.offsetWidth;const navListWidth=navigationList.offsetWidth;const splitStyle=window.getComputedStyle(splitter);const splitMargin=parseInt(splitStyle.marginRight,10)+parseInt(splitStyle.marginLeft,10);const splitWidth=splitter.offsetWidth+splitMargin;const dialogMainWidth=dialogMain.offsetWidth;if(!dialogMain.style.width||navListWidth+splitWidth+dialogMainWidth>mainWindowWidth){dialogMain.style.width=mainWindowWidth-navListWidth-splitWidth+"px"}}))}setCurrentListType(listType){this.listContainer.setCurrentListType(listType);const isListView=listType===ListContainer.ListType.DETAIL;this.toggleViewButton.classList.toggle("thumbnail",isListView);const label=isListView?str("CHANGE_TO_THUMBNAILVIEW_BUTTON_LABEL"):str("CHANGE_TO_LISTVIEW_BUTTON_LABEL");this.toggleViewButton.setAttribute("aria-label",label);this.relayout()}onExternalLinkClick_(event){if(event.target.tagName!="A"||!event.target.href){return}if(this.dialogType_!=DialogType.FULL_PAGE){this.dialogFooter.cancelButton.click()}}decorateSplitter_(splitterElement,opt_resizeNextElement){const self=this;const FileSplitter=Splitter;const customSplitter=define("div");customSplitter.prototype={__proto__:FileSplitter.prototype,handleSplitterDragStart:function(e){FileSplitter.prototype.handleSplitterDragStart.apply(this,arguments);this.ownerDocument.documentElement.classList.add("col-resize")},handleSplitterDragMove:function(deltaX){FileSplitter.prototype.handleSplitterDragMove.apply(this,arguments);self.relayout()},handleSplitterDragEnd:function(e){FileSplitter.prototype.handleSplitterDragEnd.apply(this,arguments);this.ownerDocument.documentElement.classList.remove("col-resize")}};customSplitter.decorate(splitterElement);splitterElement.resizeNextElement=!!opt_resizeNextElement}addLoadedAttribute(){this.element.setAttribute("loaded","")}showOpenInOtherDesktopAlert(entries){if(!entries.length){return}chrome.fileManagerPrivate.getProfiles(((profiles,currentId,displayedId)=>{let displayName;for(let i=0;i<profiles.length;i++){if(profiles[i].profileId===currentId){displayName=profiles[i].displayName;break}}if(!displayName){console.warn("Display name is not found.");return}const title=entries.length>1?entries[0].name+"…":entries[0].name;const message=strf(entries.length>1?"OPEN_IN_OTHER_DESKTOP_MESSAGE_PLURAL":"OPEN_IN_OTHER_DESKTOP_MESSAGE",displayName,currentId);this.alertDialog.showWithTitle(title,message,null,null,null)}))}showConfirmationDialog(isMove,messages){let dialog=null;if(isMove){dialog=this.moveConfirmDialog}else{dialog=this.copyConfirmDialog}return new Promise(((resolve,reject)=>{dialog.show(messages.join(" "),(()=>{resolve(true)}),(()=>{resolve(false)}))}))}speakA11yMessage(text){this.a11yMessage_.textContent="";this.a11yMessage_.textContent=text;if(window.IN_TEST){this.a11yAnnounces.push(text)}}}// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class FileSelection{constructor(indexes,entries,volumeManager){this.indexes=indexes;this.entries=entries;this.mimeTypes=[];this.totalCount=0;this.fileCount=0;this.directoryCount=0;this.anyFilesNotInCache=true;this.anyFilesHosted=true;this.iconType=null;this.additionalPromise_=null;this.hasReadOnlyEntry_=false;entries.forEach((entry=>{if(this.iconType==null){this.iconType=FileType.getIcon(entry)}else if(this.iconType!="unknown"){const iconType=FileType.getIcon(entry);if(this.iconType!=iconType){this.iconType="unknown"}}if(entry.isFile){this.fileCount+=1}else{this.directoryCount+=1}this.totalCount++;if(!this.hasReadOnlyEntry_){const locationInfo=volumeManager.getLocationInfo(entry);this.hasReadOnlyEntry_=!!(locationInfo&&locationInfo.isReadOnly)}}))}hasReadOnlyEntry(){return this.hasReadOnlyEntry_}computeAdditional(metadataModel){if(!this.additionalPromise_){this.additionalPromise_=metadataModel.get(this.entries,constants.FILE_SELECTION_METADATA_PREFETCH_PROPERTY_NAMES).then((props=>{const present=props.filter((p=>!("availableOffline"in p)||p.availableOffline));const hosted=props.filter((p=>p.hosted));this.anyFilesNotInCache=present.length!==props.length;this.anyFilesHosted=!!hosted.length;this.mimeTypes=props.map((value=>value.contentMimeType||""));return true}))}return this.additionalPromise_}}class FileSelectionHandler extends NativeEventTarget{constructor(directoryModel,fileOperationManager,listContainer,metadataModel,volumeManager,allowedPaths){super();this.directoryModel_=directoryModel;this.listContainer_=listContainer;this.metadataModel_=metadataModel;this.volumeManager_=volumeManager;this.selection=new FileSelection([],[],volumeManager);this.selectionUpdateTimer_=0;this.nextThrottledEventTime_=0;this.allowedPaths_=allowedPaths;util$3.addEventListenerToBackgroundComponent(assert(fileOperationManager),"entries-changed",this.onFileSelectionChanged.bind(this));directoryModel.addEventListener("directory-changed",this.onFileSelectionChanged.bind(this))}onFileSelectionChanged(){const indexes=this.listContainer_.selectionModel.selectedIndexes;const entries=indexes.map((index=>this.directoryModel_.getFileList().item(index)));this.selection=new FileSelection(indexes,entries,this.volumeManager_);if(this.selectionUpdateTimer_){clearTimeout(this.selectionUpdateTimer_);this.selectionUpdateTimer_=null}let updateDelay=FileSelectionHandler.UPDATE_DELAY;const now=Date.now();if(now>=this.nextThrottledEventTime_&&indexes.length<FileSelectionHandler.NUMBER_OF_ITEMS_HEAVY_TO_COMPUTE){updateDelay=0}const selection=this.selection;this.selectionUpdateTimer_=setTimeout((()=>{this.selectionUpdateTimer_=null;this.updateFileSelectionAsync_(selection)}),updateDelay);dispatchSimpleEvent(this,FileSelectionHandler.EventType.CHANGE)}updateFileSelectionAsync_(selection){if(this.selection!==selection){return}selection.computeAdditional(this.metadataModel_).then((()=>{if(this.selection!==selection){return}this.nextThrottledEventTime_=Date.now()+FileSelectionHandler.UPDATE_DELAY;dispatchSimpleEvent(this,FileSelectionHandler.EventType.CHANGE_THROTTLED)}))}isAvailable(){if(!this.directoryModel_.isOnDrive()){return true}return!(this.isOfflineWithUncachedFilesSelected_()||this.isDialogWithHostedFilesSelected_())}isOfflineWithUncachedFilesSelected_(){return this.volumeManager_.getDriveConnectionState().type===chrome.fileManagerPrivate.DriveConnectionStateType.OFFLINE&&this.selection.anyFilesNotInCache}isDialogWithHostedFilesSelected_(){return this.allowedPaths_!==AllowedPaths$1.ANY_PATH_OR_URL&&this.selection.anyFilesHosted}}FileSelectionHandler.EventType={CHANGE:"change",CHANGE_THROTTLED:"changethrottled"};FileSelectionHandler.UPDATE_DELAY=200;FileSelectionHandler.NUMBER_OF_ITEMS_HEAVY_TO_COMPUTE=100;// Copyright 2015 The Chromium Authors. All rights reserved.
class ActionsController{constructor(volumeManager,metadataModel,directoryModel,shortcutsModel,driveSyncHandler,selectionHandler,ui){this.volumeManager_=volumeManager;this.metadataModel_=metadataModel;this.directoryModel_=directoryModel;this.shortcutsModel_=shortcutsModel;this.driveSyncHandler_=driveSyncHandler;this.selectionHandler_=selectionHandler;this.ui_=ui;this.readyModels_=new Map;this.initializingdModels_=new Map;this.currentDirKey_=null;this.currentSelectionKey_=null;this.updateUiSequence_=0;this.ui_.directoryTree.addEventListener("change",this.onNavigationListSelectionChanged_.bind(this),true);this.selectionHandler_.addEventListener(FileSelectionHandler.EventType.CHANGE_THROTTLED,this.onSelectionChanged_.bind(this));contextMenuHandler.addEventListener("show",this.onContextMenuShow_.bind(this));this.ui_.selectionMenuButton.addEventListener("menushow",this.onMenuShow_.bind(this));this.ui_.gearButton.addEventListener("menushow",this.onMenuShow_.bind(this));this.metadataModel_.addEventListener("update",this.onMetadataUpdated_.bind(this))}getEntriesFor_(element){if(!element){return[]}if(this.ui_.listContainer.element.contains(element)||this.ui_.toolbar.contains(element)||this.ui_.fileContextMenu.contains(element)||document.body===element){return this.selectionHandler_.selection.entries}if(this.ui_.directoryTree.contains(element)||this.ui_.directoryTree.contextMenuForRootItems.contains(element)||this.ui_.directoryTree.contextMenuForSubitems.contains(element)){if(element.entry){return[element.entry]}if(element.selectedItem&&element.selectedItem.entry){return[element.selectedItem.entry]}}return[]}getEntriesKey_(entries){return entries.map((entry=>entry.toURL())).join(";")}clearLocalCache_(key){this.readyModels_.delete(key);this.initializingdModels_.delete(key)}updateUI_(element){const entries=this.getEntriesFor_(element);const actionsModel=this.getInitializedActionsForEntries(entries);if(actionsModel){this.ui_.actionsSubmenu.setActionsModel(actionsModel,element);return}const sequence=++this.updateUiSequence_;this.getActionsForEntries(entries).then((actionsModel=>{if(sequence===this.updateUiSequence_){this.ui_.actionsSubmenu.setActionsModel(actionsModel,element)}}))}onContextMenuShow_(event){this.updateUI_(event.element)}onMenuShow_(event){this.updateUI_(event.target)}onSelectionChanged_(){const entries=this.selectionHandler_.selection.entries;if(!entries.length){this.currentSelectionKey_=null;return}const currentKey=this.getEntriesKey_(entries);this.currentSelectionKey_=currentKey;this.getActionsForEntries(entries)}onNavigationListSelectionChanged_(){const entry=this.ui_.directoryTree.selectedItem&&this.ui_.directoryTree.selectedItem.entry;if(!entry){this.currentDirKey_=null;return}const key=this.getEntriesKey_([entry]);this.clearLocalCache_(key);this.currentDirKey_=key;this.getActionsForEntries([entry])}onMetadataUpdated_(event){if(!event||!event.names.has("pinned")){return}for(const key of this.readyModels_.keys()){if(key.split(";").some((url=>event.entriesMap.has(url)))){this.readyModels_.delete(key)}}for(const key of this.initializingdModels_.keys()){if(key.split(";").some((url=>event.entriesMap.has(url)))){this.initializingdModels_.delete(key)}}}getInitializedActionsForEntries(entries){const key=this.getEntriesKey_(entries);return this.readyModels_.get(key)}getActionsForEntries(entries){const key=this.getEntriesKey_(entries);if(!key){return Promise.resolve()}const promise=this.initializingdModels_.get(key);if(promise){return promise}let actionsModel=this.readyModels_.get(key);if(actionsModel){return Promise.resolve(actionsModel)}actionsModel=new ActionsModel(this.volumeManager_,this.metadataModel_,this.shortcutsModel_,this.driveSyncHandler_,this.ui_,entries);actionsModel.addEventListener("invalidated",(()=>{this.clearLocalCache_(key);this.selectionHandler_.onFileSelectionChanged()}),{once:true});const init=actionsModel.initialize().then((()=>{this.initializingdModels_.delete(key);this.readyModels_.set(key,actionsModel);return actionsModel}));this.initializingdModels_.set(key,init);return init}executeAction(action){const entries=action.getEntries();const key=this.getEntriesKey_(entries);this.readyModels_.delete(key);action.execute()}}// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
const DropEffectType={NONE:"none",COPY:"copy",MOVE:"move",LINK:"link"};class DropEffectAndLabel{constructor(dropEffect,label){this.dropEffect_=dropEffect;this.label_=label}getDropEffect(){return this.dropEffect_}getLabel(){return this.label_}}// Copyright (c) 2012 The Chromium Authors. All rights reserved.
const DRAG_AND_DROP_GLOBAL_DATA="__drag_and_drop_global_data";class FileTransferController{constructor(doc,listContainer,directoryTree,confirmationCallback,progressCenter,fileOperationManager,metadataModel,thumbnailModel,directoryModel,volumeManager,selectionHandler){this.document_=doc;this.listContainer_=listContainer;this.fileOperationManager_=fileOperationManager;this.metadataModel_=metadataModel;this.thumbnailModel_=thumbnailModel;this.directoryModel_=directoryModel;this.volumeManager_=volumeManager;this.selectionHandler_=selectionHandler;this.confirmationCallback_=confirmationCallback;this.progressCenter_=progressCenter;this.pendingTaskIds=[];this.preloadedThumbnailImagePromise_=null;this.selectedAsyncData_={};this.dragSelector_=new DragSelector;this.touching_=false;this.sourceNotFoundErrorCount_=0;this.copyCommand_=queryRequiredElement("command#copy",assert(this.document_.body));this.cutCommand_=queryRequiredElement("command#cut",assert(this.document_.body));this.destinationEntry_=null;this.lastEnteredTarget_=null;this.dropTarget_=null;this.dropLabel_=null;this.navigateTimer_=0;selectionHandler.addEventListener(FileSelectionHandler.EventType.CHANGE,this.onFileSelectionChanged_.bind(this));selectionHandler.addEventListener(FileSelectionHandler.EventType.CHANGE_THROTTLED,this.onFileSelectionChangedThrottled_.bind(this));this.attachDragSource_(listContainer.table.list);this.attachFileListDropTarget_(listContainer.table.list);this.attachDragSource_(listContainer.grid);this.attachFileListDropTarget_(listContainer.grid);this.attachTreeDropTarget_(directoryTree);this.attachCopyPasteHandlers_();chrome.fileManagerPrivate.enableExternalFileScheme()}attachDragSource_(list){list.style.webkitUserDrag="element";list.addEventListener("dragstart",this.onDragStart_.bind(this,list));list.addEventListener("dragend",this.onDragEnd_.bind(this,list));list.addEventListener("touchstart",this.onTouchStart_.bind(this));list.ownerDocument.addEventListener("touchend",this.onTouchEnd_.bind(this),true);list.ownerDocument.addEventListener("touchcancel",this.onTouchEnd_.bind(this),true)}attachFileListDropTarget_(list,opt_onlyIntoDirectories){list.addEventListener("dragover",this.onDragOver_.bind(this,!!opt_onlyIntoDirectories,list));list.addEventListener("dragenter",this.onDragEnterFileList_.bind(this,list));list.addEventListener("dragleave",this.onDragLeave_.bind(this,list));list.addEventListener("drop",this.onDrop_.bind(this,!!opt_onlyIntoDirectories))}attachTreeDropTarget_(tree){tree.addEventListener("dragover",this.onDragOver_.bind(this,true,tree));tree.addEventListener("dragenter",this.onDragEnterTree_.bind(this,tree));tree.addEventListener("dragleave",this.onDragLeave_.bind(this,tree));tree.addEventListener("drop",this.onDrop_.bind(this,true))}attachCopyPasteHandlers_(){this.document_.addEventListener("beforecopy",this.onBeforeCutOrCopy_.bind(this,false));this.document_.addEventListener("copy",this.onCutOrCopy_.bind(this,false));this.document_.addEventListener("beforecut",this.onBeforeCutOrCopy_.bind(this,true));this.document_.addEventListener("cut",this.onCutOrCopy_.bind(this,true));this.document_.addEventListener("beforepaste",this.onBeforePaste_.bind(this));this.document_.addEventListener("paste",this.onPaste_.bind(this))}cutOrCopy_(clipboardData,effectAllowed){const currentDirEntry=this.directoryModel_.getCurrentDirEntry();if(!currentDirEntry){return}const volumeInfo=this.volumeManager_.getVolumeInfo(util$3.isRecentRoot(currentDirEntry)?this.selectionHandler_.selection.entries[0]:currentDirEntry);if(!volumeInfo){return}this.appendCutOrCopyInfo_(clipboardData,effectAllowed,volumeInfo,this.selectionHandler_.selection.entries,!this.selectionHandler_.isAvailable());this.appendUriList_(clipboardData,this.selectionHandler_.selection.entries);if(util$3.isCopyImageEnabled()){const entries=this.selectionHandler_.selection.entries;if(entries.length==1&&FileType.isImage(entries[0])){setTimeout((()=>{chrome.fileManagerPrivate.copyImageToClipboard(entries[0],(()=>{if(chrome.runtime.lastError){console.error(chrome.runtime.lastError.message);return}}))}))}}}appendCutOrCopyInfo_(clipboardData,effectAllowed,sourceVolumeInfo,entries,missingFileContents){clipboardData.setData("fs/tag","filemanager-data");clipboardData.setData("fs/sourceRootURL",sourceVolumeInfo.fileSystem.root.toURL());const sourceURLs=util$3.entriesToURLs(entries);clipboardData.setData("fs/sources",sourceURLs.join("\n"));clipboardData.effectAllowed=effectAllowed;clipboardData.setData("fs/effectallowed",effectAllowed);clipboardData.setData("fs/missingFileContents",missingFileContents.toString())}appendUriList_(clipboardData,entries){let externalFileUrl;for(let i=0;i<entries.length;i++){const url=entries[i].toURL();if(!this.selectedAsyncData_[url]){continue}if(this.selectedAsyncData_[url].file){clipboardData.items.add(assert(this.selectedAsyncData_[url].file))}if(!externalFileUrl){externalFileUrl=this.selectedAsyncData_[url].externalFileUrl}}if(externalFileUrl){clipboardData.setData("text/uri-list",externalFileUrl)}}getDragAndDropGlobalData_(){if(window[DRAG_AND_DROP_GLOBAL_DATA]){return window[DRAG_AND_DROP_GLOBAL_DATA]}const views=chrome&&chrome.extension?chrome.extension.getViews():[];for(let i=0;i<views.length;i++){if(views[i][DRAG_AND_DROP_GLOBAL_DATA]){return views[i][DRAG_AND_DROP_GLOBAL_DATA]}}return null}getSourceRootURL_(clipboardData,dragAndDropData){const sourceRootURL=clipboardData.getData("fs/sourceRootURL");if(sourceRootURL){return sourceRootURL}if(dragAndDropData){return dragAndDropData.sourceRootURL}return""}isMissingFileContents_(clipboardData){let data=clipboardData.getData("fs/missingFileContents");if(!data){const globalData=this.getDragAndDropGlobalData_();if(globalData){data=globalData.missingFileContents}}return data==="true"}preparePaste(clipboardData,opt_destinationEntry,opt_effect){const sourceURLs=clipboardData.getData("fs/sources")?clipboardData.getData("fs/sources").split("\n"):[];const sourceEntries=sourceURLs.length===0?Array.prototype.filter.call(clipboardData.items,(i=>i.kind==="file")).map((i=>i.webkitGetAsEntry())):[];const effectAllowed=clipboardData.effectAllowed!=="uninitialized"?clipboardData.effectAllowed:clipboardData.getData("fs/effectallowed");const destinationEntry=assert(opt_destinationEntry||this.directoryModel_.getCurrentDirEntry());const toMove=util$3.isDropEffectAllowed(effectAllowed,"move")&&(!util$3.isDropEffectAllowed(effectAllowed,"copy")||opt_effect==="move");const destinationLocationInfo=this.volumeManager_.getLocationInfo(destinationEntry);if(!destinationLocationInfo){console.log("Failed to get destination location for "+destinationEntry.toURL()+" while attempting to paste files.")}return new FileTransferController.PastePlan(sourceURLs,sourceEntries,destinationEntry,assert(destinationLocationInfo),toMove)}paste(clipboardData,opt_destinationEntry,opt_effect){const pastePlan=this.preparePaste(clipboardData,opt_destinationEntry,opt_effect);return pastePlan.resolveEntries().then((sourceEntries=>{if(sourceEntries.length==0){return Promise.resolve(this.executePaste(pastePlan))}const confirmationType=pastePlan.getConfirmationType();if(confirmationType==FileTransferController.ConfirmationType.NONE){return Promise.resolve(this.executePaste(pastePlan))}const messages=pastePlan.getConfirmationMessages(confirmationType);this.confirmationCallback_(pastePlan.isMove,messages).then((userApproved=>{if(userApproved){this.executePaste(pastePlan)}}))}))}executePaste(pastePlan){const sourceURLs=pastePlan.sourceURLs;const toMove=pastePlan.isMove;const destinationEntry=pastePlan.destinationEntry;let entries=[];const taskId=this.fileOperationManager_.generateTaskId();pastePlan.resolveEntries().then((sourceEntries=>this.fileOperationManager_.filterSameDirectoryEntry(sourceEntries,destinationEntry,toMove))).then((filteredEntries=>{entries=filteredEntries;if(entries.length===0){return Promise.reject("ABORT")}this.pendingTaskIds.push(taskId);const item=new ProgressCenterItem;item.id=taskId;item.itemCount=entries.length;if(toMove){item.type=ProgressItemType.MOVE;if(entries.length===1){item.message=strf("MOVE_FILE_NAME",entries[0].name)}else{item.message=strf("MOVE_ITEMS_REMAINING",entries.length)}}else{item.type=ProgressItemType.COPY;if(entries.length===1){item.message=strf("COPY_FILE_NAME",entries[0].name)}else{item.message=strf("COPY_ITEMS_REMAINING",entries.length)}}if(entries.length===1){item.sourceMessage=entries[0].name}else{item.sourceMessage=entries.length.toString()}const destinationLocationInfo=this.volumeManager_.getLocationInfo(destinationEntry);const destinationName=util$3.getEntryLabel(destinationLocationInfo,destinationEntry);if(destinationName===""){if(destinationLocationInfo){item.destinationMessage=util$3.getRootTypeLabel(destinationLocationInfo)}}else{item.destinationMessage=destinationName}this.progressCenter_.updateItem(item);this.fileOperationManager_.paste(entries,destinationEntry,toMove,taskId);this.pendingTaskIds.splice(this.pendingTaskIds.indexOf(taskId),1)})).catch((error=>{if(error!=="ABORT"){console.error(error.stack?error.stack:error)}})).finally((()=>{for(let i=0;i<pastePlan.failureUrls.length;i++){const fileName=decodeURIComponent(pastePlan.failureUrls[i].replace(/^.+\//,""));const item=new ProgressCenterItem;item.id="source-not-found-"+this.sourceNotFoundErrorCount_;if(toMove){item.message=strf("MOVE_SOURCE_NOT_FOUND_ERROR",fileName)}else{item.message=strf("COPY_SOURCE_NOT_FOUND_ERROR",fileName)}item.state=ProgressItemState.ERROR;this.progressCenter_.updateItem(item);this.sourceNotFoundErrorCount_++}}));return toMove?"move":"copy"}preloadThumbnailImage_(entry){const imagePromise=this.thumbnailModel_.get([entry]).then((metadata=>new Promise(((fulfill,reject)=>{const loader=new ThumbnailLoader(entry,ThumbnailLoader.LoaderType.IMAGE,metadata[0]);loader.loadDetachedImage((result=>{if(result){fulfill(loader.getImage())}}))}))));imagePromise.then((image=>{imagePromise.value=image}));this.preloadedThumbnailImagePromise_=imagePromise}renderThumbnail_(){const length=this.selectionHandler_.selection.entries.length;const container=this.document_.body.querySelector("#drag-container");const contents=this.document_.createElement("div");contents.className="drag-contents";container.appendChild(contents);if(length>1){const label=this.document_.createElement("div");label.className="label";label.textContent=strf("DRAGGING_MULTIPLE_ITEMS",length);contents.appendChild(label);return container}if(this.preloadedThumbnailImagePromise_&&this.preloadedThumbnailImagePromise_.value){const thumbnailImage=this.preloadedThumbnailImagePromise_.value;const canvas=document.createElement("canvas");canvas.width=FileTransferController.DRAG_THUMBNAIL_SIZE_;canvas.height=FileTransferController.DRAG_THUMBNAIL_SIZE_;const minScale=Math.min(thumbnailImage.width/canvas.width,thumbnailImage.height/canvas.height);const srcWidth=Math.min(canvas.width*minScale,thumbnailImage.width);const srcHeight=Math.min(canvas.height*minScale,thumbnailImage.height);const context=canvas.getContext("2d");context.drawImage(thumbnailImage,(thumbnailImage.width-srcWidth)/2,(thumbnailImage.height-srcHeight)/2,srcWidth,srcHeight,0,0,canvas.width,canvas.height);contents.classList.add("for-image");contents.appendChild(canvas);return container}const index=this.selectionHandler_.selection.indexes[0];const thumbnail=this.listContainer_.currentView.getThumbnail(index);if(thumbnail){const canvas=document.createElement("canvas");canvas.width=FileTransferController.DRAG_THUMBNAIL_SIZE_;canvas.height=FileTransferController.DRAG_THUMBNAIL_SIZE_;canvas.style.backgroundImage=thumbnail.style.backgroundImage;canvas.style.backgroundSize="cover";canvas.classList.add("for-image");contents.appendChild(canvas);return container}const entry=this.selectionHandler_.selection.entries[0];const icon=this.document_.createElement("div");icon.className="detail-icon";icon.setAttribute("file-type-icon",FileType.getIcon(entry));contents.appendChild(icon);const label=this.document_.createElement("div");label.className="label";label.textContent=entry.name;contents.appendChild(label);return container}renderThumbnailFilesNg_(){const entry=this.selectionHandler_.selection.entries[0];const index=this.selectionHandler_.selection.indexes[0];const items=this.selectionHandler_.selection.entries.length;const container=this.document_.body.querySelector("#drag-container");const multiple=items>1?"block":"none";container.innerHTML=`\n      <div class='drag-box drag-multiple' style='display:${multiple}'></div>\n      <div class='drag-box drag-contents'>\n        <div class='detail-icon'></div><div class='label'>${entry.name}</div>\n      </div>\n      <div class='drag-bubble' style='display:${multiple}'>${items}</div>\n    `;const icon=container.querySelector(".detail-icon");const thumbnail=this.listContainer_.currentView.getThumbnail(index);if(thumbnail){icon.style.backgroundImage=thumbnail.style.backgroundImage;icon.style.backgroundSize="cover"}else{icon.setAttribute("file-type-icon",FileType.getIcon(entry))}return container}onDragStart_(list,event){if(this.listContainer_.renameInput.currentEntry){event.preventDefault();return}if(!this.touching_&&list.shouldStartDragSelection(event)){event.preventDefault();this.dragSelector_.startDragSelection(list,event);return}if(this.touching_&&!list.hasDragHitElement(event)){event.preventDefault();list.selectionModel_.unselectAll();return}if(!this.selectionHandler_.selection.entries.length){event.preventDefault();return}const dataTransfer=event.dataTransfer;const canCopy=this.canCopyOrDrag();const canCut=this.canCutOrDrag();if(canCopy||canCut){if(canCopy&&canCut){this.cutOrCopy_(dataTransfer,"all")}else if(canCopy){this.cutOrCopy_(dataTransfer,"copyLink")}else{this.cutOrCopy_(dataTransfer,"move")}}else{event.preventDefault();return}const thumbnail={element:null,x:0,y:0};if(util$3.isFilesNg()){thumbnail.element=this.renderThumbnailFilesNg_();if(this.document_.querySelector(":root[dir=rtl]")){thumbnail.x=thumbnail.element.clientWidth*window.devicePixelRatio}}else{thumbnail.element=this.renderThumbnail_();if(this.touching_){thumbnail.y=thumbnail.element.getBoundingClientRect().height}}dataTransfer.setDragImage(thumbnail.element,thumbnail.x,thumbnail.y);window[DRAG_AND_DROP_GLOBAL_DATA]={sourceRootURL:dataTransfer.getData("fs/sourceRootURL"),missingFileContents:dataTransfer.getData("fs/missingFileContents")}}onDragEnd_(list,event){this.touching_=false;const container=this.document_.body.querySelector("#drag-container");container.textContent="";this.clearDropTarget_();delete window[DRAG_AND_DROP_GLOBAL_DATA]}onDragOver_(onlyIntoDirectories,list,event){event.preventDefault();let entry=this.destinationEntry_;if(!entry&&!onlyIntoDirectories){entry=this.directoryModel_.getCurrentDirEntry()}const effectAndLabel=this.selectDropEffect_(event,this.getDragAndDropGlobalData_(),entry);event.dataTransfer.dropEffect=effectAndLabel.getDropEffect();event.preventDefault();if(util$3.isFilesNg()){return}if(!this.dropLabel_){this.dropLabel_=document.querySelector("div#drop-label")}const label=effectAndLabel.getLabel();if(label){this.dropLabel_.innerText=label;this.dropLabel_.style.left=event.pageX+"px";this.dropLabel_.style.top=event.pageY+FileTransferController.DRAG_LABEL_Y_OFFSET_+"px";this.dropLabel_.style.display="block"}else{this.dropLabel_.style.display="none"}}onDragEnterFileList_(list,event){event.preventDefault();this.lastEnteredTarget_=event.target;let item=list.getListItemAncestor(event.target);item=item&&list.isItem(item)?item:null;if(item===this.dropTarget_){return}const entry=item&&list.dataModel.item(item.listIndex);if(entry){this.setDropTarget_(item,event.dataTransfer,entry)}else{this.clearDropTarget_()}}onDragEnterTree_(tree,event){event.preventDefault();if(!event.relatedTarget){event.dataTransfer.dropEffect="move";return}this.lastEnteredTarget_=event.target;let item=event.target;while(item&&!(item instanceof TreeItem)){item=item.parentNode}if(item===this.dropTarget_){return}const entry=item&&item.entry;if(entry){this.setDropTarget_(item,event.dataTransfer,entry)}else{this.clearDropTarget_()}}onDragLeave_(list,event){if(event.target===this.lastEnteredTarget_){this.clearDropTarget_();this.lastEnteredTarget_=null}if(this.dropLabel_){this.dropLabel_.style.display="none"}}onDrop_(onlyIntoDirectories,event){if(onlyIntoDirectories&&!this.dropTarget_){return}const destinationEntry=this.destinationEntry_||this.directoryModel_.getCurrentDirEntry();if(!this.canPasteOrDrop_(event.dataTransfer,destinationEntry)){return}event.preventDefault();this.paste(event.dataTransfer,destinationEntry,this.selectDropEffect_(event,this.getDragAndDropGlobalData_(),destinationEntry).getDropEffect());this.clearDropTarget_()}changeToDropTargetDirectory_(){if(this.dropTarget_ instanceof DirectoryItem){this.dropTarget_.doDropTargetAction()}this.directoryModel_.changeDirectoryEntry(assert(this.destinationEntry_))}setDropTarget_(domElement,clipboardData,destinationEntry){if(this.dropTarget_===domElement){return}this.clearDropTarget_();this.dropTarget_=domElement;if(!domElement||!destinationEntry.isDirectory){return}assert(destinationEntry.isDirectory);domElement.classList.remove("accepts");domElement.classList.add("denies");const entries=this.selectionHandler_.selection.entries;for(let i=0;i<entries.length;i++){if(util$3.isSameEntry(entries[i],destinationEntry)){return}}this.destinationEntry_=destinationEntry;if(this.canPasteOrDrop_(clipboardData,destinationEntry)){domElement.classList.remove("denies");domElement.classList.add("accepts")}if(destinationEntry.rootType===VolumeManagerCommon$3.RootType.CROSTINI){this.changeToDropTargetDirectory_();return}const navigate=this.changeToDropTargetDirectory_.bind(this);this.navigateTimer_=setTimeout(navigate,this.dragTargetHoverTime_())}dragTargetHoverTime_(){return window.IN_TEST?500:2e3}onTouchStart_(){this.touching_=true}onTouchEnd_(){this.touching_=false}clearDropTarget_(){if(this.dropTarget_){this.dropTarget_.classList.remove("accepts","denies")}this.dropTarget_=null;this.destinationEntry_=null;if(this.navigateTimer_){clearTimeout(this.navigateTimer_);this.navigateTimer_=0}}getClipboardData_(event){const clipboardEvent=event;return assert(clipboardEvent.clipboardData)}isDocumentWideEvent_(){const element=this.document_.activeElement;const tagName=this.document_.activeElement.nodeName.toLowerCase();return!(tagName==="input"&&element.type==="text"||tagName==="cr-input")}onCutOrCopy_(isMove,event){if(!this.isDocumentWideEvent_()||!this.canCutOrCopy_(isMove)){return}event.preventDefault();const clipboardData=this.getClipboardData_(event);const effectAllowed=isMove?"move":"copy";if(document.activeElement instanceof DirectoryTree){this.cutOrCopyFromDirectoryTree(document.activeElement,clipboardData,effectAllowed);return}this.cutOrCopy_(clipboardData,effectAllowed);this.blinkSelection_()}cutOrCopyFromDirectoryTree(directoryTree,clipboardData,effectAllowed){const selectedItem=document.activeElement.selectedItem;if(selectedItem===null){return}const entry=selectedItem.entry;const volumeInfo=this.volumeManager_.getVolumeInfo(entry);if(!volumeInfo){return}const missingFileContents=volumeInfo.volumeType===VolumeManagerCommon$3.VolumeType.DRIVE&&this.volumeManager_.getDriveConnectionState().type===chrome.fileManagerPrivate.DriveConnectionStateType.OFFLINE;this.appendCutOrCopyInfo_(clipboardData,effectAllowed,volumeInfo,[entry],missingFileContents)}onBeforeCutOrCopy_(isMove,event){if(!this.isDocumentWideEvent_()){return}if(this.canCutOrCopy_(isMove)){event.preventDefault()}}canCutOrCopy_(isMove){const command=isMove?this.cutCommand_:this.copyCommand_;command.canExecuteChange(this.document_.activeElement);return!command.disabled}canCopyOrDrag(){if(!this.selectionHandler_.isAvailable()){return false}if(this.selectionHandler_.selection.entries.length<=0){return false}const entries=this.selectionHandler_.selection.entries;for(let i=0;i<entries.length;i++){if(util$3.isTeamDriveRoot(entries[i])){return false}if(i>0&&!util$3.isSiblingEntry(entries[0],entries[i])){return false}}return this.metadataModel_.getCache(entries,["canCopy"]).every((item=>item.canCopy!==false))}canCutOrDrag(){if(this.directoryModel_.isReadOnly()||!this.selectionHandler_.isAvailable()||this.selectionHandler_.selection.entries.length<=0){return false}const entries=this.selectionHandler_.selection.entries;const metadata=this.metadataModel_.getCache(entries,["canDelete"]);if(metadata.some((item=>item.canDelete===false))){return false}for(let i=0;i<entries.length;i++){if(util$3.isNonModifiable(this.volumeManager_,entries[i])){return false}}return true}onPaste_(event){const destination=event.destDirectory||this.directoryModel_.getCurrentDirEntry();if(!this.isDocumentWideEvent_()||!this.canPasteOrDrop_(this.getClipboardData_(event),destination)){return}event.preventDefault();this.paste(this.getClipboardData_(event),destination).then((effect=>{if(effect==="move"){this.simulateCommand_("cut",(event=>{event.preventDefault();event.clipboardData.setData("fs/clear","")}))}}))}onBeforePaste_(event){if(!this.isDocumentWideEvent_()){return}if(this.canPasteOrDrop_(this.getClipboardData_(event),this.directoryModel_.getCurrentDirEntry())){event.preventDefault()}}canPasteOrDrop_(clipboardData,destinationEntry){if(!clipboardData){return false}if(!destinationEntry){return false}const destinationLocationInfo=this.volumeManager_.getLocationInfo(destinationEntry);if(!destinationLocationInfo||destinationLocationInfo.isReadOnly){return false}if(destinationLocationInfo.volumeInfo&&destinationLocationInfo.volumeInfo.error){return false}const types=clipboardData.types;if(!types||!(types.includes("fs/tag")||types.includes("Files"))){return false}const sourceUrls=(clipboardData.getData("fs/sources")||"").split("\n");if(this.getSourceRootURL_(clipboardData,this.getDragAndDropGlobalData_())!==destinationLocationInfo.volumeInfo.fileSystem.root.toURL()){if(this.isMissingFileContents_(clipboardData)){return false}if(sourceUrls.some((source=>FileType.getTypeForName(source).type==="hosted"))){return false}}const addTrailingSlash=s=>{if(!s.endsWith("/")){s+="/"}return s};const destinationUrl=addTrailingSlash(destinationEntry.toURL());if(sourceUrls.some((source=>destinationUrl.startsWith(addTrailingSlash(source))))){return false}const metadata=this.metadataModel_.getCache([destinationEntry],["canAddChildren"]);if(metadata[0].canAddChildren===false){return false}return true}queryPasteCommandEnabled(destinationEntry){if(!this.isDocumentWideEvent_()){return false}let result;this.simulateCommand_("paste",(event=>{result=this.canPasteOrDrop_(this.getClipboardData_(event),destinationEntry)}));return result}simulateCommand_(command,handler){const iframe=this.document_.body.querySelector("#command-dispatcher");const doc=iframe.contentDocument;doc.addEventListener(command,handler);doc.execCommand(command);doc.removeEventListener(command,handler)}onFileSelectionChanged_(){this.preloadedThumbnailImagePromise_=null}onFileSelectionChangedThrottled_(){const asyncData={};const entries=this.selectionHandler_.selection.entries;for(let i=0;i<entries.length;i++){const entryUrl=entries[i].toURL();if(entryUrl in this.selectedAsyncData_){asyncData[entryUrl]=this.selectedAsyncData_[entryUrl]}}this.selectedAsyncData_=asyncData;const fileEntries=[];for(let i=0;i<entries.length;i++){if(entries[i].isFile){fileEntries.push(entries[i])}if(!(entries[i].toURL()in asyncData)){asyncData[entries[i].toURL()]={externalFileUrl:"",file:null}}}const containsDirectory=this.selectionHandler_.selection.directoryCount>0;if(!containsDirectory){for(let i=0;i<fileEntries.length;i++){(fileEntry=>{if(!asyncData[fileEntry.toURL()].file){fileEntry.file((file=>{asyncData[fileEntry.toURL()].file=file}))}})(fileEntries[i])}}if(entries.length===1){this.preloadThumbnailImage_(entries[0])}this.metadataModel_.get(entries,["alternateUrl","externalFileUrl","hosted"]).then((metadataList=>{for(let i=0;i<entries.length;i++){if(entries[i].isFile){if(metadataList[i].hosted){asyncData[entries[i].toURL()].externalFileUrl=metadataList[i].alternateUrl}else{asyncData[entries[i].toURL()].externalFileUrl=metadataList[i].externalFileUrl}}}}))}selectDropEffect_(event,dragAndDropData,destinationEntry){if(!destinationEntry){return new DropEffectAndLabel(DropEffectType.NONE,null)}const destinationLocationInfo=this.volumeManager_.getLocationInfo(destinationEntry);if(!destinationLocationInfo){return new DropEffectAndLabel(DropEffectType.NONE,null)}if(destinationLocationInfo.volumeInfo&&destinationLocationInfo.volumeInfo.error){return new DropEffectAndLabel(DropEffectType.NONE,null)}if(destinationLocationInfo.isReadOnly){if(destinationLocationInfo.isSpecialSearchRoot){return new DropEffectAndLabel(DropEffectType.NONE,null)}if(destinationLocationInfo.rootType==VolumeManagerCommon$3.RootType.CROSTINI){return new DropEffectAndLabel(DropEffectType.NONE,strf("OPENING_LINUX_FILES"))}if(destinationLocationInfo.volumeInfo&&destinationLocationInfo.volumeInfo.isReadOnlyRemovableDevice){return new DropEffectAndLabel(DropEffectType.NONE,strf("DEVICE_WRITE_PROTECTED"))}return new DropEffectAndLabel(DropEffectType.NONE,strf("DEVICE_ACCESS_RESTRICTED"))}const destinationMetadata=this.metadataModel_.getCache([destinationEntry],["canAddChildren"]);if(destinationMetadata.length===1&&destinationMetadata[0].canAddChildren===false){return new DropEffectAndLabel(DropEffectType.NONE,strf("DROP_TARGET_FOLDER_NO_MOVE_PERMISSION",destinationEntry.name))}if(util$3.isDropEffectAllowed(event.dataTransfer.effectAllowed,"move")){if(!util$3.isDropEffectAllowed(event.dataTransfer.effectAllowed,"copy")){return new DropEffectAndLabel(DropEffectType.MOVE,null)}if(this.getSourceRootURL_(event.dataTransfer,dragAndDropData)===destinationLocationInfo.volumeInfo.fileSystem.root.toURL()&&!event.ctrlKey){return new DropEffectAndLabel(DropEffectType.MOVE,null)}if(event.shiftKey){return new DropEffectAndLabel(DropEffectType.MOVE,null)}}return new DropEffectAndLabel(DropEffectType.COPY,null)}blinkSelection_(){const selection=this.selectionHandler_.selection;if(!selection||selection.totalCount==0){return}const listItems=[];for(let i=0;i<selection.entries.length;i++){const selectedIndex=selection.indexes[i];const listItem=this.listContainer_.currentList.getListItemByIndex(selectedIndex);if(listItem){listItem.classList.add("blink");listItems.push(listItem)}}setTimeout((()=>{for(let i=0;i<listItems.length;i++){listItems[i].classList.remove("blink")}}),100)}}FileTransferController.DRAG_THUMBNAIL_SIZE_=64;FileTransferController.DRAG_LABEL_Y_OFFSET_=-32;FileTransferController.ConfirmationType={NONE:"none",MOVE_BETWEEN_SHARED_DRIVES:"between_team_drives",MOVE_FROM_SHARED_DRIVE_TO_OTHER:"move_from_team_drive_to_other",MOVE_FROM_OTHER_TO_SHARED_DRIVE:"move_from_other_to_team_drive",COPY_FROM_OTHER_TO_SHARED_DRIVE:"copy_from_other_to_team_drive"};FileTransferController.PastePlan=class{constructor(sourceURLs,sourceEntries,destinationEntry,destinationLocationInfo,isMove){this.sourceURLs=sourceURLs;this.sourceEntries=sourceEntries;this.failureUrls=[];this.destinationEntry=destinationEntry;this.destinationLocationInfo=destinationLocationInfo;this.isMove=isMove}async resolveEntries(){if(!this.sourceEntries.length){const result=await FileTransferController.URLsToEntriesWithAccess(this.sourceURLs);this.sourceEntries=result.entries;this.failureUrls=result.failureUrls}return this.sourceEntries}getConfirmationType(){assert(this.sourceEntries.length!=0);const source={isTeamDrive:util$3.isSharedDriveEntry(this.sourceEntries[0]),teamDriveName:util$3.getTeamDriveName(this.sourceEntries[0])};const destination={isTeamDrive:util$3.isSharedDriveEntry(this.destinationEntry),teamDriveName:util$3.getTeamDriveName(this.destinationEntry)};if(this.isMove){if(source.isTeamDrive){if(destination.isTeamDrive){if(source.teamDriveName==destination.teamDriveName){return FileTransferController.ConfirmationType.NONE}else{return FileTransferController.ConfirmationType.MOVE_BETWEEN_SHARED_DRIVES}}else{return FileTransferController.ConfirmationType.MOVE_FROM_SHARED_DRIVE_TO_OTHER}}else if(destination.isTeamDrive){return FileTransferController.ConfirmationType.MOVE_FROM_OTHER_TO_SHARED_DRIVE}return FileTransferController.ConfirmationType.NONE}else{if(!destination.isTeamDrive){return FileTransferController.ConfirmationType.NONE}if(!(source.isTeamDrive&&source.teamDriveName==destination.teamDriveName)){return FileTransferController.ConfirmationType.COPY_FROM_OTHER_TO_SHARED_DRIVE}return FileTransferController.ConfirmationType.NONE}}getConfirmationMessages(confirmationType){assert(this.sourceEntries.length!=0);const sourceName=util$3.getTeamDriveName(this.sourceEntries[0]);const destinationName=util$3.getTeamDriveName(this.destinationEntry);switch(confirmationType){case FileTransferController.ConfirmationType.MOVE_BETWEEN_SHARED_DRIVES:return[strf("DRIVE_CONFIRM_TD_MEMBERS_LOSE_ACCESS",sourceName),strf("DRIVE_CONFIRM_TD_MEMBERS_GAIN_ACCESS_TO_COPY",destinationName)];case FileTransferController.ConfirmationType.MOVE_FROM_SHARED_DRIVE_TO_OTHER:return[strf("DRIVE_CONFIRM_TD_MEMBERS_LOSE_ACCESS",sourceName)];case FileTransferController.ConfirmationType.MOVE_FROM_OTHER_TO_SHARED_DRIVE:return[strf("DRIVE_CONFIRM_TD_MEMBERS_GAIN_ACCESS",destinationName)];case FileTransferController.ConfirmationType.COPY_FROM_OTHER_TO_SHARED_DRIVE:return[strf("DRIVE_CONFIRM_TD_MEMBERS_GAIN_ACCESS_TO_COPY",destinationName)]}assertNotReached("Invalid confirmation type: "+confirmationType);return[]}};FileTransferController.URLsToEntriesWithAccess=urls=>new Promise(((resolve,reject)=>{chrome.fileManagerPrivate.grantAccess(urls,resolve.bind(null,undefined))})).then((()=>util$3.URLsToEntries(urls)));// Copyright 2014 The Chromium Authors. All rights reserved.
class NamingController{constructor(listContainer,alertDialog,confirmDialog,directoryModel,fileFilter,selectionHandler){this.listContainer_=listContainer;this.alertDialog_=alertDialog;this.confirmDialog_=confirmDialog;this.directoryModel_=directoryModel;this.fileFilter_=fileFilter;this.selectionHandler_=selectionHandler;this.showingContextMenu_=false;this.listContainer_.renameInput.addEventListener("keydown",this.onRenameInputKeyDown_.bind(this));this.listContainer_.renameInput.addEventListener("blur",this.onRenameInputBlur_.bind(this));this.listContainer_.renameInput.addEventListener("contextmenu",this.onContextMenu_.bind(this));this.listContainer_.renameInput.addEventListener("focus",this.onFocus_.bind(this))}validateFileName(parentEntry,name,onDone){const fileNameErrorPromise=util$3.validateFileName(parentEntry,name,!this.fileFilter_.isHiddenFilesVisible());fileNameErrorPromise.then(onDone.bind(null,true),(message=>{this.alertDialog_.show(message,onDone.bind(null,false))})).catch((error=>{console.error(error.stack||error)}))}validateFileNameForSaving(filename){const directory=this.directoryModel_.getCurrentDirEntry();const currentDirUrl=directory.toURL().replace(/\/?$/,"/");const fileUrl=currentDirUrl+encodeURIComponent(filename);return new Promise(this.validateFileName.bind(this,directory,filename)).then((isValid=>{if(!isValid){return Promise.reject("Invalid filename.")}if(directory&&util$3.isFakeEntry(directory)){return Promise.reject("Cannot save into fake entry.")}return new Promise(directory.getFile.bind(directory,filename,{create:false}))})).then((()=>new Promise(((fulfill,reject)=>{this.confirmDialog_.show(strf("CONFIRM_OVERWRITE_FILE",filename),fulfill.bind(null,fileUrl),reject.bind(null,"Cancelled"),(()=>{}))}))),(error=>{if(error.name==util$3.FileError.NOT_FOUND_ERR){return fileUrl}if(error.name==util$3.FileError.TYPE_MISMATCH_ERR){this.alertDialog_.show(strf("DIRECTORY_ALREADY_EXISTS",filename));return Promise.reject(error)}console.error("File save failed: "+error.code);return Promise.reject(error)}))}isRenamingInProgress(){return!!this.listContainer_.renameInput.currentEntry}initiateRename(){const item=this.listContainer_.currentList.ensureLeadItemExists();if(!item){return}const label=item.querySelector(".filename-label");const input=this.listContainer_.renameInput;const currentEntry=this.listContainer_.currentList.dataModel.item(item.listIndex);input.value=label.textContent;item.setAttribute("renaming","");label.parentNode.appendChild(input);input.focus();const selectionEnd=input.value.lastIndexOf(".");if(currentEntry.isFile&&selectionEnd!==-1){input.selectionStart=0;input.selectionEnd=selectionEnd}else{input.select()}input.currentEntry=currentEntry;this.listContainer_.startBatchUpdates()}restoreItemBeingRenamed(){if(!this.isRenamingInProgress()){return}const dm=this.directoryModel_;const leadIndex=dm.getFileListSelection().leadIndex;if(leadIndex<0){return}const leadEntry=dm.getFileList().item(leadIndex);if(!util$3.isSameEntry(this.listContainer_.renameInput.currentEntry,leadEntry)){return}const leadListItem=this.listContainer_.findListItemForNode(this.listContainer_.renameInput);if(this.listContainer_.currentListType==ListContainer.ListType.DETAIL){this.listContainer_.table.updateFileMetadata(leadListItem,leadEntry)}this.listContainer_.currentList.restoreLeadItem(leadListItem)}onRenameInputKeyDown_(event){if(!this.isRenamingInProgress()){return}if(event.key==="ArrowUp"||event.key==="ArrowDown"){event.stopPropagation()}switch(util$3.getKeyModifiers(event)+event.key){case"Escape":this.cancelRename_();event.preventDefault();break;case"Enter":this.commitRename_();event.preventDefault();break}}onContextMenu_(event){this.showingContextMenu_=true}onFocus_(event){this.showingContextMenu_=false}onRenameInputBlur_(event){if(this.showingContextMenu_){return}if(this.isRenamingInProgress()&&!this.listContainer_.renameInput.validation_){this.commitRename_()}}commitRename_(){const input=this.listContainer_.renameInput;const entry=input.currentEntry;const newName=input.value;const renamedItemElement=this.listContainer_.findListItemForNode(this.listContainer_.renameInput);const nameNode=renamedItemElement.querySelector(".filename-label");if(!newName||newName==nameNode.textContent){this.cancelRename_();return}input.validation_=true;const validationDone=valid=>{input.validation_=false;if(!valid){if(document.activeElement!=input){this.cancelRename_()}return}this.listContainer_.renameInput.currentEntry=null;if(this.listContainer_.renameInput.parentNode){this.listContainer_.renameInput.parentNode.removeChild(this.listContainer_.renameInput)}renamedItemElement.setAttribute("renaming","provisional");nameNode.textContent=newName;util$3.rename(entry,newName,(newEntry=>{this.directoryModel_.onRenameEntry(entry,assert(newEntry),(()=>{this.listContainer_.currentList.selectionModel.selectedIndex=this.directoryModel_.getFileList().indexOf(newEntry);this.selectionHandler_.onFileSelectionChanged();renamedItemElement.removeAttribute("renaming");this.listContainer_.endBatchUpdates();this.listContainer_.currentList.focus()}))}),(error=>{nameNode.textContent=entry.name;renamedItemElement.removeAttribute("renaming");this.listContainer_.endBatchUpdates();const message=util$3.getRenameErrorMessage(error,entry,newName);this.alertDialog_.show(message)}))};this.validateFileName(this.directoryModel_.getCurrentDirEntry(),newName,validationDone.bind(this))}cancelRename_(){this.listContainer_.renameInput.currentEntry=null;const item=this.listContainer_.findListItemForNode(this.listContainer_.renameInput);if(item){item.removeAttribute("renaming")}const parent=this.listContainer_.renameInput.parentNode;if(parent){parent.removeChild(this.listContainer_.renameInput)}this.listContainer_.endBatchUpdates();this.listContainer_.currentList.focus()}}// Copyright 2014 The Chromium Authors. All rights reserved.
class MetadataUpdateController{constructor(listContainer,directoryModel,metadataModel,fileMetadataFormatter){this.directoryModel_=directoryModel;this.metadataModel_=metadataModel;this.listContainer_=listContainer;this.fileMetadataFormatter_=fileMetadataFormatter;chrome.fileManagerPrivate.onPreferencesChanged.addListener(this.onPreferencesChanged_.bind(this));this.onPreferencesChanged_();metadataModel.addEventListener("update",this.onCachedMetadataUpdate_.bind(this));const today=new Date;today.setHours(0);today.setMinutes(0);today.setSeconds(0);today.setMilliseconds(0);setTimeout(this.dailyUpdateModificationTime_.bind(this),today.getTime()+MetadataUpdateController.MILLISECONDS_IN_DAY_-Date.now()+1e3)}refreshCurrentDirectoryMetadata(){const entries=this.directoryModel_.getFileList().slice();const directoryEntry=this.directoryModel_.getCurrentDirEntry();if(!directoryEntry){return}const isFakeEntry=util$3.isFakeEntry(directoryEntry);const changedEntries=(isFakeEntry?[]:[directoryEntry]).concat(entries);this.metadataModel_.notifyEntriesChanged(changedEntries);this.metadataModel_.get(changedEntries,this.directoryModel_.getPrefetchPropertyNames())}onCachedMetadataUpdate_(event){this.listContainer_.currentView.updateListItemsMetadata("filesystem",event.entries);this.listContainer_.currentView.updateListItemsMetadata("external",event.entries)}dailyUpdateModificationTime_(){const entries=this.directoryModel_.getFileList().slice();this.metadataModel_.get(entries,["modificationTime"]).then((()=>{this.listContainer_.currentView.updateListItemsMetadata("filesystem",entries)}));setTimeout(this.dailyUpdateModificationTime_.bind(this),MetadataUpdateController.MILLISECONDS_IN_DAY_)}onPreferencesChanged_(){chrome.fileManagerPrivate.getPreferences((prefs=>{const use12hourClock=!prefs.use24hourClock;this.fileMetadataFormatter_.setDateTimeFormat(use12hourClock);this.listContainer_.table.setDateTimeFormat(use12hourClock);this.refreshCurrentDirectoryMetadata()}))}}MetadataUpdateController.MILLISECONDS_IN_DAY_=24*60*60*1e3;// Copyright 2017 The Chromium Authors. All rights reserved.
class TaskHistory extends NativeEventTarget{constructor(){super();this.lastExecutedTime_={};chrome.storage.onChanged.addListener(this.onLocalStorageChanged_.bind(this));this.load_()}recordTaskExecuted(taskId){this.lastExecutedTime_[taskId]=Date.now();this.truncate_();this.save_()}getLastExecutedTime(taskId){return this.lastExecutedTime_[taskId]?this.lastExecutedTime_[taskId]:0}load_(){chrome.storage.local.get(TaskHistory.STORAGE_KEY_LAST_EXECUTED_TIME,(value=>{this.lastExecutedTime_=value[TaskHistory.STORAGE_KEY_LAST_EXECUTED_TIME]||{}}))}save_(){const objectToSave={};objectToSave[TaskHistory.STORAGE_KEY_LAST_EXECUTED_TIME]=this.lastExecutedTime_;chrome.storage.local.set(objectToSave)}onLocalStorageChanged_(changes,areaName){if(areaName!="local"){return}for(const key in changes){if(key==TaskHistory.STORAGE_KEY_LAST_EXECUTED_TIME){this.lastExecutedTime_=changes[key].newValue;dispatchSimpleEvent(this,TaskHistory.EventType.UPDATE)}}}truncate_(){const keys=Object.keys(this.lastExecutedTime_);if(keys.length<=TaskHistory.LAST_EXECUTED_TIME_HISTORY_MAX){return}let items=[];for(let i=0;i<keys.length;i++){items.push({id:keys[i],timestamp:this.lastExecutedTime_[keys[i]]})}items.sort(((a,b)=>b.timestamp-a.timestamp));items=items.slice(0,TaskHistory.LAST_EXECUTED_TIME_HISTORY_MAX);const newObject={};for(let i=0;i<items.length;i++){newObject[items[i].id]=items[i].timestamp}this.lastExecutedTime_=newObject}}TaskHistory.EventType={UPDATE:"update"};TaskHistory.STORAGE_KEY_LAST_EXECUTED_TIME="task-last-executed-time";TaskHistory.LAST_EXECUTED_TIME_HISTORY_MAX=100;// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class FileTasks{constructor(volumeManager,metadataModel,directoryModel,ui,fileTransferController,entries,mimeTypes,tasks,defaultTask,taskHistory,namingController,crostini,progressCenter){this.volumeManager_=volumeManager;this.metadataModel_=metadataModel;this.directoryModel_=directoryModel;this.ui_=ui;this.fileTransferController_=fileTransferController;this.entries_=entries;this.mimeTypes_=mimeTypes;this.tasks_=tasks;this.defaultTask_=defaultTask;this.taskHistory_=taskHistory;this.namingController_=namingController;this.crostini_=crostini;this.progressCenter_=progressCenter;this.mutex_=new AsyncUtil.Queue}get entries(){return this.entries_}static async create(volumeManager,metadataModel,directoryModel,ui,fileTransferController,entries,mimeTypes,taskHistory,namingController,crostini,progressCenter){let tasks=[];entries=entries.filter((e=>!util$3.isFakeEntry(e)));if(entries.length!==0){tasks=await new Promise((fulfill=>chrome.fileManagerPrivate.getFileTasks(entries,fulfill)));if(!tasks){throw new Error("Cannot get file tasks: "+chrome.runtime.lastError.message)}}if(entries.length!==1||!(FileTasks.isCrostiniEntry(entries[0],volumeManager)||crostini.canSharePath(constants.DEFAULT_CROSTINI_VM,entries[0],false))){tasks=tasks.filter((task=>task.taskId!==FileTasks.INSTALL_LINUX_PACKAGE_TASK_ID))}tasks=tasks.filter((task=>task.taskId!==FileTasks.ZIP_ARCHIVER_ZIP_TASK_ID&&task.taskId!==FileTasks.ZIP_ARCHIVER_ZIP_USING_TMP_TASK_ID));const toExclude=util$3.isZipMountEnabled()?FileTasks.ZIP_ARCHIVER_UNZIP_TASK_ID:FileTasks.FILES_OPEN_ZIP_TASK_ID;tasks=tasks.filter((task=>task.taskId!==toExclude));tasks=FileTasks.annotateTasks_(tasks,entries);const defaultTask=FileTasks.getDefaultTask(tasks,taskHistory);return new FileTasks(volumeManager,metadataModel,directoryModel,ui,fileTransferController,entries,mimeTypes,tasks,defaultTask,taskHistory,namingController,crostini,progressCenter)}getTaskItems(){return this.tasks_}getOpenTaskItems(){return this.tasks_.filter(FileTasks.isOpenTask)}getNonOpenTaskItems(){return this.tasks_.filter((task=>!FileTasks.isOpenTask(task)))}static isOffline_(volumeManager){const connection=volumeManager.getDriveConnectionState();return connection.type==chrome.fileManagerPrivate.DriveConnectionStateType.OFFLINE&&connection.reason==chrome.fileManagerPrivate.DriveOfflineReason.NO_NETWORK}static recordEnumWithOnlineAndOffline_(volumeManager,name,value,values){metrics.recordEnum(name,value,values);if(FileTasks.isOffline_(volumeManager)){metrics.recordEnum(name+".Offline",value,values)}else{metrics.recordEnum(name+".Online",value,values)}}static getViewFileType(entry){let extension=FileType.getExtension(entry).toLowerCase();if(FileTasks.UMA_INDEX_KNOWN_EXTENSIONS.indexOf(extension)<0){extension="other"}return extension}static recordSharingActionUMA_(source,entries){metrics.recordEnum("Share.ActionSource",source,FileTasks.ValidSharingActionSource);metrics.recordSmallCount("Share.FileCount",entries.length);for(const entry of entries){metrics.recordEnum("Share.FileType",FileTasks.getViewFileType(entry),FileTasks.UMA_INDEX_KNOWN_EXTENSIONS)}}static recordViewingFileTypeUMA_(volumeManager,entries){for(const entry of entries){FileTasks.recordEnumWithOnlineAndOffline_(volumeManager,"ViewingFileType",FileTasks.getViewFileType(entry),FileTasks.UMA_INDEX_KNOWN_EXTENSIONS)}}static recordViewingRootTypeUMA_(volumeManager,rootType){if(rootType!==null){FileTasks.recordEnumWithOnlineAndOffline_(volumeManager,"ViewingRootType",rootType,VolumeManagerCommon$3.RootTypesForUMA)}}static recordZipHandlerUMA_(taskId){if(FileTasks.UMA_ZIP_HANDLER_TASK_IDS_.indexOf(taskId)!=-1){metrics.recordEnum("ZipFileTask",taskId,FileTasks.UMA_ZIP_HANDLER_TASK_IDS_)}}static isInternalTask_(taskId){const[appId,taskType,actionId]=taskId.split("|");if(appId!==chrome.runtime.id||taskType!=="app"){return false}switch(actionId){case"mount-archive":case"open-zip":case"install-linux-package":case"import-crostini-image":return true;default:return false}}static isOpenTask(task){return!task.verb||task.verb==chrome.fileManagerPrivate.Verb.OPEN_WITH}static isShareTask(task){return task.verb===chrome.fileManagerPrivate.Verb.SHARE_WITH}static annotateTasks_(tasks,entries){const result=[];const id=chrome.runtime.id;for(const task of tasks){const[appId,taskType,actionId]=task.taskId.split("|");if(appId===id&&(actionId==="select"||actionId==="open")){continue}if(appId===id&&taskType==="app"){if(actionId==="mount-archive"){task.iconType="archive";task.title=loadTimeData.getString("MOUNT_ARCHIVE");task.verb=undefined}else if(actionId==="open-hosted-generic"){if(entries.length>1){task.iconType="generic"}else{task.iconType=FileType.getIcon(entries[0])}task.title=loadTimeData.getString("TASK_OPEN");task.verb=undefined}else if(actionId==="open-hosted-gdoc"){task.iconType="gdoc";task.title=loadTimeData.getString("TASK_OPEN_GDOC");task.verb=undefined}else if(actionId==="open-hosted-gsheet"){task.iconType="gsheet";task.title=loadTimeData.getString("TASK_OPEN_GSHEET");task.verb=undefined}else if(actionId==="open-hosted-gslides"){task.iconType="gslides";task.title=loadTimeData.getString("TASK_OPEN_GSLIDES");task.verb=undefined}else if(actionId==="install-linux-package"){task.iconType="crostini";task.title=loadTimeData.getString("TASK_INSTALL_LINUX_PACKAGE");task.verb=undefined}else if(actionId==="import-crostini-image"){task.iconType="tini";task.title=loadTimeData.getString("TASK_IMPORT_CROSTINI_IMAGE");task.verb=undefined}else if(actionId==="view-swf"){task.iconType="generic";task.title=loadTimeData.getString("TASK_VIEW");task.verb=undefined}else if(actionId==="view-pdf"){task.iconType="pdf";task.title=loadTimeData.getString("TASK_VIEW");task.verb=undefined}else if(actionId==="view-in-browser"){task.iconType="generic";task.title=loadTimeData.getString("TASK_VIEW");task.verb=undefined}}if(!task.iconType&&taskType==="web-intent"){task.iconType="generic"}if(task.verb){let verbButtonLabel="";switch(task.verb){case chrome.fileManagerPrivate.Verb.ADD_TO:verbButtonLabel="ADD_TO_VERB_BUTTON_LABEL";break;case chrome.fileManagerPrivate.Verb.PACK_WITH:verbButtonLabel="PACK_WITH_VERB_BUTTON_LABEL";break;case chrome.fileManagerPrivate.Verb.SHARE_WITH:if(!(taskType=="arc"&&(actionId=="send"||actionId=="send_multiple"))){verbButtonLabel="SHARE_WITH_VERB_BUTTON_LABEL"}break;case chrome.fileManagerPrivate.Verb.OPEN_WITH:verbButtonLabel="OPEN_WITH_VERB_BUTTON_LABEL";break;default:console.error("Invalid task verb: "+task.verb+".")}if(verbButtonLabel){task.label=loadTimeData.getStringF(verbButtonLabel,task.title)}}result.push(task)}return result}static isCrostiniEntry(entry,volumeManager){const location=volumeManager.getLocationInfo(entry);return!!location&&location.rootType===VolumeManagerCommon$3.RootType.CROSTINI}static isMyFilesEntry(entry,volumeManager){const location=volumeManager.getLocationInfo(entry);return!!location&&location.rootType===VolumeManagerCommon$3.RootType.DOWNLOADS}static showPluginVmMoveDialog(entries,volumeManager,ui,title,fileTransferController,directoryModel){if(entries.length==0){return}const isMyFiles=FileTasks.isMyFilesEntry(entries[0],volumeManager);const[messageId,buttonId,toMove]=isMyFiles?["UNABLE_TO_OPEN_WITH_PLUGIN_VM_DIRECTORY_NOT_SHARED_MESSAGE","CONFIRM_MOVE_BUTTON_LABEL",true]:["UNABLE_TO_OPEN_WITH_PLUGIN_VM_EXTERNAL_DRIVE_MESSAGE","CONFIRM_COPY_BUTTON_LABEL",false];const dialog=new FilesConfirmDialog(ui.element);dialog.setOkLabel(strf(buttonId));dialog.show(strf(messageId,title),(async()=>{if(!fileTransferController){console.error("FileTransferController not set");return}const pvmDir=await FileTasks.getPvmSharedDir_(volumeManager);fileTransferController.executePaste(new FileTransferController.PastePlan(entries.map((e=>e.toURL())),[],pvmDir,assert(volumeManager.getLocationInfo(pvmDir)),toMove));directoryModel.changeDirectoryEntry(pvmDir)}))}executeDefault(opt_callback){FileTasks.recordViewingFileTypeUMA_(this.volumeManager_,this.entries_);FileTasks.recordViewingRootTypeUMA_(this.volumeManager_,this.directoryModel_.getCurrentRootType());this.executeDefaultInternal_(opt_callback)}executeDefaultInternal_(opt_callback){const callback=opt_callback||((arg1,arg2)=>{});if(this.defaultTask_!==null){this.executeInternal_(this.defaultTask_);callback(true,this.entries_);return}const nonGenericTasks=this.tasks_.filter((t=>!t.isGenericFileHandler));if(nonGenericTasks.length>=2){this.showTaskPicker(this.ui_.defaultTaskPicker,str("OPEN_WITH_BUTTON_LABEL"),"",(task=>{this.execute(task)}),FileTasks.TaskPickerType.OpenWith);return}if(this.entries_.length!==1){return}const filename=this.entries_[0].name;const extension=util$3.splitExtension(filename)[1]||null;const mimeType=this.mimeTypes_[0]||null;const showAlert=()=>{let textMessageId;let titleMessageId;switch(extension){case".exe":case".msi":textMessageId="NO_TASK_FOR_EXECUTABLE";break;case".dmg":textMessageId="NO_TASK_FOR_DMG";break;case".crx":textMessageId="NO_TASK_FOR_CRX";titleMessageId="NO_TASK_FOR_CRX_TITLE";break;default:textMessageId="NO_TASK_FOR_FILE"}const text=strf(textMessageId,str("NO_TASK_FOR_FILE_URL"));const title=titleMessageId?str(titleMessageId):filename;this.ui_.alertDialog.showHtml(title,text,null,null,null);callback(false,this.entries_)};const onViewFilesFailure=()=>{showAlert()};const onViewFiles=result=>{if(chrome.runtime.lastError){console.debug(chrome.runtime.lastError.message);onViewFilesFailure();return}switch(result){case"opened":callback(true,this.entries_);break;case"message_sent":util$3.isTeleported(window).then((teleported=>{if(teleported){this.ui_.showOpenInOtherDesktopAlert(this.entries_)}}));callback(true,this.entries_);break;case"empty":callback(true,this.entries_);break;case"failed":onViewFilesFailure();break}};this.checkAvailability_((()=>{const taskId=chrome.runtime.id+"|file|view-in-browser";chrome.fileManagerPrivate.executeTask(taskId,this.entries_,onViewFiles)}))}execute(task){FileTasks.recordViewingFileTypeUMA_(this.volumeManager_,this.entries_);FileTasks.recordViewingRootTypeUMA_(this.volumeManager_,this.directoryModel_.getCurrentRootType());if(FileTasks.isShareTask(task)){FileTasks.recordSharingActionUMA_(FileTasks.SharingActionSourceForUMA.SHARE_BUTTON,this.entries_)}this.executeInternal_(task)}executeInternal_(task){const onFileManagerPrivateExecuteTask=result=>{if(chrome.runtime.lastError){console.error("Unable to execute task: "+chrome.runtime.lastError.message);return}const taskResult=chrome.fileManagerPrivate.TaskResult;switch(result){case taskResult.MESSAGE_SENT:util$3.isTeleported(window).then((teleported=>{if(teleported){this.ui_.showOpenInOtherDesktopAlert(this.entries_)}}));break;case taskResult.FAILED_PLUGIN_VM_DIRECTORY_NOT_SHARED:FileTasks.showPluginVmMoveDialog(this.entries_,this.volumeManager_,this.ui_,task.title,this.fileTransferController_,this.directoryModel_);break}};this.checkAvailability_((()=>{this.taskHistory_.recordTaskExecuted(task.taskId);let msg;if(this.entries.length===1){msg=strf("OPEN_A11Y",this.entries_[0].name)}else{msg=strf("OPEN_A11Y_PLURAL",this.entries_.length)}this.ui_.speakA11yMessage(msg);if(FileTasks.isInternalTask_(task.taskId)){this.executeInternalTask_(task.taskId)}else{FileTasks.recordZipHandlerUMA_(task.taskId);chrome.fileManagerPrivate.executeTask(task.taskId,this.entries_,onFileManagerPrivateExecuteTask)}}))}checkAvailability_(callback){const areAll=(entries,props,name)=>{let okEntriesNum=0;for(let i=0;i<entries.length;i++){if(props[i]&&(props[i][name]||entries[i].isDirectory)){okEntriesNum++}}return okEntriesNum===props.length};const containsDriveEntries=this.entries_.some((entry=>{const volumeInfo=this.volumeManager_.getVolumeInfo(entry);return volumeInfo&&volumeInfo.volumeType===VolumeManagerCommon$3.VolumeType.DRIVE}));if(!containsDriveEntries){callback();return}const isDriveOffline=this.volumeManager_.getDriveConnectionState().type===chrome.fileManagerPrivate.DriveConnectionStateType.OFFLINE;if(isDriveOffline){this.metadataModel_.get(this.entries_,["availableOffline","hosted"]).then((props=>{if(areAll(this.entries_,props,"availableOffline")){callback();return}this.ui_.alertDialog.showHtml(loadTimeData.getString("OFFLINE_HEADER"),props[0].hosted?loadTimeData.getStringF(this.entries_.length===1?"HOSTED_OFFLINE_MESSAGE":"HOSTED_OFFLINE_MESSAGE_PLURAL"):loadTimeData.getStringF(this.entries_.length===1?"OFFLINE_MESSAGE":"OFFLINE_MESSAGE_PLURAL",loadTimeData.getString("OFFLINE_COLUMN_LABEL")),null,null,null)}));return}const isOnMetered=this.volumeManager_.getDriveConnectionState().type===chrome.fileManagerPrivate.DriveConnectionStateType.METERED;if(isOnMetered){this.metadataModel_.get(this.entries_,["availableWhenMetered","size"]).then((props=>{if(areAll(this.entries_,props,"availableWhenMetered")){callback();return}let sizeToDownload=0;for(let i=0;i!==this.entries_.length;i++){if(!props[i].availableWhenMetered){sizeToDownload+=props[i].size}}this.ui_.confirmDialog.show(loadTimeData.getStringF(this.entries_.length===1?"CONFIRM_MOBILE_DATA_USE":"CONFIRM_MOBILE_DATA_USE_PLURAL",util$3.bytesToString(sizeToDownload)),callback,null,null)}));return}callback()}executeInternalTask_(taskId){const actionId=taskId.split("|")[2];if(actionId==="mount-archive"||actionId==="open-zip"){this.mountArchives_();return}if(actionId==="install-linux-package"){this.installLinuxPackageInternal_();return}if(actionId==="import-crostini-image"){this.importCrostiniImageInternal_();return}console.error("The specified task is not a valid internal task: "+taskId)}installLinuxPackageInternal_(){assert(this.entries_.length===1);this.ui_.installLinuxPackageDialog.showInstallLinuxPackageDialog(this.entries_[0])}importCrostiniImageInternal_(){assert(this.entries_.length===1);this.ui_.importCrostiniImageDialog.showImportCrostiniImageDialog(this.entries_[0])}async mountArchive_(url){const filename=util$3.extractFilePath(url).split("/").pop();const item=new ProgressCenterItem;item.id="Mounting: "+url;item.type=ProgressItemType.MOUNT_ARCHIVE;item.message=strf("ARCHIVE_MOUNT_MESSAGE",filename);item.state=ProgressItemState.PROGRESSING;this.progressCenter_.updateItem(item);try{return await this.volumeManager_.mountArchive(url)}catch(error){if(error!==VolumeManagerCommon$3.VolumeError.NEED_PASSWORD){throw error}}finally{item.state=ProgressItemState.COMPLETED;this.progressCenter_.updateItem(item)}const unlock=await this.mutex_.lock();try{let password=null;while(true){do{password=await this.ui_.passwordDialog.askForPassword(filename,password)}while(!password);item.state=ProgressItemState.PROGRESSING;this.progressCenter_.updateItem(item);try{return await this.volumeManager_.mountArchive(url,password)}catch(error){if(error!==VolumeManagerCommon$3.VolumeError.NEED_PASSWORD){throw error}}finally{item.state=ProgressItemState.COMPLETED;this.progressCenter_.updateItem(item)}}}finally{unlock()}}async mountArchiveAndChangeDirectory_(tracker,url){try{const volumeInfo=await this.mountArchive_(url);if(tracker.hasChanged){return}try{const displayRoot=await volumeInfo.resolveDisplayRoot();if(tracker.hasChanged){return}this.directoryModel_.changeDirectoryEntry(displayRoot)}catch(error){console.error(`Cannot resolve display root after mounting: ${error.stack||error}`)}}catch(error){if(error===FilesPasswordDialog.USER_CANCELLED){return}const filename=util$3.extractFilePath(url).split("/").pop();const item=new ProgressCenterItem;item.id="Cannot mount: "+url;item.type=ProgressItemType.MOUNT_ARCHIVE;item.message=strf("ARCHIVE_MOUNT_FAILED",filename);item.state=ProgressItemState.ERROR;this.progressCenter_.updateItem(item);console.error(`Cannot mount '${url}': ${error.stack||error}`)}}async mountArchives_(){const tracker=this.directoryModel_.createDirectoryChangeTracker();tracker.start();try{const urls=util$3.entriesToURLs(this.entries_);const promises=urls.map((url=>this.mountArchiveAndChangeDirectory_(tracker,url)));await Promise.all(promises)}finally{tracker.stop()}}display(openCombobutton,shareMenuButton){const openTasks=[];const otherTasks=[];for(const task of this.tasks_){if(FileTasks.isOpenTask(task)){openTasks.push(task)}else{otherTasks.push(task)}}this.updateOpenComboButton_(openCombobutton,openTasks);this.updateShareMenuButton_(shareMenuButton,otherTasks)}updateOpenComboButton_(combobutton,tasks){combobutton.hidden=tasks.length==0||this.entries_.some((e=>e.isDirectory));if(tasks.length==0){return}combobutton.clear();if(this.defaultTask_){combobutton.defaultItem=FileTasks.createComboButtonItem_(this.defaultTask_,str("TASK_OPEN"))}else{combobutton.defaultItem={type:FileTasks.TaskMenuButtonItemType.ShowMenu,label:str("OPEN_WITH_BUTTON_LABEL")}}const items=this.createItems_(tasks);if(items.length>1||items.length===1&&this.defaultTask_===null){for(const item of items){combobutton.addDropDownItem(item)}if(this.defaultTask_){combobutton.addSeparator();const changeDefaultMenuItem=combobutton.addDropDownItem({type:FileTasks.TaskMenuButtonItemType.ChangeDefaultTask,label:loadTimeData.getString("CHANGE_DEFAULT_MENU_ITEM")});changeDefaultMenuItem.classList.add("change-default")}}}updateShareMenuButton_(shareMenuButton,tasks){const driveShareCommand=shareMenuButton.menu.querySelector('cr-menu-item[command="#share"]');const driveShareCommandSeparator=shareMenuButton.menu.querySelector("#drive-share-separator");const moreActionsSeparator=shareMenuButton.menu.querySelector("#more-actions-separator");driveShareCommand.command.canExecuteChange(this.ui_.listContainer.currentList);shareMenuButton.hidden=driveShareCommand.disabled&&tasks.length==0||this.namingController_.isRenamingInProgress()||util$3.isSharesheetEnabled();moreActionsSeparator.hidden=true;driveShareCommandSeparator.hidden=driveShareCommand.disabled||tasks.length==0;const moreActions=shareMenuButton.menu.querySelector('cr-menu-item[command="#show-submenu"]');moreActions.remove();moreActions.setAttribute("hidden","");moreActionsSeparator.remove();const itemsToRemove=[].slice.call(shareMenuButton.menu.querySelectorAll('cr-menu-item:not([command="#share"])'));for(const item of itemsToRemove){item.parentNode.removeChild(item)}if(shareMenuButton.overflow!==null){while(shareMenuButton.overflow.firstChild!==null){shareMenuButton.overflow.removeChild(shareMenuButton.overflow.firstChild)}}const items=this.createItems_(tasks);let menu=shareMenuButton.menu;for(let i=0;i<items.length;i++){if(i==NUM_TOP_LEVEL_ENTRIES&&MAX_NON_SPLIT_ENTRIES<=items.length){moreActions.removeAttribute("hidden");moreActionsSeparator.hidden=false;menu=shareMenuButton.overflow}const menuitem=menu.addMenuItem(items[i]);decorate(menuitem,FilesMenuItem);menuitem.data=items[i];if(items[i].iconType){menuitem.style.backgroundImage="";menuitem.setAttribute("file-type-icon",items[i].iconType)}}shareMenuButton.menu.appendChild(moreActionsSeparator);shareMenuButton.menu.appendChild(moreActions)}createItems_(tasks){const items=[];for(const task of tasks){if(task===this.defaultTask_){const title=task.title+" "+loadTimeData.getString("DEFAULT_TASK_LABEL");items.push(FileTasks.createComboButtonItem_(task,title,true,true))}else{items.push(FileTasks.createComboButtonItem_(task))}}items.sort(((a,b)=>{const isDefault=(b.isDefault?1:0)-(a.isDefault?1:0);if(isDefault!==0){return isDefault}const aTime=this.taskHistory_.getLastExecutedTime(a.task.taskId);const bTime=this.taskHistory_.getLastExecutedTime(b.task.taskId);if(aTime!=bTime){return bTime-aTime}return a.label.localeCompare(b.label)}));return items}static createComboButtonItem_(task,opt_title,opt_bold,opt_isDefault){return{type:FileTasks.TaskMenuButtonItemType.RunTask,label:opt_title||task.label||task.title,iconUrl:task.iconUrl||"",iconType:task.iconType||"",task:task,bold:opt_bold||false,isDefault:opt_isDefault||false,isGenericFileHandler:task.isGenericFileHandler}}showTaskPicker(taskDialog,title,message,onSuccess,pickerType){const tasks=pickerType==FileTasks.TaskPickerType.MoreActions?this.getNonOpenTaskItems():this.getOpenTaskItems();let items=this.createItems_(tasks);if(pickerType==FileTasks.TaskPickerType.ChangeDefault){items=items.filter((item=>!item.isGenericFileHandler))}let defaultIdx=0;if(this.defaultTask_){for(let j=0;j<items.length;j++){if(items[j].task.taskId===this.defaultTask_.taskId){defaultIdx=j}}}taskDialog.showDefaultTaskDialog(title,message,items,defaultIdx,(item=>{onSuccess(item.task)}))}static getDefaultTask(tasks,taskHistory){for(const task of tasks){if(task.isDefault){return task}}const nonGenericTasks=tasks.filter((t=>!t.isGenericFileHandler));if(nonGenericTasks.length===0){return null}const latest=nonGenericTasks[0];if(nonGenericTasks.length==1||taskHistory.getLastExecutedTime(latest.taskId)){return latest}return null}static async getPvmSharedDir_(volumeManager){return new Promise(((resolve,reject)=>{volumeManager.getCurrentProfileVolumeInfo(VolumeManagerCommon$3.VolumeType.DOWNLOADS).fileSystem.root.getDirectory("PvmDefault",{create:false},(dir=>{resolve(dir)}),((...args)=>{reject(new Error(`Error getting PvmDefault dir: ${args}`))}))}))}}FileTasks.INSTALL_LINUX_PACKAGE_TASK_ID=chrome.runtime.id+"|app|install-linux-package";FileTasks.FILES_OPEN_ZIP_TASK_ID=chrome.runtime.id+"|app|open-zip";FileTasks.VIDEO_PLAYER_ID="jcgeabjmjgoblfofpppfkcoakmfobdko";FileTasks.ZIP_UNPACKER_TASK_ID="oedeeodfidgoollimchfdnbmhcpnklnd|app|zip";FileTasks.ZIP_ARCHIVER_UNZIP_TASK_ID="dmboannefpncccogfdikhmhpmdnddgoe|app|open";FileTasks.ZIP_ARCHIVER_ZIP_TASK_ID="dmboannefpncccogfdikhmhpmdnddgoe|app|pack";FileTasks.ZIP_ARCHIVER_ZIP_USING_TMP_TASK_ID="dmboannefpncccogfdikhmhpmdnddgoe|app|pack_using_tmp";FileTasks.TaskMenuButtonItemType={ShowMenu:"ShowMenu",RunTask:"RunTask",ChangeDefaultTask:"ChangeDefaultTask"};FileTasks.TaskPickerType={ChangeDefault:"ChangeDefault",OpenWith:"OpenWith",MoreActions:"MoreActions"};FileTasks.UMA_INDEX_KNOWN_EXTENSIONS=Object.freeze(["other",".3ga",".3gp",".aac",".alac",".asf",".avi",".bmp",".csv",".doc",".docx",".flac",".gif",".jpeg",".jpg",".log",".m3u",".m3u8",".m4a",".m4v",".mid",".mkv",".mov",".mp3",".mp4",".mpg",".odf",".odp",".ods",".odt",".oga",".ogg",".ogv",".pdf",".png",".ppt",".pptx",".ra",".ram",".rar",".rm",".rtf",".wav",".webm",".webp",".wma",".wmv",".xls",".xlsx",".crdownload",".crx",".dmg",".exe",".html",".htm",".jar",".ps",".torrent",".txt",".zip","directory","no extension","unknown extension",".mhtml",".gdoc",".gsheet",".gslides",".arw",".cr2",".dng",".nef",".nrw",".orf",".raf",".rw2",".tini"]);FileTasks.UMA_ZIP_HANDLER_TASK_IDS_=Object.freeze([FileTasks.ZIP_UNPACKER_TASK_ID,FileTasks.ZIP_ARCHIVER_UNZIP_TASK_ID,FileTasks.ZIP_ARCHIVER_ZIP_TASK_ID]);FileTasks.SharingActionSourceForUMA={UNKNOWN:"Unknown",CONTEXT_MENU:"Context Menu",SHARE_BUTTON:"Share Button"};FileTasks.ValidSharingActionSource=Object.freeze([FileTasks.SharingActionSourceForUMA.UNKNOWN,FileTasks.SharingActionSourceForUMA.CONTEXT_MENU,FileTasks.SharingActionSourceForUMA.SHARE_BUTTON]);const NUM_TOP_LEVEL_ENTRIES=6;const MAX_NON_SPLIT_ENTRIES=10;// Copyright 2014 The Chromium Authors. All rights reserved.
class TaskController{constructor(dialogType,volumeManager,ui,metadataModel,directoryModel,selectionHandler,metadataUpdateController,namingController,crostini,progressCenter){this.dialogType_=dialogType;this.volumeManager_=volumeManager;this.ui_=ui;this.fileTransferController_;this.metadataModel_=metadataModel;this.directoryModel_=directoryModel;this.selectionHandler_=selectionHandler;this.metadataUpdateController_=metadataUpdateController;this.namingController_=namingController;this.crostini_=crostini;this.progressCenter_=progressCenter;this.taskHistory_=new TaskHistory;this.canExecuteDefaultTask_=false;this.canExecuteOpenActions_=false;this.canExecuteMoreActions_=false;this.defaultTaskCommand_=assertInstanceof(document.querySelector("#default-task"),Command);this.openWithCommand_=assertInstanceof(document.querySelector("#open-with"),Command);this.moreActionsCommand_=assertInstanceof(document.querySelector("#more-actions"),Command);this.showSubMenuCommand_=assertInstanceof(document.querySelector("#show-submenu"),Command);this.tasks_=null;this.tasksEntries_=[];this.lastSelectedEntries_=[];ui.taskMenuButton.addEventListener("select",this.onTaskItemClicked_.bind(this));ui.shareMenuButton.menu.addEventListener("activate",this.onTaskItemClicked_.bind(this));ui.shareSubMenu.addEventListener("activate",this.onTaskItemClicked_.bind(this));this.selectionHandler_.addEventListener(FileSelectionHandler.EventType.CHANGE,this.onSelectionChanged_.bind(this));this.selectionHandler_.addEventListener(FileSelectionHandler.EventType.CHANGE_THROTTLED,this.updateTasks_.bind(this));this.taskHistory_.addEventListener(TaskHistory.EventType.UPDATE,this.updateTasks_.bind(this));chrome.fileManagerPrivate.onAppsUpdated.addListener(this.updateTasks_.bind(this))}setFileTransferController(fileTransferController){this.fileTransferController_=fileTransferController}onTaskItemClicked_(event){if(event.target&&event.target.command){return}const item=event.item||event.target.data;this.getFileTasks().then((tasks=>{switch(item.type){case FileTasks.TaskMenuButtonItemType.ShowMenu:this.ui_.taskMenuButton.showMenu(false);break;case FileTasks.TaskMenuButtonItemType.RunTask:tasks.execute(item.task);break;case FileTasks.TaskMenuButtonItemType.ChangeDefaultTask:const selection=this.selectionHandler_.selection;const extensions=[];for(let i=0;i<selection.entries.length;i++){const match=/\.(\w+)$/g.exec(selection.entries[i].toURL());if(match){const ext=match[1].toUpperCase();if(extensions.indexOf(ext)==-1){extensions.push(ext)}}}let format="";if(extensions.length==1){format=extensions[0]}tasks.showTaskPicker(this.ui_.defaultTaskPicker,loadTimeData.getString("CHANGE_DEFAULT_MENU_ITEM"),strf("CHANGE_DEFAULT_CAPTION",format),this.changeDefaultTask_.bind(this,selection),FileTasks.TaskPickerType.ChangeDefault);break;default:assertNotReached("Unknown task.")}})).catch((error=>{if(error){console.error(error.stack||error)}}))}changeDefaultTask_(selection,task){const entries=selection.entries;Promise.all(entries.map((entry=>this.getMimeType_(entry)))).then((mimeTypes=>{chrome.fileManagerPrivate.setDefaultTask(task.taskId,entries,mimeTypes,util$3.checkAPIError);this.metadataUpdateController_.refreshCurrentDirectoryMetadata();if(this.selectionHandler_.selection===selection){this.tasks_=null;this.getFileTasks().then((tasks=>{tasks.display(this.ui_.taskMenuButton,this.ui_.shareMenuButton)})).catch((error=>{if(error){console.error(error.stack||error)}}))}this.selectionHandler_.onFileSelectionChanged()}))}executeDefaultTask(){this.getFileTasks().then((tasks=>{const task={taskId:this.ui_.defaultTaskMenuItem.taskId,title:this.ui_.defaultTaskMenuItem.label,get iconUrl(){assert(false);return""},get isDefault(){assert(false);return false},get isGenericFileHandler(){assert(false);return false}};tasks.execute(task)})).catch((error=>{if(error){console.error(error.stack||error)}}))}getMimeType_(entry){return this.metadataModel_.get([entry],["contentMimeType"]).then((properties=>{if(properties[0].contentMimeType){return properties[0].contentMimeType}return new Promise(((fulfill,reject)=>{chrome.fileManagerPrivate.getMimeType(entry,(mimeType=>{if(!chrome.runtime.lastError){fulfill(mimeType)}else{reject(chrome.runtime.lastError)}}))}))}))}onSelectionChanged_(){const selection=this.selectionHandler_.selection;if(this.dialogType_===DialogType.FULL_PAGE&&(selection.directoryCount>0||selection.fileCount>0)){if(!util$3.isSameEntries(this.lastSelectedEntries_,selection.entries)){this.updateContextMenuTaskItems_([],[])}}else{this.updateContextMenuTaskItems_([],[])}this.lastSelectedEntries_=selection.entries}updateTasks_(){const selection=this.selectionHandler_.selection;if(this.dialogType_===DialogType.FULL_PAGE&&(selection.directoryCount>0||selection.fileCount>0)){this.getFileTasks().then((tasks=>{tasks.display(this.ui_.taskMenuButton,this.ui_.shareMenuButton);this.updateContextMenuTaskItems_(tasks.getOpenTaskItems(),tasks.getNonOpenTaskItems())})).catch((error=>{if(error){console.error(error.stack||error)}}))}else{this.ui_.taskMenuButton.hidden=true;this.ui_.shareMenuButton.hidden=true}}getFileTasks(){const selection=this.selectionHandler_.selection;if(this.tasks_&&util$3.isSameEntries(this.tasksEntries_,selection.entries)){return this.tasks_}this.tasksEntries_=selection.entries;this.tasks_=selection.computeAdditional(this.metadataModel_).then((()=>{if(this.selectionHandler_.selection!==selection){if(util$3.isSameEntries(this.tasksEntries_,selection.entries)){this.tasks_=null}return Promise.reject()}return FileTasks.create(this.volumeManager_,this.metadataModel_,this.directoryModel_,this.ui_,this.fileTransferController_,selection.entries,assert(selection.mimeTypes),this.taskHistory_,this.namingController_,this.crostini_,this.progressCenter_).then((tasks=>{if(this.selectionHandler_.selection!==selection){if(util$3.isSameEntries(this.tasksEntries_,selection.entries)){this.tasks_=null}return Promise.reject()}return tasks}))}));return this.tasks_}canExecuteDefaultTask(){return this.canExecuteDefaultTask_}canExecuteOpenActions(){return this.canExecuteOpenActions_}canExecuteMoreActions(){return this.canExecuteMoreActions_}canExecuteShowOverflow(){return this.ui_.shareMenuButton.overflow.firstChild!==null}updateContextMenuTaskItems_(openTasks,nonOpenTasks){const defaultTask=FileTasks.getDefaultTask(openTasks,this.taskHistory_);if(defaultTask){this.ui_.defaultTaskMenuItem.removeAttribute("file-type-icon");if(defaultTask.iconType){this.ui_.defaultTaskMenuItem.style.backgroundImage="";this.ui_.defaultTaskMenuItem.setAttribute("file-type-icon",defaultTask.iconType);this.ui_.defaultTaskMenuItem.style.marginInlineEnd="28px"}else if(defaultTask.iconUrl){this.ui_.defaultTaskMenuItem.style.backgroundImage="url("+defaultTask.iconUrl+")";this.ui_.defaultTaskMenuItem.style.marginInlineEnd="28px"}else{this.ui_.defaultTaskMenuItem.style.backgroundImage="";this.ui_.defaultTaskMenuItem.style.marginInlineEnd=""}if(defaultTask.taskId===FileTasks.ZIP_ARCHIVER_UNZIP_TASK_ID){this.ui_.defaultTaskMenuItem.label=str("TASK_OPEN")}else{this.ui_.defaultTaskMenuItem.label=defaultTask.label||defaultTask.title}this.ui_.defaultTaskMenuItem.disabled=!!defaultTask.disabled;this.ui_.defaultTaskMenuItem.taskId=defaultTask.taskId}this.canExecuteDefaultTask_=defaultTask!=null;this.defaultTaskCommand_.canExecuteChange(this.ui_.listContainer.element);this.canExecuteOpenActions_=openTasks.length>1;this.openWithCommand_.canExecuteChange(this.ui_.listContainer.element);this.canExecuteMoreActions_=nonOpenTasks.length>=1;this.moreActionsCommand_.canExecuteChange(this.ui_.listContainer.element);this.ui_.tasksSeparator.hidden=openTasks.length===0&&nonOpenTasks.length==0}getEntryFileTasks(entry){return this.metadataModel_.get([entry],["contentMimeType"]).then((props=>FileTasks.create(this.volumeManager_,this.metadataModel_,this.directoryModel_,this.ui_,this.fileTransferController_,[entry],[props[0].contentMimeType||null],this.taskHistory_,this.namingController_,this.crostini_,this.progressCenter_)))}executeEntryTask(entry){this.getEntryFileTasks(entry).then((tasks=>{tasks.executeDefault()}))}}// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
class SpinnerController{constructor(element){this.element_=element;this.activeSpinners_=0;this.pendingSpinnerTimerIds_={};this.blinkDuration_=1e3}blink(){const hideCallback=this.show();setTimeout(hideCallback,this.blinkDuration_)}show(){return this.showWithDelay(0,(()=>{}))}showWithDelay(delay,callback){const timerId=setTimeout((()=>{this.activeSpinners_++;if(this.activeSpinners_===1){this.element_.hidden=false}delete this.pendingSpinnerTimerIds_[timerId];callback()}),delay);this.pendingSpinnerTimerIds_[timerId]=true;return this.maybeHide_.bind(this,timerId)}setBlinkDurationForTesting(duration){this.blinkDuration_=duration}maybeHide_(timerId){if(timerId in this.pendingSpinnerTimerIds_){clearTimeout(timerId);delete this.pendingSpinnerTimerIds_[timerId];return}this.activeSpinners_--;if(this.activeSpinners_===0){this.element_.hidden=true}}}// Copyright 2015 The Chromium Authors. All rights reserved.
class DirectoryTreeNamingController{constructor(directoryModel,directoryTree,alertDialog){this.directoryModel_=directoryModel;this.directoryTree_=directoryTree;this.alertDialog_=alertDialog;this.currentDirectoryItem_=null;this.editing_=false;this.isRemovableRoot_=false;this.volumeInfo_=null;this.showingContextMenu_=false;this.inputElement_=document.createElement("input");this.inputElement_.type="text";this.inputElement_.spellcheck=false;this.inputElement_.addEventListener("keydown",this.onKeyDown_.bind(this));this.inputElement_.addEventListener("blur",this.commitRename_.bind(this));this.inputElement_.addEventListener("click",(event=>{event.stopPropagation()}));this.inputElement_.addEventListener("contextmenu",this.onContextMenu_.bind(this));this.inputElement_.addEventListener("focus",this.onFocus_.bind(this))}getInputElement(){return this.inputElement_}getLabelElement_(){const element=this.currentDirectoryItem_.firstElementChild;const label=element.querySelector(".label");return assert(label)}attachAndStart(directoryItem,isRemovableRoot,volumeInfo){this.isRemovableRoot_=isRemovableRoot;this.volumeInfo_=this.isRemovableRoot_?assert(volumeInfo):null;if(this.currentDirectoryItem_){return}this.currentDirectoryItem_=directoryItem;this.currentDirectoryItem_.setAttribute("renaming",true);const renameInputElementPlaceholder=this.currentDirectoryItem_.firstElementChild.getElementsByClassName("rename-placeholder");if(this.isRemovableRoot_&&renameInputElementPlaceholder.length===1){renameInputElementPlaceholder[0].appendChild(this.inputElement_)}else{const label=this.getLabelElement_();label.insertAdjacentElement("afterend",this.inputElement_)}this.inputElement_.value=this.currentDirectoryItem_.label;this.inputElement_.select();this.inputElement_.focus();this.editing_=true}onContextMenu_(){this.showingContextMenu_=true}onFocus_(){this.showingContextMenu_=false}commitRename_(){if(!this.editing_||this.showingContextMenu_){return}this.editing_=false;const entry=this.currentDirectoryItem_.entry;const newName=this.inputElement_.value;if(newName===this.currentDirectoryItem_.label||newName.length==0){this.detach_();return}if(this.isRemovableRoot_){util$3.validateExternalDriveName(newName,assert(this.volumeInfo_&&this.volumeInfo_.diskFileSystemType)).then(this.performExternalDriveRename_.bind(this,entry,newName),(errorMessage=>{this.alertDialog_.show(errorMessage,this.detach_.bind(this))}))}else{new Promise(entry.getParent.bind(entry)).then((parentEntry=>util$3.validateFileName(parentEntry,newName,!this.directoryModel_.getFileFilter().isHiddenFilesVisible()))).then(this.performRename_.bind(this,entry,newName),(errorMessage=>{this.alertDialog_.show(errorMessage,this.detach_.bind(this))}))}}performRename_(entry,newName){const renamingCurrentDirectory=util$3.isSameEntry(entry,this.directoryModel_.getCurrentDirEntry());if(renamingCurrentDirectory){this.directoryModel_.setIgnoringCurrentDirectoryDeletion(true)}new Promise(util$3.rename.bind(null,entry,newName)).then((newEntry=>{this.getLabelElement_().textContent=newName;this.currentDirectoryItem_.entry=newEntry;this.currentDirectoryItem_.updateSubDirectories(true);this.detach_();if(renamingCurrentDirectory){this.directoryModel_.changeDirectoryEntry(newEntry,this.directoryModel_.setIgnoringCurrentDirectoryDeletion.bind(this.directoryModel_,false))}}),(error=>{this.directoryModel_.setIgnoringCurrentDirectoryDeletion(false);this.detach_();this.alertDialog_.show(util$3.getRenameErrorMessage(error,entry,newName))}))}performExternalDriveRename_(entry,newName){chrome.fileManagerPrivate.renameVolume(this.volumeInfo_.volumeId,newName);this.getLabelElement_().textContent=newName;this.detach_()}cancelRename_(){if(!this.editing_){return}this.editing_=false;this.detach_()}detach_(){assert(!!this.currentDirectoryItem_);this.inputElement_.remove();this.currentDirectoryItem_.removeAttribute("renaming");this.currentDirectoryItem_=null;this.directoryTree_.focus()}onKeyDown_(event){event.stopPropagation();switch(util$3.getKeyModifiers(event)+event.key){case"Escape":this.cancelRename_();event.preventDefault();break;case"Enter":this.commitRename_();event.preventDefault();break}}}// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
class StorageAdapter{constructor(){this.storageHasBeenLoaded_=false;this.onChanged={addListener(){}};this.sync={store_:{},get(keys,callback){const inKeys=Array.isArray(keys)?keys:[keys];const result={};chrome.storage.loadStorageIfNeeded_();inKeys.forEach((key=>{if(key in chrome.storage.sync.store_){result[key]=chrome.storage.sync.store_[key]}}));setTimeout(callback,0,result)},set(items,opt_callback){for(const key in items){chrome.storage.sync.store_[key]=items[key]}chrome.storage.flushIntoLocalStorage_("sync");if(opt_callback){setTimeout(opt_callback)}}};this.local={store_:{},get(keys,callback){const inKeys=Array.isArray(keys)?keys:[keys];const result={};chrome.storage.loadStorageIfNeeded_();inKeys.forEach((key=>{if(key in chrome.storage.local.store_){result[key]=chrome.storage.local.store_[key]}}));setTimeout(callback,0,result)},set(items,opt_callback){for(const key in items){chrome.storage.local.store_[key]=items[key]}chrome.storage.flushIntoLocalStorage_("local");if(opt_callback){setTimeout(opt_callback)}}}}loadStorageIfNeeded_(){if(this.storageHasBeenLoaded_===false){const localData=window.localStorage.getItem("local");if(localData){this.local.store_=JSON.parse(localData)}const syncData=window.localStorage.getItem("sync");if(syncData){this.sync.store_=JSON.parse(syncData)}this.storageHasBeenLoaded_=true}}flushIntoLocalStorage_(which){let storeObjectString=null;if(which==="local"){storeObjectString=JSON.stringify(this.local.store_)}else{storeObjectString=JSON.stringify(this.sync.store_)}window.localStorage.setItem(which,storeObjectString)}}// Copyright 2020 The Chromium Authors. All rights reserved.
const crossoverSearchUtils={};crossoverSearchUtils.findQueryMatchedDirectoryEntry=async(navListModel,dirModel,searchQuery)=>{for(let i=0;i<navListModel.length;i++){const item=navListModel.item(i);let dirEntry;switch(item.type){case NavigationModelItemType.ENTRY_LIST:dirEntry=item.entry.getNativeEntry();break;case NavigationModelItemType.VOLUME:dirEntry=item.volumeInfo.displayRoot;break;default:continue}if(!dirEntry){continue}let isMatchedEntryFound;function entriesCallback(entries){isMatchedEntryFound=true}function errorCallback(error){console.warn(error.stack||error)}const scanner=dirModel.createScannerFactory(dirEntry,searchQuery)();await new Promise((resolve=>scanner.scan(entriesCallback,resolve,errorCallback)));if(isMatchedEntryFound){return dirEntry}}return null};// Copyright 2017 The Chromium Authors. All rights reserved.
Command.prototype.setHidden=function(value){if(value===this.hidden){return}const oldValue=this.hidden;this.hidden=value;dispatchPropertyChange(this,"hidden",value,oldValue)};// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class FilesCommand{execute(event,fileManager){}canExecute(event,fileManager){event.canExecute=true}}const CommandUtil={};CommandUtil.SharingActionElementId={CONTEXT_MENU:"file-list",SHARE_BUTTON:"share-menu-button",SHARE_SHEET:"sharesheet-button"};CommandUtil.getSharingActionSource=event=>{const id=event.target.id;switch(id){case CommandUtil.SharingActionElementId.CONTEXT_MENU:return FileTasks.SharingActionSourceForUMA.CONTEXT_MENU;case CommandUtil.SharingActionElementId.SHARE_BUTTON:return FileTasks.SharingActionSourceForUMA.SHARE_BUTTON;default:{console.error('Unrecognized event.target.id for sharing action "%s"',id);return FileTasks.SharingActionSourceForUMA.UNKNOWN}}};CommandUtil.getSharesheetLaunchSource=event=>{const id=event.target.id;switch(id){case CommandUtil.SharingActionElementId.CONTEXT_MENU:return chrome.fileManagerPrivate.SharesheetLaunchSource.CONTEXT_MENU;case CommandUtil.SharingActionElementId.SHARE_SHEET:return chrome.fileManagerPrivate.SharesheetLaunchSource.SHARESHEET_BUTTON;default:{console.error('Unrecognized event.target.id for sharesheet launch"%s"',id);return chrome.fileManagerPrivate.SharesheetLaunchSource.UNKNOWN}}};CommandUtil.getCommandEntry=(fileManager,element)=>{const entries=CommandUtil.getCommandEntries(fileManager,element);return entries.length===0?null:entries[0]};CommandUtil.getCommandEntries=(fileManager,element)=>{if(element&&element.entry){return[element.entry]}if(element.selectedItem&&element.selectedItem.entry){return[element.selectedItem.entry]}if(fileManager.ui.directoryTree.contains(element)){const treeItem=element.closest(".tree-item");if(treeItem&&treeItem.entry){return[treeItem.entry]}}if(element.selectedItems&&element.selectedItems.length){const entries=element.selectedItems;return entries.filter((entry=>"toURL"in entry))}if(fileManager.ui.actionbar.contains(element)){return fileManager.getSelection().entries}if(element.contextElement){return CommandUtil.getCommandEntries(fileManager,element.contextElement)}if(element.parentElement.contextElement){return CommandUtil.getCommandEntries(fileManager,element.parentElement.contextElement)}return[]};CommandUtil.getParentEntry=(element,directoryModel)=>{if(element&&element.selectedItem&&element.selectedItem.parentItem&&element.selectedItem.parentItem.entry){return element.selectedItem.parentItem.entry}else if(element.parentItem&&element.parentItem.entry){return element.parentItem.entry}else if(element instanceof List){return directoryModel?directoryModel.getCurrentDirEntry():null}else{return null}};CommandUtil.getElementVolumeInfo=(element,fileManager)=>{if(element.volumeInfo){return element.volumeInfo}const entry=CommandUtil.getCommandEntry(fileManager,element);return entry&&fileManager.volumeManager.getVolumeInfo(entry)};CommandUtil.canExecuteVisibleOnDriveInNormalAppModeOnly=(event,fileManager)=>{const enabled=fileManager.directoryModel.isOnDrive()&&!DialogType.isModal(fileManager.dialogType);event.canExecute=enabled;event.command.setHidden(!enabled)};CommandUtil.forceDefaultHandler=(node,commandId)=>{const doc=node.ownerDocument;const command=doc.body.querySelector('command[id="'+commandId+'"]');node.addEventListener("keydown",(e=>{if(command.matchesEvent(e)){e.stopPropagation()}}));node.addEventListener("command",(event=>{if(event.command.id!==commandId){return}document.execCommand(event.command.id);event.cancelBubble=true}));node.addEventListener("canExecute",(event=>{if(event.command.id!==commandId||event.target!==node){return}event.canExecute=document.queryCommandEnabled(event.command.id);event.command.setHidden(false)}))};CommandUtil.createVolumeSwitchCommand=index=>new class extends FilesCommand{execute(event,fileManager){fileManager.directoryTree.activateByIndex(index-1)}canExecute(event,fileManager){event.canExecute=index>0&&index<=fileManager.directoryTree.items.length}};CommandUtil.getOnlyOneSelectedDirectory=selection=>{if(!selection){return null}if(selection.totalCount!==1){return null}if(!selection.entries[0].isDirectory){return null}return selection.entries[0]};CommandUtil.isRootEntry=(volumeManager,entry)=>{if(!volumeManager||!entry){return false}const volumeInfo=volumeManager.getVolumeInfo(entry);return!!volumeInfo&&util$3.isSameEntry(volumeInfo.displayRoot,entry)};CommandUtil.isFromSelectionMenu=event=>event.target.id=="selection-menu-button";CommandUtil.shouldShowMenuItemsForEntry=(volumeManager,entry)=>{if(util$3.isFakeEntry(entry)){return false}if(!volumeManager){return false}const volumeInfo=volumeManager.getVolumeInfo(entry);if(!volumeInfo){return false}if(CommandUtil.isRootEntry(volumeManager,entry)&&!util$3.isTeamDriveRoot(entry)){return false}if(util$3.isTeamDrivesGrandRoot(entry)){return false}return true};CommandUtil.hasCapability=(fileManager,entries,capability)=>{if(entries.length==0){return false}const metadata=fileManager.metadataModel.getCache(entries,[capability]);return metadata.length===entries.length&&metadata.every((item=>item[capability]!==false))};CommandUtil.shouldIgnoreEvents=function(doc){const dialogs=doc.getElementsByClassName("cr-dialog-container");if(dialogs.length!==0&&dialogs[0].classList.contains("shown")){return true}return false};CommandUtil.isDriveEntries=(entries,volumeManager)=>{if(!entries.length){return false}const volumeInfo=volumeManager.getVolumeInfo(entries[0]);if(!volumeInfo){return false}if(volumeInfo.volumeType===VolumeManagerCommon$3.VolumeType.DRIVE&&util$3.isSameVolume(entries,volumeManager)){return true}return false};CommandUtil.getEventEntry=(event,fileManager)=>{let entry;if(fileManager.ui.directoryTree.contains(event.target)){entry=CommandUtil.getCommandEntry(fileManager,event.target)}else{entry=fileManager.directoryModel.getCurrentDirEntry()}return entry};class CommandHandler{constructor(fileManager,selectionHandler){this.fileManager_=fileManager;this.commands_={};this.lastFocusedElement_=null;const commands=fileManager.document.querySelectorAll("command");for(let i=0;i<commands.length;i++){if(Command.decorate){Command.decorate(commands[i])}this.commands_[commands[i].id]=commands[i]}fileManager.document.addEventListener("command",this.onCommand_.bind(this));fileManager.document.addEventListener("canExecute",this.onCanExecute_.bind(this));contextMenuHandler.addEventListener("show",this.onContextMenuShow_.bind(this));contextMenuHandler.addEventListener("hide",this.onContextMenuHide_.bind(this))}onContextMenuShow_(event){this.lastFocusedElement_=document.activeElement;const menu=event.menu;setTimeout((()=>{if(!menu.hidden){menu.focusSelectedItem()}}),0)}onContextMenuHide_(event){if(this.lastFocusedElement_){const activeElement=document.activeElement;if(activeElement&&activeElement.tagName==="BODY"){this.lastFocusedElement_.focus()}this.lastFocusedElement_=null}}onCommand_(event){if(CommandUtil.shouldIgnoreEvents(assert(this.fileManager_.document))){return}const handler=CommandHandler.COMMANDS_[event.command.id];handler.execute.call(handler,event,this.fileManager_)}onCanExecute_(event){if(CommandUtil.shouldIgnoreEvents(assert(this.fileManager_.document))){return}const handler=CommandHandler.COMMANDS_[event.command.id];handler.canExecute.call(handler,event,this.fileManager_)}static getCommand(name){return CommandHandler.COMMANDS_[name]}}CommandHandler.RENAME_DISK_FILE_SYSTEM_SUPPORT_=[VolumeManagerCommon$3.FileSystemType.EXFAT,VolumeManagerCommon$3.FileSystemType.VFAT,VolumeManagerCommon$3.FileSystemType.NTFS];CommandHandler.MenuCommandsForUMA={HELP:"volume-help",DRIVE_HELP:"volume-help-drive",DRIVE_BUY_MORE_SPACE:"drive-buy-more-space",DRIVE_GO_TO_DRIVE:"drive-go-to-drive",HIDDEN_FILES_SHOW:"toggle-hidden-files-on",HIDDEN_FILES_HIDE:"toggle-hidden-files-off",MOBILE_DATA_ON:"drive-sync-settings-enabled",MOBILE_DATA_OFF:"drive-sync-settings-disabled",DEPRECATED_SHOW_GOOGLE_DOCS_FILES_OFF:"drive-hosted-settings-disabled",DEPRECATED_SHOW_GOOGLE_DOCS_FILES_ON:"drive-hosted-settings-enabled",HIDDEN_ANDROID_FOLDERS_SHOW:"toggle-hidden-android-folders-on",HIDDEN_ANDROID_FOLDERS_HIDE:"toggle-hidden-android-folders-off",SHARE_WITH_LINUX:"share-with-linux",MANAGE_LINUX_SHARING:"manage-linux-sharing",MANAGE_LINUX_SHARING_TOAST:"manage-linux-sharing-toast",MANAGE_LINUX_SHARING_TOAST_STARTUP:"manage-linux-sharing-toast-startup",SHARE_WITH_PLUGIN_VM:"share-with-plugin-vm",MANAGE_PLUGIN_VM_SHARING:"manage-plugin-vm-sharing",MANAGE_PLUGIN_VM_SHARING_TOAST:"manage-plugin-vm-sharing-toast",MANAGE_PLUGIN_VM_SHARING_TOAST_STARTUP:"manage-plugin-vm-sharing-toast-startup"};CommandHandler.ValidMenuCommandsForUMA=[CommandHandler.MenuCommandsForUMA.HELP,CommandHandler.MenuCommandsForUMA.DRIVE_HELP,CommandHandler.MenuCommandsForUMA.DRIVE_BUY_MORE_SPACE,CommandHandler.MenuCommandsForUMA.DRIVE_GO_TO_DRIVE,CommandHandler.MenuCommandsForUMA.HIDDEN_FILES_SHOW,CommandHandler.MenuCommandsForUMA.HIDDEN_FILES_HIDE,CommandHandler.MenuCommandsForUMA.MOBILE_DATA_ON,CommandHandler.MenuCommandsForUMA.MOBILE_DATA_OFF,CommandHandler.MenuCommandsForUMA.DEPRECATED_SHOW_GOOGLE_DOCS_FILES_OFF,CommandHandler.MenuCommandsForUMA.DEPRECATED_SHOW_GOOGLE_DOCS_FILES_ON,CommandHandler.MenuCommandsForUMA.HIDDEN_ANDROID_FOLDERS_SHOW,CommandHandler.MenuCommandsForUMA.HIDDEN_ANDROID_FOLDERS_HIDE,CommandHandler.MenuCommandsForUMA.SHARE_WITH_LINUX,CommandHandler.MenuCommandsForUMA.MANAGE_LINUX_SHARING,CommandHandler.MenuCommandsForUMA.MANAGE_LINUX_SHARING_TOAST,CommandHandler.MenuCommandsForUMA.MANAGE_LINUX_SHARING_TOAST_STARTUP,CommandHandler.MenuCommandsForUMA.SHARE_WITH_PLUGIN_VM,CommandHandler.MenuCommandsForUMA.MANAGE_PLUGIN_VM_SHARING,CommandHandler.MenuCommandsForUMA.MANAGE_PLUGIN_VM_SHARING_TOAST,CommandHandler.MenuCommandsForUMA.MANAGE_PLUGIN_VM_SHARING_TOAST_STARTUP];console.assert(Object.keys(CommandHandler.MenuCommandsForUMA).length===CommandHandler.ValidMenuCommandsForUMA.length,"Members in ValidMenuCommandsForUMA do not match those in "+"MenuCommandsForUMA.");CommandHandler.recordMenuItemSelected=menuItem=>{metrics.recordEnum("MenuItemSelected",menuItem,CommandHandler.ValidMenuCommandsForUMA)};CommandHandler.COMMANDS_={};CommandHandler.COMMANDS_["unmount"]=new class extends FilesCommand{async executeImpl_(event,fileManager){const errorCallback=opt_volumeType=>{if(opt_volumeType===VolumeManagerCommon$3.VolumeType.REMOVABLE){fileManager.ui.alertDialog.showHtml("",str("UNMOUNT_FAILED"),null,null,null)}else{fileManager.ui.alertDialog.showHtml("",str("UNMOUNT_PROVIDED_FAILED"),null,null,null)}};let volumes=[];let label="";const entry=CommandUtil.getCommandEntry(fileManager,event.target);if(entry instanceof EntryList){if(!entry){errorCallback();return}volumes=entry.getUIChildren().map((child=>child.volumeInfo));label=entry.label||""}else{const volumeInfo=CommandUtil.getElementVolumeInfo(event.target,fileManager);if(!volumeInfo){errorCallback();return}volumes.push(volumeInfo);label=volumeInfo.label||""}const promises=volumes.map((async volume=>{try{await fileManager.volumeManager.unmount(volume)}catch(error){console.error(`Cannot unmount '${volume.volumeId}': ${error.stack||error}`);errorCallback(volume.volumeType)}}));await Promise.all(promises);fileManager.ui.speakA11yMessage(strf("A11Y_VOLUME_EJECT",label))}execute(event,fileManager){this.executeImpl_(event,fileManager)}canExecute(event,fileManager){const volumeInfo=CommandUtil.getElementVolumeInfo(event.target,fileManager);const entry=CommandUtil.getCommandEntry(fileManager,event.target);let volumeType;if(entry&&entry instanceof EntryList){volumeType=entry.rootType}else if(volumeInfo){volumeType=volumeInfo.volumeType}else{event.canExecute=false;event.command.setHidden(true);return}event.canExecute=volumeType===VolumeManagerCommon$3.VolumeType.ARCHIVE||volumeType===VolumeManagerCommon$3.VolumeType.REMOVABLE||volumeType===VolumeManagerCommon$3.VolumeType.PROVIDED||volumeType===VolumeManagerCommon$3.VolumeType.SMB;event.command.setHidden(!event.canExecute);switch(volumeType){case VolumeManagerCommon$3.VolumeType.ARCHIVE:case VolumeManagerCommon$3.VolumeType.PROVIDED:case VolumeManagerCommon$3.VolumeType.SMB:event.command.label=str("CLOSE_VOLUME_BUTTON_LABEL");break;case VolumeManagerCommon$3.VolumeType.REMOVABLE:event.command.label=str("UNMOUNT_DEVICE_BUTTON_LABEL");break}}};CommandHandler.COMMANDS_["format"]=new class extends FilesCommand{execute(event,fileManager){const directoryModel=fileManager.directoryModel;let root;if(fileManager.ui.directoryTree.contains(event.target)){root=CommandUtil.getCommandEntry(fileManager,event.target)}else{root=directoryModel.getCurrentDirEntry()}if(!root){root=directoryModel.getCurrentDirEntry()}const volumeInfo=fileManager.volumeManager.getVolumeInfo(assert(root));if(volumeInfo){fileManager.ui.formatDialog.showModal(volumeInfo)}}canExecute(event,fileManager){const directoryModel=fileManager.directoryModel;let root;if(fileManager.ui.directoryTree.contains(event.target)){root=CommandUtil.getCommandEntry(fileManager,event.target)}else{root=directoryModel.getCurrentDirEntry()}const isUnrecognizedVolume=root==null;if(!root){root=directoryModel.getCurrentDirEntry()}const location=root&&fileManager.volumeManager.getLocationInfo(root);const writable=location&&!location.isReadOnly;const isRoot=location&&location.isRootEntry;const removableRoot=location&&isRoot&&location.rootType===VolumeManagerCommon$3.RootType.REMOVABLE;event.canExecute=removableRoot&&(isUnrecognizedVolume||writable);if(util$3.isSinglePartitionFormatEnabled()){let isDevice=false;if(root&&root instanceof EntryList){isDevice=!!removableRoot&&root.getUIChildren().length>0}event.command.setHidden(!removableRoot||isDevice)}else{event.command.setHidden(!removableRoot)}}};CommandHandler.COMMANDS_["erase-device"]=new class extends FilesCommand{execute(event,fileManager){const root=CommandUtil.getEventEntry(event,fileManager);if(root&&root instanceof EntryList){fileManager.ui.formatDialog.showEraseModal(root)}}canExecute(event,fileManager){if(!util$3.isSinglePartitionFormatEnabled()){event.canExecute=false;event.command.setHidden(true);return}const root=CommandUtil.getEventEntry(event,fileManager);const location=root&&fileManager.volumeManager.getLocationInfo(root);const writable=location&&!location.isReadOnly;const isRoot=location&&location.isRootEntry;const removableRoot=location&&isRoot&&location.rootType===VolumeManagerCommon$3.RootType.REMOVABLE;let isDevice=false;if(root&&root instanceof EntryList){isDevice=!!removableRoot&&root.getUIChildren().length>0}event.canExecute=removableRoot&&!writable;event.command.setHidden(!removableRoot||!isDevice)}};CommandHandler.COMMANDS_["new-folder"]=new class extends FilesCommand{constructor(){super();this.busy_=false}execute(event,fileManager){let targetDirectory;let executedFromDirectoryTree;if(event.target instanceof DirectoryTree){targetDirectory=event.target.selectedItem.entry;executedFromDirectoryTree=true}else if(event.target instanceof DirectoryItem){targetDirectory=event.target.entry;executedFromDirectoryTree=true}else{targetDirectory=fileManager.directoryModel.getCurrentDirEntry();executedFromDirectoryTree=false}const directoryModel=fileManager.directoryModel;const directoryTree=fileManager.ui.directoryTree;const listContainer=fileManager.ui.listContainer;this.busy_=true;this.generateNewDirectoryName_(targetDirectory).then((newName=>{if(!executedFromDirectoryTree){listContainer.startBatchUpdates()}return new Promise(targetDirectory.getDirectory.bind(targetDirectory,newName,{create:true,exclusive:true})).then((newDirectory=>{metrics.recordUserAction("CreateNewFolder");if(executedFromDirectoryTree){directoryTree.updateAndSelectNewDirectory(targetDirectory,newDirectory);fileManager.directoryTreeNamingController.attachAndStart(assert(fileManager.ui.directoryTree.selectedItem),false,null);this.busy_=false}else{directoryModel.updateAndSelectNewDirectory(newDirectory).then((()=>{listContainer.endBatchUpdates();fileManager.namingController.initiateRename();this.busy_=false})).catch((error=>{listContainer.endBatchUpdates();this.busy_=false;console.error(error)}))}}),(error=>{if(!executedFromDirectoryTree){listContainer.endBatchUpdates()}this.busy_=false;fileManager.ui.alertDialog.show(strf("ERROR_CREATING_FOLDER",newName,util$3.getFileErrorString(error.name)),null,null)}))}))}generateNewDirectoryName_(parentDirectory,opt_index){const index=opt_index||0;const defaultName=str("DEFAULT_NEW_FOLDER_NAME");const newName=index===0?defaultName:defaultName+" ("+index+")";return new Promise(parentDirectory.getDirectory.bind(parentDirectory,newName,{create:false})).then((newEntry=>this.generateNewDirectoryName_(parentDirectory,index+1))).catch((()=>newName))}canExecute(event,fileManager){if(event.target instanceof DirectoryItem||event.target instanceof DirectoryTree){const entry=CommandUtil.getCommandEntry(fileManager,event.target);if(!entry||util$3.isFakeEntry(entry)||util$3.isTeamDrivesGrandRoot(entry)){event.canExecute=false;event.command.setHidden(true);return}const locationInfo=fileManager.volumeManager.getLocationInfo(entry);event.canExecute=locationInfo&&!locationInfo.isReadOnly&&CommandUtil.hasCapability(fileManager,[entry],"canAddChildren");event.command.setHidden(false)}else{const directoryModel=fileManager.directoryModel;const directoryEntry=fileManager.getCurrentDirectoryEntry();event.canExecute=!fileManager.directoryModel.isReadOnly()&&!fileManager.namingController.isRenamingInProgress()&&!directoryModel.isSearching()&&CommandUtil.hasCapability(fileManager,[directoryEntry],"canAddChildren");event.command.setHidden(false)}if(this.busy_){event.canExecute=false}}};CommandHandler.COMMANDS_["new-window"]=new class extends FilesCommand{execute(event,fileManager){fileManager.launchFileManager({currentDirectoryURL:fileManager.getCurrentDirectoryEntry()&&fileManager.getCurrentDirectoryEntry().toURL()})}canExecute(event,fileManager){event.canExecute=fileManager.getCurrentDirectoryEntry()&&fileManager.dialogType===DialogType.FULL_PAGE}};CommandHandler.COMMANDS_["select-all"]=new class extends FilesCommand{execute(event,fileManager){fileManager.directoryModel.getFileListSelection().setCheckSelectMode(true);fileManager.directoryModel.getFileListSelection().selectAll()}canExecute(event,fileManager){const multipleSelect=fileManager.directoryModel.getFileListSelection().multiple;const inputElementActive=document.activeElement instanceof HTMLInputElement||document.activeElement instanceof HTMLTextAreaElement||document.activeElement.tagName.toLowerCase()==="cr-input";event.canExecute=multipleSelect&&!inputElementActive&&fileManager.directoryModel.getFileList().length>0}};CommandHandler.COMMANDS_["toggle-hidden-files"]=new class extends FilesCommand{execute(event,fileManager){const visible=!fileManager.fileFilter.isHiddenFilesVisible();fileManager.fileFilter.setHiddenFilesVisible(visible);event.command.checked=visible;CommandHandler.recordMenuItemSelected(visible?CommandHandler.MenuCommandsForUMA.HIDDEN_FILES_SHOW:CommandHandler.MenuCommandsForUMA.HIDDEN_FILES_HIDE)}};CommandHandler.COMMANDS_["toggle-hidden-android-folders"]=new class extends FilesCommand{execute(event,fileManager){const visible=!fileManager.fileFilter.isAllAndroidFoldersVisible();fileManager.fileFilter.setAllAndroidFoldersVisible(visible);event.command.checked=visible;CommandHandler.recordMenuItemSelected(visible?CommandHandler.MenuCommandsForUMA.HIDDEN_ANDROID_FOLDERS_SHOW:CommandHandler.MenuCommandsForUMA.HIDDEN_ANDROID_FOLDERS_HIDE)}canExecute(event,fileManager){const hasAndroidFilesVolumeInfo=!!fileManager.volumeManager.getCurrentProfileVolumeInfo(VolumeManagerCommon$3.VolumeType.ANDROID_FILES);const currentRootType=fileManager.directoryModel.getCurrentRootType();const isInMyFiles=currentRootType==VolumeManagerCommon$3.RootType.MY_FILES||currentRootType==VolumeManagerCommon$3.RootType.DOWNLOADS||currentRootType==VolumeManagerCommon$3.RootType.CROSTINI||currentRootType==VolumeManagerCommon$3.RootType.ANDROID_FILES;event.canExecute=hasAndroidFilesVolumeInfo&&isInMyFiles;event.command.setHidden(!event.canExecute);event.command.checked=fileManager.fileFilter.isAllAndroidFoldersVisible()}};CommandHandler.COMMANDS_["drive-sync-settings"]=new class extends FilesCommand{execute(event,fileManager){const nowCellularDisabled=fileManager.ui.gearMenu.syncButton.hasAttribute("checked");const changeInfo={cellularDisabled:!nowCellularDisabled};chrome.fileManagerPrivate.setPreferences(changeInfo);CommandHandler.recordMenuItemSelected(nowCellularDisabled?CommandHandler.MenuCommandsForUMA.MOBILE_DATA_OFF:CommandHandler.MenuCommandsForUMA.MOBILE_DATA_ON)}canExecute(event,fileManager){event.canExecute=fileManager.directoryModel.isOnDrive()&&fileManager.volumeManager.getDriveConnectionState().hasCellularNetworkAccess;event.command.setHidden(!event.canExecute)}};CommandHandler.COMMANDS_["delete"]=new class extends FilesCommand{execute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);this.deleteEntries(entries,fileManager)}canExecute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);if(!entries.every(CommandUtil.shouldShowMenuItemsForEntry.bind(null,fileManager.volumeManager))){event.canExecute=false;event.command.setHidden(true);return}event.canExecute=this.canDeleteEntries_(entries,fileManager);const noEntries=entries.length===0;event.command.setHidden(noEntries)}deleteEntries(entries,fileManager,dialog=null){if(!entries.every(CommandUtil.shouldShowMenuItemsForEntry.bind(null,fileManager.volumeManager))||!this.canDeleteEntries_(entries,fileManager)){return}if(fileManager.fileOperationManager.willUseTrash(fileManager.volumeManager,entries)){fileManager.fileOperationManager.deleteEntries(entries);return}const message=entries.length===1?strf("GALLERY_CONFIRM_DELETE_ONE",entries[0].name):strf("GALLERY_CONFIRM_DELETE_SOME",entries.length);if(!dialog){dialog=fileManager.ui.deleteConfirmDialog}else if(dialog.showModalElement){dialog.showModalElement()}const deleteCallback=()=>{dialog.doneCallback&&dialog.doneCallback();document.querySelector("files-tooltip").hideTooltip()};dialog.show(message,(()=>{deleteCallback();fileManager.fileOperationManager.deleteEntries(entries)}),deleteCallback,null)}canDeleteEntries_(entries,fileManager){return entries.length>0&&!this.containsReadOnlyEntry_(entries,fileManager)&&fileManager.directoryModel.canDeleteEntries()&&CommandUtil.hasCapability(fileManager,entries,"canDelete")}canDeleteEntries(entries,fileManager){if(!entries.every(CommandUtil.shouldShowMenuItemsForEntry.bind(null,fileManager.volumeManager))||!this.canDeleteEntries_(entries,fileManager)){return false}return true}containsReadOnlyEntry_(entries,fileManager){return entries.some((entry=>{const locationInfo=fileManager.volumeManager.getLocationInfo(entry);return locationInfo&&locationInfo.isReadOnly||util$3.isNonModifiable(fileManager.volumeManager,entry)}))}};CommandHandler.registerUndoDeleteToast=function(fileManager){const onDeleted=e=>{if(e.reason==="BEGIN"||e.reason==="PROGRESS"||!e.trashedEntries.length){return}const message=e.trashedEntries.length===1?strf("UNDO_DELETE_ONE",e.trashedEntries[0].name):strf("UNDO_DELETE_SOME",e.trashedEntries.length);fileManager.ui.toast.show(message,{text:str("UNDO_DELETE_ACTION_LABEL"),callback:()=>{fileManager.fileOperationManager.restoreDeleted(assert(e.trashedEntries))}})};util$3.addEventListenerToBackgroundComponent(assert(fileManager.fileOperationManager),"delete",onDeleted)};CommandHandler.COMMANDS_["restore-from-trash"]=new class extends FilesCommand{execute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);fileManager.fileOperationManager.restoreDeleted(entries.map((e=>e)))}canExecute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);const enabled=entries.length>0&&entries.every((e=>e.rootType&&e.rootType===VolumeManagerCommon$3.RootType.TRASH));event.canExecute=enabled;event.command.setHidden(!enabled)}};CommandHandler.COMMANDS_["paste"]=new class extends FilesCommand{execute(event,fileManager){fileManager.document.execCommand(event.command.id)}canExecute(event,fileManager){const fileTransferController=fileManager.fileTransferController;event.canExecute=!!fileTransferController&&fileTransferController.queryPasteCommandEnabled(fileManager.directoryModel.getCurrentDirEntry());event.command.setHidden(!!CommandUtil.getOnlyOneSelectedDirectory(fileManager.getSelection()))}};CommandHandler.COMMANDS_["paste-into-current-folder"]=new class extends FilesCommand{execute(event,fileManager){fileManager.document.execCommand("paste")}canExecute(event,fileManager){const fileTransferController=fileManager.fileTransferController;event.canExecute=!!fileTransferController&&fileTransferController.queryPasteCommandEnabled(fileManager.directoryModel.getCurrentDirEntry())}};CommandHandler.COMMANDS_["paste-into-folder"]=new class extends FilesCommand{execute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);if(entries.length!==1||!entries[0].isDirectory||!CommandUtil.shouldShowMenuItemsForEntry(fileManager.volumeManager,entries[0])){return}const handler=inEvent=>{inEvent.destDirectory=entries[0]};fileManager.document.addEventListener("paste",handler,true);fileManager.document.execCommand("paste");fileManager.document.removeEventListener("paste",handler,true)}canExecute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);if(entries.length!==1||!entries[0].isDirectory||!CommandUtil.shouldShowMenuItemsForEntry(fileManager.volumeManager,entries[0])){event.canExecute=false;event.command.setHidden(true);return}const fileTransferController=fileManager.fileTransferController;const directoryEntry=entries[0];event.canExecute=!!fileTransferController&&fileTransferController.queryPasteCommandEnabled(directoryEntry);event.command.setHidden(false)}};CommandHandler.cutCopyCommand_=new class extends FilesCommand{execute(event,fileManager){fileManager.directoryModel.getFileListSelection().setCheckSelectMode(false);fileManager.document.execCommand(event.command.id)}canExecute(event,fileManager){const fileTransferController=fileManager.fileTransferController;if(!fileTransferController){event.command.setHidden(true);event.canExecute=false;return}const command=event.command;const target=event.target;const isMove=command.id==="cut";const volumeManager=fileManager.volumeManager;command.setHidden(false);function canDoDirectoryTree(){let entry;if(target.entry){entry=target.entry}else if(target.selectedItem&&target.selectedItem.entry){entry=target.selectedItem.entry}else{return false}if(!CommandUtil.shouldShowMenuItemsForEntry(volumeManager,entry)){command.setHidden(true);return false}if(isMove&&util$3.isNonModifiable(volumeManager,entry)){return false}if(util$3.isTeamDriveRoot(entry)){return false}const metadata=fileManager.metadataModel.getCache([entry],["canCopy","canDelete"]);assert(metadata.length===1);if(!isMove){return metadata[0].canCopy!==false}const volumeInfo=volumeManager.getVolumeInfo(entry);return!volumeInfo.isReadOnly&&metadata[0].canCopy!==false&&metadata[0].canDelete!==false}function canDoFileList(){if(CommandUtil.shouldIgnoreEvents(assert(fileManager.document))){return false}if(!fileManager.getSelection().entries.every(CommandUtil.shouldShowMenuItemsForEntry.bind(null,volumeManager))){command.setHidden(true);return false}if(isMove&&fileManager.getSelection().entries.some(util$3.isNonModifiable.bind(null,volumeManager))){return false}return isMove?fileTransferController.canCutOrDrag():fileTransferController.canCopyOrDrag()}const canDo=fileManager.ui.directoryTree.contains(target)?canDoDirectoryTree():canDoFileList();event.canExecute=canDo;command.disabled=!canDo}};CommandHandler.COMMANDS_["cut"]=CommandHandler.cutCopyCommand_;CommandHandler.COMMANDS_["copy"]=CommandHandler.cutCopyCommand_;CommandHandler.COMMANDS_["rename"]=new class extends FilesCommand{execute(event,fileManager){const entry=CommandUtil.getCommandEntry(fileManager,event.target);if(util$3.isNonModifiable(fileManager.volumeManager,entry)){return}if(event.target instanceof DirectoryTree||event.target instanceof DirectoryItem){let isRemovableRoot=false;let volumeInfo=null;if(entry){volumeInfo=fileManager.volumeManager.getVolumeInfo(entry);if(volumeInfo&&CommandUtil.isRootEntry(fileManager.volumeManager,entry)){isRemovableRoot=true}}if(event.target instanceof DirectoryTree){const directoryTree=event.target;assert(fileManager.directoryTreeNamingController).attachAndStart(assert(directoryTree.selectedItem),isRemovableRoot,volumeInfo)}else if(event.target instanceof DirectoryItem){const directoryItem=event.target;assert(fileManager.directoryTreeNamingController).attachAndStart(directoryItem,isRemovableRoot,volumeInfo)}}else{fileManager.namingController.initiateRename()}}canExecute(event,fileManager){if((()=>{const root=CommandUtil.getCommandEntry(fileManager,event.target);if(!root||!CommandUtil.isRootEntry(fileManager.volumeManager,root)){return false}const volumeInfo=fileManager.volumeManager.getVolumeInfo(root);const location=fileManager.volumeManager.getLocationInfo(root);if(!volumeInfo||!location){event.command.setHidden(true);event.canExecute=false;return true}const writable=!location.isReadOnly;const removable=location.rootType===VolumeManagerCommon$3.RootType.REMOVABLE;event.canExecute=removable&&writable&&volumeInfo.diskFileSystemType&&CommandHandler.RENAME_DISK_FILE_SYSTEM_SUPPORT_.indexOf(volumeInfo.diskFileSystemType)>-1;event.command.setHidden(!removable);return removable})()){return}const renameTarget=CommandUtil.isFromSelectionMenu(event)?fileManager.ui.listContainer.currentList:event.target;const entries=CommandUtil.getCommandEntries(fileManager,renameTarget);if(entries.length===0||!CommandUtil.shouldShowMenuItemsForEntry(fileManager.volumeManager,entries[0])||entries.some(util$3.isNonModifiable.bind(null,fileManager.volumeManager))){event.canExecute=false;event.command.setHidden(true);return}const parentEntry=CommandUtil.getParentEntry(renameTarget,fileManager.directoryModel);const locationInfo=parentEntry?fileManager.volumeManager.getLocationInfo(parentEntry):null;const volumeIsNotReadOnly=!!locationInfo&&!locationInfo.isReadOnly;event.canExecute=entries.length===1&&volumeIsNotReadOnly&&CommandUtil.hasCapability(fileManager,entries,"canRename");event.command.setHidden(false)}};CommandHandler.COMMANDS_["volume-help"]=new class extends FilesCommand{execute(event,fileManager){if(fileManager.directoryModel.isOnDrive()){util$3.visitURL(str("GOOGLE_DRIVE_HELP_URL"));CommandHandler.recordMenuItemSelected(CommandHandler.MenuCommandsForUMA.DRIVE_HELP)}else{util$3.visitURL(str("FILES_APP_HELP_URL"));CommandHandler.recordMenuItemSelected(CommandHandler.MenuCommandsForUMA.HELP)}}canExecute(event,fileManager){const hideHelp=DialogType.isModal(fileManager.dialogType);event.canExecute=!hideHelp;event.command.setHidden(hideHelp)}};CommandHandler.COMMANDS_["send-feedback"]=new class extends FilesCommand{execute(event,fileManager){const message={categoryTag:"chromeos-files-app",requestFeedback:true,feedbackInfo:{description:""}};if(window.isSWA){console.log("SWA send-feedback command not implemented: ",message);return}const kFeedbackExtensionId="gfdkimpbcpahaombhbimeihdjnejgicl";chrome.runtime.sendMessage(kFeedbackExtensionId,message,(response=>{if(chrome.runtime.lastError){console.log("Failed to send feedback: "+chrome.runtime.lastError.message)}}))}};CommandHandler.COMMANDS_["drive-buy-more-space"]=new class extends FilesCommand{execute(event,fileManager){util$3.visitURL(str("GOOGLE_DRIVE_BUY_STORAGE_URL"));CommandHandler.recordMenuItemSelected(CommandHandler.MenuCommandsForUMA.DRIVE_BUY_MORE_SPACE)}canExecute(event,fileManager){CommandUtil.canExecuteVisibleOnDriveInNormalAppModeOnly(event,fileManager)}};CommandHandler.COMMANDS_["drive-go-to-drive"]=new class extends FilesCommand{execute(event,fileManager){util$3.visitURL(str("GOOGLE_DRIVE_ROOT_URL"));CommandHandler.recordMenuItemSelected(CommandHandler.MenuCommandsForUMA.DRIVE_GO_TO_DRIVE)}canExecute(event,fileManager){CommandUtil.canExecuteVisibleOnDriveInNormalAppModeOnly(event,fileManager)}};CommandHandler.COMMANDS_["default-task"]=new class extends FilesCommand{execute(event,fileManager){fileManager.taskController.executeDefaultTask()}canExecute(event,fileManager){const canExecute=fileManager.taskController.canExecuteDefaultTask();event.canExecute=canExecute;event.command.setHidden(!canExecute)}};CommandHandler.COMMANDS_["open-with"]=new class extends FilesCommand{execute(event,fileManager){fileManager.taskController.getFileTasks().then((tasks=>{tasks.showTaskPicker(fileManager.ui.defaultTaskPicker,str("OPEN_WITH_BUTTON_LABEL"),"",(task=>{tasks.execute(task)}),FileTasks.TaskPickerType.OpenWith)})).catch((error=>{if(error){console.error(error.stack||error)}}))}canExecute(event,fileManager){const canExecute=fileManager.taskController.canExecuteOpenActions();event.canExecute=canExecute;event.command.setHidden(!canExecute)}};CommandHandler.COMMANDS_["more-actions"]=new class extends FilesCommand{execute(event,fileManager){fileManager.taskController.getFileTasks().then((tasks=>{tasks.showTaskPicker(fileManager.ui.defaultTaskPicker,str("MORE_ACTIONS_BUTTON_LABEL"),"",(task=>{tasks.execute(task)}),FileTasks.TaskPickerType.MoreActions)})).catch((error=>{if(error){console.error(error.stack||error)}}))}canExecute(event,fileManager){const canExecute=fileManager.taskController.canExecuteMoreActions()&&!util$3.isSharesheetEnabled();event.canExecute=canExecute;event.command.setHidden(!canExecute)}};CommandHandler.COMMANDS_["show-submenu"]=new class extends FilesCommand{execute(event,fileManager){fileManager.ui.shareMenuButton.showSubMenu()}canExecute(event,fileManager){const canExecute=fileManager.taskController.canExecuteShowOverflow();event.canExecute=canExecute;event.command.setHidden(!canExecute)}};CommandHandler.COMMANDS_["invoke-sharesheet"]=new class extends FilesCommand{execute(event,fileManager){const entries=fileManager.selectionHandler.selection.entries;const launchSource=CommandUtil.getSharesheetLaunchSource(event);chrome.fileManagerPrivate.invokeSharesheet(entries,launchSource,(()=>{if(chrome.runtime.lastError){console.error(chrome.runtime.lastError.message);return}}))}canExecute(event,fileManager){const entries=fileManager.selectionHandler.selection.entries;if(!util$3.isSharesheetEnabled()||!entries||entries.length===0||entries.some((entry=>entry.isDirectory))&&(!CommandUtil.isDriveEntries(entries,fileManager.volumeManager)||entries.length>1)){event.canExecute=false;event.command.setHidden(true);event.command.disabled=true;return}event.canExecute=true;event.command.disabled=!fileManager.ui.actionbar.contains(event.target);chrome.fileManagerPrivate.sharesheetHasTargets(entries,(hasTargets=>{if(chrome.runtime.lastError){console.error(chrome.runtime.lastError.message);return}event.command.setHidden(!hasTargets);event.canExecute=hasTargets;event.command.disabled=!hasTargets}))}};CommandHandler.COMMANDS_["toggle-holding-space"]=new class extends FilesCommand{constructor(){super();this.addsItems_}execute(event,fileManager){if(this.addsItems_===undefined){return}const allowedVolumeTypes=HoldingSpaceUtil.getAllowedVolumeTypes();const entries=fileManager.selectionHandler.selection.entries.filter((entry=>{const volumeInfo=fileManager.volumeManager.getVolumeInfo(entry);return volumeInfo&&allowedVolumeTypes.includes(volumeInfo.volumeType)}));chrome.fileManagerPrivate.toggleAddedToHoldingSpace(entries,this.addsItems_);if(this.addsItems_){HoldingSpaceUtil.maybeStoreTimeOfFirstPin()}}canExecute(event,fileManager){const command=event.command;if(!HoldingSpaceUtil.isFeatureEnabled()){event.canExecute=false;command.setHidden(true);return}const allowedVolumeTypes=HoldingSpaceUtil.getAllowedVolumeTypes();const currentRootType=fileManager.directoryModel.getCurrentRootType();if(!util$3.isRecentRootType(currentRootType)){const volumeInfo=fileManager.directoryModel.getCurrentVolumeInfo();if(!volumeInfo||!allowedVolumeTypes.includes(volumeInfo.volumeType)){event.canExecute=false;command.setHidden(true);return}}const entries=fileManager.selectionHandler.selection.entries.filter((entry=>{const volumeInfo=fileManager.volumeManager.getVolumeInfo(entry);return volumeInfo&&allowedVolumeTypes.includes(volumeInfo.volumeType)}));if(entries.length===0){event.canExecute=false;command.setHidden(true);return}event.canExecute=true;command.setHidden(false);chrome.fileManagerPrivate.getHoldingSpaceState((state=>{if(!state){command.setHidden(true);return}const itemsSet={};state.itemUrls.forEach((item=>itemsSet[item]=true));const selectedUrls=util$3.entriesToURLs(entries);this.addsItems_=selectedUrls.some((url=>!itemsSet[url]));command.label=this.addsItems_?str("HOLDING_SPACE_PIN_TO_SHELF_COMMAND_LABEL"):str("HOLDING_SPACE_UNPIN_FROM_SHELF_COMMAND_LABEL")}))}};CommandHandler.COMMANDS_["go-to-file-location"]=new class extends FilesCommand{execute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);if(entries.length!==1){return}const components=PathComponent.computeComponentsFromEntry(entries[0],fileManager.volumeManager);assert(components.length>=2);const parentComponent=components[components.length-2];parentComponent.resolveEntry().then((entry=>{if(entry&&entry.isDirectory){fileManager.directoryModel.changeDirectoryEntry(entry)}}))}canExecute(event,fileManager){if(!util$3.isRecentRootType(fileManager.directoryModel.getCurrentRootType())){event.canExecute=false;event.command.setHidden(true);return}const entries=CommandUtil.getCommandEntries(fileManager,event.target);event.canExecute=entries.length===1;event.command.setHidden(!event.canExecute)}};CommandHandler.COMMANDS_["get-info"]=new class extends FilesCommand{execute(event,fileManager){}canExecute(event,fileManager){const entries=fileManager.getSelection().entries;if(entries.length===0){event.canExecute=false;event.command.setHidden(true);return}event.canExecute=entries.length>=1;event.command.setHidden(false)}};CommandHandler.COMMANDS_["search"]=new class extends FilesCommand{execute(event,fileManager){fileManager.directoryModel.clearSelection();const element=fileManager.document.querySelector("#search-box cr-input");element.disabled=false;element.select()}canExecute(event,fileManager){event.canExecute=!fileManager.namingController.isRenamingInProgress()}};CommandHandler.COMMANDS_["volume-switch-1"]=CommandUtil.createVolumeSwitchCommand(1);CommandHandler.COMMANDS_["volume-switch-2"]=CommandUtil.createVolumeSwitchCommand(2);CommandHandler.COMMANDS_["volume-switch-3"]=CommandUtil.createVolumeSwitchCommand(3);CommandHandler.COMMANDS_["volume-switch-4"]=CommandUtil.createVolumeSwitchCommand(4);CommandHandler.COMMANDS_["volume-switch-5"]=CommandUtil.createVolumeSwitchCommand(5);CommandHandler.COMMANDS_["volume-switch-6"]=CommandUtil.createVolumeSwitchCommand(6);CommandHandler.COMMANDS_["volume-switch-7"]=CommandUtil.createVolumeSwitchCommand(7);CommandHandler.COMMANDS_["volume-switch-8"]=CommandUtil.createVolumeSwitchCommand(8);CommandHandler.COMMANDS_["volume-switch-9"]=CommandUtil.createVolumeSwitchCommand(9);CommandHandler.COMMANDS_["toggle-pinned"]=new class extends FilesCommand{execute(event,fileManager){const entries=fileManager.getSelection().entries;const actionsController=fileManager.actionsController;actionsController.getActionsForEntries(entries).then((actionsModel=>{if(!actionsModel){return}const saveForOfflineAction=actionsModel.getAction(ActionsModel.CommonActionId.SAVE_FOR_OFFLINE);const offlineNotNeededAction=actionsModel.getAction(ActionsModel.CommonActionId.OFFLINE_NOT_NECESSARY);let action=offlineNotNeededAction;if(saveForOfflineAction&&saveForOfflineAction.canExecute()){action=saveForOfflineAction}if(action){actionsController.executeAction(action)}}))}canExecute(event,fileManager){const entries=fileManager.getSelection().entries;const command=event.command;const actionsController=fileManager.actionsController;if(!CommandUtil.isDriveEntries(entries,fileManager.volumeManager)){command.setHidden(true);return}command.setHidden(false);function canExecutePinned_(actionsModel){if(!actionsModel){return}const saveForOfflineAction=actionsModel.getAction(ActionsModel.CommonActionId.SAVE_FOR_OFFLINE);const offlineNotNeededAction=actionsModel.getAction(ActionsModel.CommonActionId.OFFLINE_NOT_NECESSARY);let action=offlineNotNeededAction;command.checked=!!offlineNotNeededAction;if(saveForOfflineAction&&saveForOfflineAction.canExecute()){action=saveForOfflineAction;command.checked=false}event.canExecute=action&&action.canExecute();command.disabled=!event.canExecute}const actionsModel=actionsController.getInitializedActionsForEntries(entries);if(actionsModel){canExecutePinned_(actionsModel);return}event.canExecute=true;actionsController.getActionsForEntries(entries).then(canExecutePinned_)}};CommandHandler.COMMANDS_["zip-selection"]=new class extends FilesCommand{execute(event,fileManager){const dirEntry=fileManager.getCurrentDirectoryEntry();if(!dirEntry||!fileManager.getSelection().entries.every(CommandUtil.shouldShowMenuItemsForEntry.bind(null,fileManager.volumeManager))){return}if(util$3.isZipPackEnabled()){const item=new ProgressCenterItem;item.id="no_zip";item.message="Cannot zip selection: Not implemented yet";item.state=ProgressItemState.ERROR;fileManager.progressCenter.updateItem(item)}else{fileManager.taskController.getFileTasks().then((tasks=>{if(fileManager.directoryModel.isOnDrive()||fileManager.directoryModel.isOnMTP()){tasks.execute({taskId:FileTasks.ZIP_ARCHIVER_ZIP_USING_TMP_TASK_ID})}else{tasks.execute({taskId:FileTasks.ZIP_ARCHIVER_ZIP_TASK_ID})}})).catch((error=>{if(error){console.error(error.stack||error)}}))}}canExecute(event,fileManager){const dirEntry=fileManager.getCurrentDirectoryEntry();const selection=fileManager.getSelection();if(!selection.entries.every(CommandUtil.shouldShowMenuItemsForEntry.bind(null,fileManager.volumeManager))){event.canExecute=false;event.command.setHidden(true);return}const noEntries=selection.entries.length===0;event.command.setHidden(noEntries);event.canExecute=dirEntry&&!fileManager.directoryModel.isReadOnly()&&selection&&selection.totalCount>0}};CommandHandler.COMMANDS_["share"]=new class extends FilesCommand{execute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);FileTasks.recordSharingActionUMA_(CommandUtil.getSharingActionSource(event),entries);const actionsController=fileManager.actionsController;fileManager.actionsController.getActionsForEntries(entries).then((actionsModel=>{if(!actionsModel){return}const action=actionsModel.getAction(ActionsModel.CommonActionId.SHARE);if(action){actionsController.executeAction(action)}}))}canExecute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);const command=event.command;const actionsController=fileManager.actionsController;if(!CommandUtil.isDriveEntries(entries,fileManager.volumeManager)){command.setHidden(true);return}command.setHidden(false);function canExecuteShare_(actionsModel){if(!actionsModel){return}const action=actionsModel.getAction(ActionsModel.CommonActionId.SHARE);event.canExecute=action&&action.canExecute();command.disabled=!event.canExecute;command.setHidden(!action)}const actionsModel=actionsController.getInitializedActionsForEntries(entries);if(actionsModel){canExecuteShare_(actionsModel);return}event.canExecute=true;command.setHidden(false);actionsController.getActionsForEntries(entries).then(canExecuteShare_)}};CommandHandler.COMMANDS_["manage-in-drive"]=new class extends FilesCommand{execute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);const actionsController=fileManager.actionsController;fileManager.actionsController.getActionsForEntries(entries).then((actionsModel=>{if(!actionsModel){return}const action=actionsModel.getAction(ActionsModel.InternalActionId.MANAGE_IN_DRIVE);if(action){actionsController.executeAction(action)}}))}canExecute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);const command=event.command;const actionsController=fileManager.actionsController;if(!CommandUtil.isDriveEntries(entries,fileManager.volumeManager)){command.setHidden(true);return}command.setHidden(false);function canExecuteManageInDrive_(actionsModel){if(!actionsModel){return}const action=actionsModel.getAction(ActionsModel.InternalActionId.MANAGE_IN_DRIVE);if(action){command.setHidden(!action);event.canExecute=action&&action.canExecute();command.disabled=!event.canExecute}}const actionsModel=actionsController.getInitializedActionsForEntries(entries);if(actionsModel){canExecuteManageInDrive_(actionsModel);return}event.canExecute=true;actionsController.getActionsForEntries(entries).then(canExecuteManageInDrive_)}};CommandHandler.COMMANDS_["share-with-linux"]=new class extends FilesCommand{execute(event,fileManager){const entry=CommandUtil.getCommandEntry(fileManager,event.target);if(!entry||!entry.isDirectory){return}const dir=entry;const info=fileManager.volumeManager.getLocationInfo(dir);if(!info){return}function share(){chrome.fileManagerPrivate.sharePathsWithCrostini(constants.DEFAULT_CROSTINI_VM,[dir],true,(()=>{if(chrome.runtime.lastError){console.error("Error sharing with linux: "+chrome.runtime.lastError.message)}}));fileManager.crostini.registerSharedPath(constants.DEFAULT_CROSTINI_VM,dir);fileManager.ui.toast.show(str("FOLDER_SHARED_WITH_CROSTINI"),{text:str("MANAGE_TOAST_BUTTON_LABEL"),callback:()=>{chrome.fileManagerPrivate.openSettingsSubpage("crostini/sharedPaths");CommandHandler.recordMenuItemSelected(CommandHandler.MenuCommandsForUMA.MANAGE_LINUX_SHARING_TOAST)}})}if(dir.fullPath=="/"){fileManager.ui.confirmDialog.showHtml(strf("SHARE_ROOT_FOLDER_WITH_CROSTINI_TITLE"),strf("SHARE_ROOT_FOLDER_WITH_CROSTINI",info.volumeInfo.label),share,(()=>{}))}else if(info.isRootEntry&&(info.rootType==VolumeManagerCommon$3.RootType.DRIVE||info.rootType==VolumeManagerCommon$3.RootType.COMPUTERS_GRAND_ROOT||info.rootType==VolumeManagerCommon$3.RootType.SHARED_DRIVES_GRAND_ROOT)){fileManager.ui.confirmDialog.showHtml(strf("SHARE_ROOT_FOLDER_WITH_CROSTINI_TITLE"),strf("SHARE_ROOT_FOLDER_WITH_CROSTINI_DRIVE"),share,(()=>{}))}else{share()}CommandHandler.recordMenuItemSelected(CommandHandler.MenuCommandsForUMA.SHARE_WITH_LINUX)}canExecute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);event.canExecute=entries.length===1&&entries[0].isDirectory&&!fileManager.crostini.isPathShared(constants.DEFAULT_CROSTINI_VM,entries[0])&&fileManager.crostini.canSharePath(constants.DEFAULT_CROSTINI_VM,entries[0],true);event.command.setHidden(!event.canExecute)}};CommandHandler.COMMANDS_["share-with-plugin-vm"]=new class extends FilesCommand{execute(event,fileManager){const entry=CommandUtil.getCommandEntry(fileManager,event.target);if(!entry||!entry.isDirectory){return}const dir=entry;const info=fileManager.volumeManager.getLocationInfo(dir);if(!info){return}function share(){chrome.fileManagerPrivate.sharePathsWithCrostini(constants.PLUGIN_VM,[dir],true,(()=>{if(chrome.runtime.lastError){console.error("Error sharing with Plugin VM: "+chrome.runtime.lastError.message)}}));fileManager.crostini.registerSharedPath(constants.PLUGIN_VM,dir);fileManager.ui.toast.show(str("FOLDER_SHARED_WITH_PLUGIN_VM"),{text:str("MANAGE_TOAST_BUTTON_LABEL"),callback:()=>{chrome.fileManagerPrivate.openSettingsSubpage("app-management/pluginVm/sharedPaths");CommandHandler.recordMenuItemSelected(CommandHandler.MenuCommandsForUMA.MANAGE_PLUGIN_VM_SHARING_TOAST)}})}if(dir.fullPath=="/"){fileManager.ui.confirmDialog.showHtml(strf("SHARE_ROOT_FOLDER_WITH_PLUGIN_VM_TITLE"),strf("SHARE_ROOT_FOLDER_WITH_PLUGIN_VM",info.volumeInfo.label),share,(()=>{}))}else if(info.isRootEntry&&(info.rootType==VolumeManagerCommon$3.RootType.DRIVE||info.rootType==VolumeManagerCommon$3.RootType.COMPUTERS_GRAND_ROOT||info.rootType==VolumeManagerCommon$3.RootType.SHARED_DRIVES_GRAND_ROOT)){fileManager.ui.confirmDialog.showHtml(strf("SHARE_ROOT_FOLDER_WITH_PLUGIN_VM_TITLE"),strf("SHARE_ROOT_FOLDER_WITH_PLUGIN_VM_DRIVE"),share,(()=>{}))}else{share()}CommandHandler.recordMenuItemSelected(CommandHandler.MenuCommandsForUMA.SHARE_WITH_PLUGIN_VM)}canExecute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);event.canExecute=entries.length===1&&entries[0].isDirectory&&!fileManager.crostini.isPathShared(constants.PLUGIN_VM,entries[0])&&fileManager.crostini.canSharePath(constants.PLUGIN_VM,entries[0],true);event.command.setHidden(!event.canExecute)}};CommandHandler.COMMANDS_["manage-linux-sharing-gear"]=new class extends FilesCommand{execute(event,fileManager){chrome.fileManagerPrivate.openSettingsSubpage("crostini/sharedPaths");CommandHandler.recordMenuItemSelected(CommandHandler.MenuCommandsForUMA.MANAGE_LINUX_SHARING)}canExecute(event,fileManager){event.canExecute=fileManager.crostini.isEnabled(constants.DEFAULT_CROSTINI_VM);event.command.setHidden(!event.canExecute)}};CommandHandler.COMMANDS_["manage-linux-sharing"]=new class extends FilesCommand{execute(event,fileManager){chrome.fileManagerPrivate.openSettingsSubpage("crostini/sharedPaths");CommandHandler.recordMenuItemSelected(CommandHandler.MenuCommandsForUMA.MANAGE_LINUX_SHARING)}canExecute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);event.canExecute=entries.length===1&&entries[0].isDirectory&&fileManager.crostini.isPathShared(constants.DEFAULT_CROSTINI_VM,entries[0]);event.command.setHidden(!event.canExecute)}};CommandHandler.COMMANDS_["manage-plugin-vm-sharing-gear"]=new class extends FilesCommand{execute(event,fileManager){chrome.fileManagerPrivate.openSettingsSubpage("app-management/pluginVm/sharedPaths");CommandHandler.recordMenuItemSelected(CommandHandler.MenuCommandsForUMA.MANAGE_PLUGIN_VM_SHARING)}canExecute(event,fileManager){event.canExecute=fileManager.crostini.isEnabled(constants.PLUGIN_VM);event.command.setHidden(!event.canExecute)}};CommandHandler.COMMANDS_["manage-plugin-vm-sharing"]=new class extends FilesCommand{execute(event,fileManager){chrome.fileManagerPrivate.openSettingsSubpage("app-management/pluginVm/sharedPaths");CommandHandler.recordMenuItemSelected(CommandHandler.MenuCommandsForUMA.MANAGE_PLUGIN_VM_SHARING)}canExecute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);event.canExecute=entries.length===1&&entries[0].isDirectory&&fileManager.crostini.isPathShared(constants.PLUGIN_VM,entries[0]);event.command.setHidden(!event.canExecute)}};CommandHandler.COMMANDS_["pin-folder"]=new class extends FilesCommand{execute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);const actionsController=fileManager.actionsController;fileManager.actionsController.getActionsForEntries(entries).then((actionsModel=>{if(!actionsModel){return}const action=actionsModel.getAction(ActionsModel.InternalActionId.CREATE_FOLDER_SHORTCUT);if(action){actionsController.executeAction(action)}}))}canExecute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);const command=event.command;const actionsController=fileManager.actionsController;if(!CommandUtil.isDriveEntries(entries,fileManager.volumeManager)){command.setHidden(true);return}command.setHidden(false);function canExecuteCreateShortcut_(actionsModel){if(!actionsModel){return}const action=actionsModel.getAction(ActionsModel.InternalActionId.CREATE_FOLDER_SHORTCUT);event.canExecute=action&&action.canExecute();command.disabled=!event.canExecute;command.setHidden(!action)}const actionsModel=actionsController.getInitializedActionsForEntries(entries);if(actionsModel){canExecuteCreateShortcut_(actionsModel);return}event.canExecute=true;command.setHidden(false);actionsController.getActionsForEntries(entries).then(canExecuteCreateShortcut_)}};CommandHandler.COMMANDS_["unpin-folder"]=new class extends FilesCommand{execute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);const actionsController=fileManager.actionsController;fileManager.actionsController.getActionsForEntries(entries).then((actionsModel=>{if(!actionsModel){return}const action=actionsModel.getAction(ActionsModel.InternalActionId.REMOVE_FOLDER_SHORTCUT);if(action){actionsController.executeAction(action)}}))}canExecute(event,fileManager){const entries=CommandUtil.getCommandEntries(fileManager,event.target);const command=event.command;const actionsController=fileManager.actionsController;if(!CommandUtil.isDriveEntries(entries,fileManager.volumeManager)){command.setHidden(true);return}command.setHidden(false);function canExecuteRemoveShortcut_(actionsModel){if(!actionsModel){return}const action=actionsModel.getAction(ActionsModel.InternalActionId.REMOVE_FOLDER_SHORTCUT);command.setHidden(!action);event.canExecute=action&&action.canExecute();command.disabled=!event.canExecute}const actionsModel=actionsController.getInitializedActionsForEntries(entries);if(actionsModel){canExecuteRemoveShortcut_(actionsModel);return}event.canExecute=true;command.setHidden(false);actionsController.getActionsForEntries(entries).then(canExecuteRemoveShortcut_)}};CommandHandler.COMMANDS_["zoom-in"]=new class extends FilesCommand{execute(event,fileManager){chrome.fileManagerPrivate.zoom(chrome.fileManagerPrivate.ZoomOperationType.IN)}};CommandHandler.COMMANDS_["zoom-out"]=new class extends FilesCommand{execute(event,fileManager){chrome.fileManagerPrivate.zoom(chrome.fileManagerPrivate.ZoomOperationType.OUT)}};CommandHandler.COMMANDS_["zoom-reset"]=new class extends FilesCommand{execute(event,fileManager){chrome.fileManagerPrivate.zoom(chrome.fileManagerPrivate.ZoomOperationType.RESET)}};CommandHandler.COMMANDS_["sort-by-name"]=new class extends FilesCommand{execute(event,fileManager){if(fileManager.directoryModel.getFileList()){fileManager.directoryModel.getFileList().sort("name","asc");const msg=strf("COLUMN_SORTED_ASC",str("NAME_COLUMN_LABEL"));fileManager.ui.speakA11yMessage(msg)}}};CommandHandler.COMMANDS_["sort-by-size"]=new class extends FilesCommand{execute(event,fileManager){if(fileManager.directoryModel.getFileList()){fileManager.directoryModel.getFileList().sort("size","desc");const msg=strf("COLUMN_SORTED_DESC",str("SIZE_COLUMN_LABEL"));fileManager.ui.speakA11yMessage(msg)}}};CommandHandler.COMMANDS_["sort-by-type"]=new class extends FilesCommand{execute(event,fileManager){if(fileManager.directoryModel.getFileList()){fileManager.directoryModel.getFileList().sort("type","asc");const msg=strf("COLUMN_SORTED_ASC",str("TYPE_COLUMN_LABEL"));fileManager.ui.speakA11yMessage(msg)}}};CommandHandler.COMMANDS_["sort-by-date"]=new class extends FilesCommand{execute(event,fileManager){if(fileManager.directoryModel.getFileList()){fileManager.directoryModel.getFileList().sort("modificationTime","desc");const msg=strf("COLUMN_SORTED_DESC",str("DATE_COLUMN_LABEL"));fileManager.ui.speakA11yMessage(msg)}}};CommandHandler.COMMANDS_["inspect-normal"]=new class extends FilesCommand{execute(event,fileManager){chrome.fileManagerPrivate.openInspector(chrome.fileManagerPrivate.InspectionType.NORMAL)}};CommandHandler.COMMANDS_["inspect-console"]=new class extends FilesCommand{execute(event,fileManager){chrome.fileManagerPrivate.openInspector(chrome.fileManagerPrivate.InspectionType.CONSOLE)}};CommandHandler.COMMANDS_["inspect-element"]=new class extends FilesCommand{execute(event,fileManager){chrome.fileManagerPrivate.openInspector(chrome.fileManagerPrivate.InspectionType.ELEMENT)}};CommandHandler.COMMANDS_["inspect-background"]=new class extends FilesCommand{execute(event,fileManager){chrome.fileManagerPrivate.openInspector(chrome.fileManagerPrivate.InspectionType.BACKGROUND)}};CommandHandler.COMMANDS_["open-gear-menu"]=new class extends FilesCommand{execute(event,fileManager){fileManager.ui.gearButton.showMenu(true)}};CommandHandler.COMMANDS_["focus-action-bar"]=new class extends FilesCommand{execute(event,fileManager){fileManager.ui.actionbar.querySelector("button:not([hidden]), cr-button:not([hidden])").focus()}};CommandHandler.COMMANDS_["browser-back"]=new class extends FilesCommand{execute(event,fileManager){const currentWindow=chrome.app.window.current();if(currentWindow){currentWindow.minimize()}}};CommandHandler.COMMANDS_["configure"]=new class extends FilesCommand{execute(event,fileManager){const volumeInfo=CommandUtil.getElementVolumeInfo(event.target,fileManager);if(volumeInfo&&volumeInfo.configurable){fileManager.volumeManager.configure(volumeInfo)}}canExecute(event,fileManager){const volumeInfo=CommandUtil.getElementVolumeInfo(event.target,fileManager);event.canExecute=volumeInfo&&volumeInfo.configurable;event.command.setHidden(!event.canExecute)}};CommandHandler.COMMANDS_["refresh"]=new class extends FilesCommand{execute(event,fileManager){fileManager.directoryModel.rescan(true);fileManager.spinnerController.blink()}canExecute(event,fileManager){const currentDirEntry=fileManager.directoryModel.getCurrentDirEntry();const volumeInfo=currentDirEntry&&fileManager.volumeManager.getVolumeInfo(currentDirEntry);event.canExecute=volumeInfo&&!volumeInfo.watchable;event.command.setHidden(!event.canExecute||fileManager.directoryModel.getFileListSelection().getCheckSelectMode())}};CommandHandler.COMMANDS_["set-wallpaper"]=new class extends FilesCommand{execute(event,fileManager){const entry=fileManager.getSelection().entries[0];new Promise(((resolve,reject)=>{entry.file(resolve,reject)})).then((blob=>{const fileReader=new FileReader;return new Promise(((resolve,reject)=>{fileReader.onload=()=>{resolve(fileReader.result)};fileReader.onerror=()=>{reject(fileReader.error)};fileReader.readAsArrayBuffer(blob)}))})).then((arrayBuffer=>new Promise(((resolve,reject)=>{chrome.wallpaper.setWallpaper({data:arrayBuffer,layout:chrome.wallpaper.WallpaperLayout.CENTER_CROPPED,filename:"wallpaper"},(()=>{if(chrome.runtime.lastError){reject(chrome.runtime.lastError)}else{resolve(null)}}))})))).catch((()=>{fileManager.ui.alertDialog.showHtml("",str("ERROR_INVALID_WALLPAPER"),null,null,null)}))}canExecute(event,fileManager){const entries=fileManager.getSelection().entries;if(entries.length===0){event.canExecute=false;event.command.setHidden(true);return}const type=FileType.getType(entries[0]);if(entries.length!==1||type.type!=="image"){event.canExecute=false;event.command.setHidden(true);return}event.canExecute=type.subtype==="JPEG"||type.subtype==="PNG";event.command.setHidden(false)}};CommandHandler.COMMANDS_["volume-storage"]=new class extends FilesCommand{execute(event,fileManager){chrome.fileManagerPrivate.openSettingsSubpage("storage")}canExecute(event,fileManager){event.canExecute=false;const currentVolumeInfo=fileManager.directoryModel.getCurrentVolumeInfo();if(!currentVolumeInfo){return}if(currentVolumeInfo.volumeType==VolumeManagerCommon$3.VolumeType.MY_FILES||currentVolumeInfo.volumeType==VolumeManagerCommon$3.VolumeType.DOWNLOADS||currentVolumeInfo.volumeType==VolumeManagerCommon$3.VolumeType.CROSTINI||currentVolumeInfo.volumeType==VolumeManagerCommon$3.VolumeType.ANDROID_FILES||currentVolumeInfo.volumeType==VolumeManagerCommon$3.VolumeType.DOCUMENTS_PROVIDER){event.canExecute=true}}};CommandHandler.COMMANDS_["show-providers-submenu"]=new class extends FilesCommand{execute(event,fileManager){fileManager.ui.gearButton.showSubMenu()}canExecute(event,fileManager){event.canExecute=fileManager.dialogType===DialogType.FULL_PAGE&&!chrome.extension.inIncognitoContext}};// Copyright 2020 The Chromium Authors. All rights reserved.
class CrostiniController{constructor(crostini,filesMessage,directoryModel,directoryTree){this.crostini_=crostini;this.filesMessage_=filesMessage;this.directoryModel_=directoryModel;this.directoryTree_=directoryTree;this.entrySharedWithCrostini_=false;this.entrySharedWithPluginVm_=false;directoryModel.addEventListener("directory-changed",(()=>this.maybeShowSharedMessage()))}async redraw(){this.directoryTree_.dataModel.linuxFilesItem=this.crostini_.isEnabled(constants.DEFAULT_CROSTINI_VM)?new NavigationModelFakeItem(str("LINUX_FILES_ROOT_LABEL"),NavigationModelItemType.CROSTINI,new FakeEntryImpl(str("LINUX_FILES_ROOT_LABEL"),VolumeManagerCommon$3.RootType.CROSTINI)):null;this.directoryTree_.redraw(false)}async loadSharedPaths(maybeShowToast,filesToast){let showToast=maybeShowToast;const getSharedPaths=async vmName=>{if(!this.crostini_.isEnabled(vmName)){return 0}return new Promise((resolve=>{chrome.fileManagerPrivate.getCrostiniSharedPaths(maybeShowToast,vmName,((entries,firstForSession)=>{showToast=showToast&&firstForSession;for(const entry of entries){this.crostini_.registerSharedPath(vmName,assert(entry))}resolve(entries.length)}))}))};const toast=(count,msgSingle,msgPlural,action,subPage,umaItem)=>{if(!showToast||count==0){return}filesToast.show(count==1?str(msgSingle):strf(msgPlural,count),{text:str(action),callback:()=>{chrome.fileManagerPrivate.openSettingsSubpage(subPage);CommandHandler.recordMenuItemSelected(umaItem)}})};const[crostiniShareCount,pluginVmShareCount]=await Promise.all([getSharedPaths(constants.DEFAULT_CROSTINI_VM),getSharedPaths(constants.PLUGIN_VM)]);toast(crostiniShareCount,"FOLDER_SHARED_WITH_CROSTINI","FOLDER_SHARED_WITH_CROSTINI_PLURAL","MANAGE_TOAST_BUTTON_LABEL","crostini/sharedPaths",CommandHandler.MenuCommandsForUMA.MANAGE_LINUX_SHARING_TOAST_STARTUP);toast(pluginVmShareCount,"FOLDER_SHARED_WITH_PLUGIN_VM","FOLDER_SHARED_WITH_PLUGIN_VM_PLURAL","MANAGE_TOAST_BUTTON_LABEL","app-management/pluginVm/sharedPaths",CommandHandler.MenuCommandsForUMA.MANAGE_PLUGIN_VM_SHARING_TOAST_STARTUP)}maybeShowSharedMessage(){const entry=this.directoryModel_.getCurrentDirEntry();if(!entry){return}const sharedWithCrostini=this.crostini_.isPathShared("termina",entry);const sharedWithPluginVm=this.crostini_.isPathShared("PvmDefault",entry);if(sharedWithCrostini==this.entrySharedWithCrostini_&&sharedWithPluginVm==this.entrySharedWithPluginVm_){return}this.entrySharedWithCrostini_=sharedWithCrostini;this.entrySharedWithPluginVm_=sharedWithPluginVm;let msg="";let subpage="";if(sharedWithCrostini&&sharedWithPluginVm){msg="MESSAGE_FOLDER_SHARED_WITH_CROSTINI_AND_PLUGIN_VM";subpage="app-management/pluginVm/sharedPaths"}else if(sharedWithCrostini){msg="MESSAGE_FOLDER_SHARED_WITH_CROSTINI";subpage="crostini/sharedPaths"}else if(sharedWithPluginVm){msg="MESSAGE_FOLDER_SHARED_WITH_PLUGIN_VM";subpage="app-management/pluginVm/sharedPaths"}else{this.filesMessage_.hidden=true;return}this.filesMessage_.setContent({message:str(msg),action:str("MANAGE_TOAST_BUTTON_LABEL"),hidden:false});this.filesMessage_.setSignalCallback((signal=>{if(signal==="action"){chrome.fileManagerPrivate.openSettingsSubpage(subpage)}}))}}// Copyright 2017 The Chromium Authors. All rights reserved.
class NavigationUma{constructor(volumeManager){this.volumeManager_=volumeManager}exportRootType_(entry,name){const locationInfo=this.volumeManager_.getLocationInfo(entry);if(locationInfo){metrics.recordEnum(name,locationInfo.rootType,VolumeManagerCommon$3.RootTypesForUMA)}}onDirectoryChanged(entry){this.exportRootType_(entry,"ChangeDirectory.RootType")}}// Copyright 2020 The Chromium Authors. All rights reserved.
class FileTypeFiltersController{constructor(fileTypeFilterContainer,directoryModel,recentEntry){this.container_=fileTypeFilterContainer;this.directoryModel_=directoryModel;this.recentEntry_=recentEntry;this.audioFilterButton_=this.createFilterButton_(str("MEDIA_VIEW_AUDIO_ROOT_LABEL"));this.imageFilterButton_=this.createFilterButton_(str("MEDIA_VIEW_IMAGES_ROOT_LABEL"));this.videoFilterButton_=this.createFilterButton_(str("MEDIA_VIEW_VIDEOS_ROOT_LABEL"));this.directoryModel_.addEventListener("directory-changed",this.onCurrentDirectoryChanged_.bind(this))}createFilterButton_(label){const button=util$3.createChild(this.container_,"file-type-filter-button","button");button.textContent=label;button.onclick=this.onFilterButtonClicked_.bind(this);return button}onCurrentDirectoryChanged_(event){this.container_.hidden=!(event.newDirEntry==this.recentEntry_);if(event.previousDirEntry==this.recentEntry_&&event.newDirEntry!=this.recentEntry_){this.audioFilterButton_.classList.toggle("active",false);this.imageFilterButton_.classList.toggle("active",false);this.videoFilterButton_.classList.toggle("active",false)}}onFilterButtonClicked_(event){this.audioFilterButton_.classList.toggle("active",event.target==this.audioFilterButton_?undefined:false);this.imageFilterButton_.classList.toggle("active",event.target==this.imageFilterButton_?undefined:false);this.videoFilterButton_.classList.toggle("active",event.target==this.videoFilterButton_?undefined:false);this.refreshRecentView_()}refreshRecentView_(){let fileType=chrome.fileManagerPrivate.RecentFileType.ALL;if(this.audioFilterButton_.classList.contains("active")){fileType=chrome.fileManagerPrivate.RecentFileType.AUDIO}else if(this.imageFilterButton_.classList.contains("active")){fileType=chrome.fileManagerPrivate.RecentFileType.IMAGE}else if(this.videoFilterButton_.classList.contains("active")){fileType=chrome.fileManagerPrivate.RecentFileType.VIDEO}this.recentEntry_.recentFileType=fileType;this.directoryModel_.rescan(false)}}// Copyright 2014 The Chromium Authors. All rights reserved.
class DialogActionController{constructor(dialogType,dialogFooter,directoryModel,metadataModel,volumeManager,fileFilter,namingController,fileSelectionHandler,launchParam){this.dialogType_=dialogType;this.dialogFooter_=dialogFooter;this.directoryModel_=directoryModel;this.metadataModel_=metadataModel;this.volumeManager_=volumeManager;this.fileFilter_=fileFilter;this.namingController_=namingController;this.fileSelectionHandler_=fileSelectionHandler;this.fileTypes_=launchParam.typeList||[];this.allowedPaths_=launchParam.allowedPaths;this.onCancelBound_=this.processCancelAction_.bind(this);dialogFooter.okButton.addEventListener("click",this.processOKAction_.bind(this));dialogFooter.cancelButton.addEventListener("click",this.onCancelBound_);dialogFooter.newFolderButton.addEventListener("click",this.processNewFolderAction_.bind(this));dialogFooter.fileTypeSelector.addEventListener("change",this.onFileTypeFilterChanged_.bind(this));dialogFooter.filenameInput.addEventListener("input",this.updateOkButton_.bind(this));fileSelectionHandler.addEventListener(FileSelectionHandler.EventType.CHANGE_THROTTLED,this.onFileSelectionChanged_.bind(this));volumeManager.addEventListener("drive-connection-changed",this.updateOkButton_.bind(this));dialogFooter.initFileTypeFilter(this.fileTypes_,launchParam.includeAllFiles);this.onFileTypeFilterChanged_();this.newFolderCommand_=$("new-folder");this.newFolderCommand_.addEventListener("disabledChange",this.updateNewFolderButton_.bind(this))}processOKActionForSaveDialog_(){const selection=this.fileSelectionHandler_.selection;if(selection.directoryCount===1&&selection.fileCount===0){this.directoryModel_.changeDirectoryEntry(selection.entries[0]);return}this.updateExtensionForSelectedFileType_(true);const filename=this.dialogFooter_.filenameInput.value;if(!filename){throw new Error("Missing filename!")}this.namingController_.validateFileNameForSaving(filename).then((url=>{this.selectFilesAndClose_({urls:[url],multiple:false,filterIndex:this.dialogFooter_.selectedFilterIndex})})).catch((error=>{if(error instanceof Error){console.error(error.stack&&error)}}))}processOKAction_(){if(this.dialogFooter_.okButton.disabled){throw new Error("Disabled!")}if(this.dialogType_===DialogType.SELECT_SAVEAS_FILE){this.processOKActionForSaveDialog_();return}const files=[];const selectedIndexes=this.directoryModel_.getFileListSelection().selectedIndexes;if(DialogType.isFolderDialog(this.dialogType_)&&selectedIndexes.length===0){const url=this.directoryModel_.getCurrentDirEntry().toURL();const singleSelection={urls:[url],multiple:false,filterIndex:this.dialogFooter_.selectedFilterIndex};this.selectFilesAndClose_(singleSelection);return}if(!selectedIndexes.length){throw new Error("Nothing selected!")}const dm=this.directoryModel_.getFileList();for(let i=0;i<selectedIndexes.length;i++){const entry=dm.item(selectedIndexes[i]);if(!entry){console.error("Error locating selected file at index: "+i);continue}files.push(entry.toURL())}if(this.dialogType_===DialogType.SELECT_OPEN_MULTI_FILE){const multipleSelection={urls:files,multiple:true};this.selectFilesAndClose_(multipleSelection);return}if(files.length>1){throw new Error("Too many files selected!")}const selectedEntry=dm.item(selectedIndexes[0]);if(DialogType.isFolderDialog(this.dialogType_)){if(!selectedEntry.isDirectory){throw new Error("Selected entry is not a folder!")}}else if(this.dialogType_===DialogType.SELECT_OPEN_FILE){if(!selectedEntry.isFile){throw new Error("Selected entry is not a file!")}}const singleSelection={urls:[files[0]],multiple:false,filterIndex:this.dialogFooter_.selectedFilterIndex};this.selectFilesAndClose_(singleSelection)}processCancelAction_(){chrome.fileManagerPrivate.cancelDialog();window.close()}processNewFolderAction_(){this.newFolderCommand_.canExecuteChange(this.dialogFooter_.newFolderButton);this.newFolderCommand_.execute(this.dialogFooter_.newFolderButton)}updateNewFolderButton_(){this.dialogFooter_.newFolderButton.disabled=this.newFolderCommand_.disabled}selectFilesAndClose_(selection){const currentRootType=this.directoryModel_.getCurrentRootType();const onFileSelected=()=>{if(!chrome.runtime.lastError){setTimeout(window.close.bind(window),0)}};if(this.dialogType_==DialogType.SELECT_OPEN_FILE||this.dialogType_==DialogType.SELECT_OPEN_MULTI_FILE){metrics.recordEnum("OpenFiles.RootType",currentRootType,VolumeManagerCommon$3.RootTypesForUMA)}if(selection.multiple){chrome.fileManagerPrivate.selectFiles(selection.urls,this.allowedPaths_===AllowedPaths$1.NATIVE_PATH,onFileSelected)}else{chrome.fileManagerPrivate.selectFile(selection.urls[0],selection.filterIndex,this.dialogType_!==DialogType.SELECT_SAVEAS_FILE,this.allowedPaths_===AllowedPaths$1.NATIVE_PATH,onFileSelected)}}regexpForCurrentFilter_(){const selectedIndex=this.dialogFooter_.selectedFilterIndex;if(selectedIndex<1){return null}return new RegExp("\\.("+this.fileTypes_[selectedIndex-1].extensions.join("|")+")$","i")}updateExtensionForSelectedFileType_(forConfirm){const regexp=this.regexpForCurrentFilter_();if(!regexp){return}let filename=this.dialogFooter_.filenameInput.value;if(!filename||regexp.test(filename)){return}const selectedIndex=this.dialogFooter_.selectedFilterIndex;assert(selectedIndex>0);const newExtension=this.fileTypes_[selectedIndex-1].extensions[0];if(!newExtension){return}const extensionIndex=filename.lastIndexOf(".");if(extensionIndex<0){if(!forConfirm){return}filename=`${filename}.${newExtension}`}else{if(forConfirm){return}filename=`${filename.substr(0,extensionIndex)}.${newExtension}`}this.dialogFooter_.filenameInput.value=filename;this.dialogFooter_.selectTargetNameInFilenameInput()}onFileTypeFilterChanged_(){this.fileFilter_.removeFilter("fileType");const regexp=this.regexpForCurrentFilter_();if(!regexp){return}const filter=entry=>entry.isDirectory||regexp.test(entry.name);this.fileFilter_.addFilter("fileType",filter);if(this.dialogType_===DialogType.SELECT_SAVEAS_FILE){this.updateExtensionForSelectedFileType_(false)}}onFileSelectionChanged_(){const selection=this.fileSelectionHandler_.selection;if(this.dialogType_===DialogType.SELECT_SAVEAS_FILE&&selection.totalCount===1&&selection.entries[0].isFile&&this.dialogFooter_.filenameInput.value!==selection.entries[0].name){this.dialogFooter_.filenameInput.value=selection.entries[0].name}this.updateOkButton_();if(!this.dialogFooter_.okButton.disabled){util$3.testSendMessage("dialog-ready")}}updateOkButton_(){const selection=this.fileSelectionHandler_.selection;if(this.dialogType_===DialogType.FULL_PAGE){this.dialogFooter_.okButton.disabled=false;return}if(DialogType.isFolderDialog(this.dialogType_)){this.dialogFooter_.okButton.disabled=selection.directoryCount>1||selection.fileCount!==0;return}if(this.dialogType_===DialogType.SELECT_SAVEAS_FILE){if(selection.directoryCount===1&&selection.fileCount===0){this.dialogFooter_.okButtonLabel.textContent=str("OPEN_LABEL");this.dialogFooter_.okButton.disabled=false}else{this.dialogFooter_.okButtonLabel.textContent=str("SAVE_LABEL");this.dialogFooter_.okButton.disabled=this.directoryModel_.isReadOnly()||!this.dialogFooter_.filenameInput.value||!this.fileSelectionHandler_.isAvailable()}return}if(this.dialogType_===DialogType.SELECT_OPEN_FILE){this.dialogFooter_.okButton.disabled=selection.directoryCount!==0||selection.fileCount!==1||!this.fileSelectionHandler_.isAvailable();return}if(this.dialogType_===DialogType.SELECT_OPEN_MULTI_FILE){this.dialogFooter_.okButton.disabled=selection.directoryCount!==0||selection.fileCount===0||!this.fileSelectionHandler_.isAvailable();return}assertNotReached("Unknown dialog type.")}}// Copyright 2014 The Chromium Authors. All rights reserved.
class SearchController{constructor(searchBox,locationLine,directoryModel,volumeManager,taskController,a11y){this.searchBox_=searchBox;this.locationLine_=locationLine;this.directoryModel_=directoryModel;this.volumeManager_=volumeManager;this.taskController_=taskController;this.lastAutocompleteQuery_="";this.autocompleteSuggestionsBusy_=false;this.a11y_=a11y;searchBox.addEventListener(SearchBox.EventType.TEXT_CHANGE,this.onTextChange_.bind(this));searchBox.addEventListener(SearchBox.EventType.ITEM_SELECT,this.onItemSelect_.bind(this));directoryModel.addEventListener("directory-changed",this.clear.bind(this))}get currentLocationInfo_(){const entry=this.directoryModel_.getCurrentDirEntry();return entry&&this.volumeManager_.getLocationInfo(entry)}get isOnDrive_(){const currentLocationInfo=this.currentLocationInfo_;return currentLocationInfo&&currentLocationInfo.isDriveBased}clear(opt_event){this.directoryModel_.clearLastSearchQuery();this.searchBox_.clear();if(opt_event){const isMyFiles=opt_event.newDirEntry&&opt_event.newDirEntry.rootType===VolumeManagerCommon$3.RootType.MY_FILES;this.searchBox_.setHidden(isMyFiles)}}setSearchQuery(searchQuery){this.searchBox_.inputElement.focus();this.searchBox_.inputElement.value=searchQuery;this.onTextChange_();if(this.isOnDrive_){this.onItemSelect_()}}onTextChange_(){const searchString=this.searchBox_.inputElement.value.trimLeft();if(!this.isOnDrive_){this.search_(searchString);return}if(this.directoryModel_.isSearching()&&this.directoryModel_.getLastSearchQuery()!=searchString){this.directoryModel_.search("",(()=>{}),(()=>{}))}this.requestAutocompleteSuggestions_()}requestAutocompleteSuggestions_(){const searchString=this.searchBox_.inputElement.value.trimLeft();this.lastAutocompleteQuery_=searchString;if(this.autocompleteSuggestionsBusy_){return}if(!searchString){const msg=str("SEARCH_A11Y_CLEAR_SEARCH");this.a11y_.speakA11yMessage(msg);this.searchBox_.autocompleteList.suggestions=[];return}const headerItem={isHeaderItem:true,searchQuery:searchString};if(!this.searchBox_.autocompleteList.dataModel||this.searchBox_.autocompleteList.dataModel.length==0){this.searchBox_.autocompleteList.suggestions=[headerItem]}else{this.searchBox_.autocompleteList.dataModel.splice(0,1,headerItem)}this.searchBox_.autocompleteList.syncWidthAndPositionToInput();this.autocompleteSuggestionsBusy_=true;chrome.fileManagerPrivate.searchDriveMetadata({query:searchString,types:chrome.fileManagerPrivate.SearchType.ALL,maxResults:4},(suggestions=>{this.autocompleteSuggestionsBusy_=false;if(searchString!=this.lastAutocompleteQuery_){this.requestAutocompleteSuggestions_();return}this.searchBox_.autocompleteList.suggestions=[headerItem].concat(suggestions)}))}onItemSelect_(){const selectedItem=this.searchBox_.autocompleteList.selectedItem;this.lastAutocompleteQuery_="";this.searchBox_.autocompleteList.suggestions=[];if(!selectedItem||selectedItem.isHeaderItem){const query=selectedItem?selectedItem.searchQuery:this.searchBox_.inputElement.value;this.search_(query);return}this.clear();const entry=selectedItem.entry;if(entry.isDirectory){this.directoryModel_.changeDirectoryEntry(entry);return}entry.getParent((parentEntry=>{const locationInfo=this.volumeManager_.getLocationInfo(parentEntry);if(!locationInfo||locationInfo.isRootEntry&&locationInfo.rootType===VolumeManagerCommon$3.RootType.DRIVE_OTHER){this.taskController_.executeEntryTask(entry);return}this.directoryModel_.changeDirectoryEntry(parentEntry,(()=>{this.directoryModel_.selectEntry(entry);this.taskController_.executeEntryTask(entry)}))}))}search_(searchString){if(!searchString){const msg=str("SEARCH_A11Y_CLEAR_SEARCH");this.a11y_.speakA11yMessage(msg)}const onSearchRescan=function(){const fileList=this.directoryModel_.getFileList();const count=fileList.getFileCount()+fileList.getFolderCount();const msgId=count===0?"SEARCH_A11Y_NO_RESULT":"SEARCH_A11Y_RESULT";const msg=strf(msgId,searchString);this.a11y_.speakA11yMessage(msg);if(this.isOnDrive_){const locationInfo=this.currentLocationInfo_;const rootEntry=locationInfo.volumeInfo.displayRoot;if(rootEntry){this.locationLine_.show(rootEntry)}}};const onClearSearch=function(){this.locationLine_.show(this.directoryModel_.getCurrentDirEntry())};this.directoryModel_.search(searchString,onSearchRescan.bind(this),onClearSearch.bind(this))}}// Copyright 2015 The Chromium Authors. All rights reserved.
class ColumnVisibilityController{constructor(ui,directoryModel,volumeManager){this.directoryModel_=directoryModel;this.volumeManager_=volumeManager;this.ui_=ui;directoryModel.addEventListener("directory-changed",this.onDirectoryChanged_.bind(this))}onDirectoryChanged_(event){const isImportEligible=importer.isBeneathMediaDir(event.newDirEntry,this.volumeManager_)&&!!this.volumeManager_.getCurrentProfileVolumeInfo(VolumeManagerCommon$3.VolumeType.DRIVE);this.ui_.listContainer.table.setImportStatusVisible(isImportEligible);this.ui_.listContainer.grid.setImportStatusVisible(isImportEligible)}}// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class CommandButton{constructor(){this.command_=null}static decorate(element){Object.getOwnPropertyNames(CommandButton.prototype).forEach((name=>{if(name!=="constructor"){element[name]=CommandButton.prototype[name]}}));element=element;element.decorate();return element}decorate(){let commandId;if(commandId=this.getAttribute("command")){this.setCommand(commandId)}this.addEventListener("click",this.handleClick_.bind(this))}getCommand(){return this.command_}setCommand(command){if(this.command_){this.command_.removeEventListener("labelChange",this);this.command_.removeEventListener("disabledChange",this);this.command_.removeEventListener("hiddenChange",this)}if(typeof command=="string"){assert(command[0]=="#");command=this.ownerDocument.body.querySelector(command);decorate(command,Command)}this.command_=command;if(command){if(command.id){this.setAttribute("command","#"+command.id)}this.setLabel(command.label);this.disabled=command.disabled;this.hidden=command.hidden;this.command_.addEventListener("labelChange",this);this.command_.addEventListener("disabledChange",this);this.command_.addEventListener("hiddenChange",this)}}getLabel(){return this.command_?this.command_.label:""}setLabel(label){if(!this.firstElementChild){this.textContent=label}}handleClick_(e){if(!this.disabled&&this.command_){this.command_.execute(this)}}handleEvent(e){switch(e.type){case"disabledChange":this.disabled=this.command_.disabled;break;case"hiddenChange":this.hidden=this.command_.hidden;break;case"labelChange":this.setLabel(this.command_.label);break}}}CommandButton.prototype.disabled;CommandButton.prototype.hidden;CommandButton.prototype.__proto__=HTMLButtonElement.prototype;// Copyright 2019 The Chromium Authors. All rights reserved.
const appUtil={};appUtil.saveAppState=()=>{if(!window.appState){return}const items={};items[window.appID]=JSON.stringify(window.appState);chrome.storage.local.set(items,(()=>{if(chrome.runtime.lastError){console.error("Failed to save app state: "+chrome.runtime.lastError.message)}}))};appUtil.updateAppState=(currentDirectoryURL,selectionURL,opt_param)=>{window.appState=window.appState||{};if(opt_param!==undefined&&opt_param!==null){window.appState.params=opt_param}if(currentDirectoryURL!==null){window.appState.currentDirectoryURL=currentDirectoryURL}if(selectionURL!==null){window.appState.selectionURL=selectionURL}appUtil.saveAppState()};appUtil.AppCache=()=>{};appUtil.AppCache.KEY="AppCache";appUtil.AppCache.CAPACITY=100;appUtil.AppCache.LIFETIME=30*24*60*60*1e3;appUtil.AppCache.getValue=(key,callback)=>{appUtil.AppCache.read_((map=>{const entry=map[key];callback(entry&&entry.value)}))};appUtil.AppCache.update=(key,value,opt_lifetime)=>{appUtil.AppCache.read_((map=>{if(value!=null){map[key]={value:value,expire:Date.now()+(opt_lifetime||appUtil.AppCache.LIFETIME)}}else if(key in map){delete map[key]}else{return}appUtil.AppCache.cleanup_(map);appUtil.AppCache.write_(map)}))};appUtil.AppCache.read_=callback=>{chrome.storage.local.get(appUtil.AppCache.KEY,(values=>{const json=values[appUtil.AppCache.KEY];if(json){try{callback(JSON.parse(json))}catch(e){}}callback({})}))};appUtil.AppCache.write_=map=>{const items={};items[appUtil.AppCache.KEY]=JSON.stringify(map);chrome.storage.local.set(items)};appUtil.AppCache.cleanup_=map=>{const keys=[];for(const key in map){if(map.hasOwnProperty(key)){keys.push(key)}}keys.sort(((a,b)=>map[a].expire-map[b].expire));const cutoff=Date.now();let obsolete=0;while(obsolete<keys.length&&map[keys[obsolete]].expire<cutoff){obsolete++}const overCapacity=Math.max(0,keys.length-appUtil.AppCache.CAPACITY);const itemsToDelete=Math.max(obsolete,overCapacity);for(let i=0;i!=itemsToDelete;i++){delete map[keys[i]]}};appUtil.getVolumeManager=async()=>{const backgroundWindow=new Promise((resolve=>chrome.runtime.getBackgroundPage(resolve)));const backgroundPage=(await backgroundWindow).background;return backgroundPage.getVolumeManager()};// Copyright 2014 The Chromium Authors. All rights reserved.
class AppStateController{constructor(dialogType){this.viewOptionStorageKey_="file-manager-"+dialogType;this.directoryModel_=null;this.ui_=null;this.viewOptions_=null;this.fileListSortField_=AppStateController.DEFAULT_SORT_FIELD;this.fileListSortDirection_=AppStateController.DEFAULT_SORT_DIRECTION}loadInitialViewOptions(){return new Promise(((fulfill,reject)=>{chrome.storage.local.get(this.viewOptionStorageKey_,(values=>{if(chrome.runtime.lastError){reject("Failed to load view options: "+chrome.runtime.lastError.message)}else{fulfill(values)}}))})).then((values=>{this.viewOptions_={};const value=values[this.viewOptionStorageKey_];if(!value){return}try{this.viewOptions_=JSON.parse(value)}catch(ignore){}if(window.appState&&window.appState.viewOptions){for(const key in window.appState.viewOptions){if(window.appState.viewOptions.hasOwnProperty(key)){this.viewOptions_[key]=window.appState.viewOptions[key]}}}})).catch((error=>{this.viewOptions_={};console.error(error)}))}initialize(ui,directoryModel){assert(this.viewOptions_);this.ui_=ui;this.directoryModel_=directoryModel;ui.listContainer.table.addEventListener("column-resize-end",this.saveViewOptions.bind(this));directoryModel.getFileList().addEventListener("sorted",this.onFileListSorted_.bind(this));directoryModel.getFileFilter().addEventListener("changed",this.onFileFilterChanged_.bind(this));directoryModel.addEventListener("directory-changed",this.onDirectoryChanged_.bind(this));this.ui_.setCurrentListType(this.viewOptions_.listType||ListContainer.ListType.DETAIL);if(this.viewOptions_.sortField){this.fileListSortField_=this.viewOptions_.sortField}if(this.viewOptions_.sortDirection){this.fileListSortDirection_=this.viewOptions_.sortDirection}this.directoryModel_.getFileList().sort(this.fileListSortField_,this.fileListSortDirection_);if(this.viewOptions_.isAllAndroidFoldersVisible){this.directoryModel_.getFileFilter().setAllAndroidFoldersVisible(true)}if(this.viewOptions_.columnConfig){this.ui_.listContainer.table.columnModel.restoreColumnConfig(this.viewOptions_.columnConfig)}}saveViewOptions(){const prefs={sortField:this.fileListSortField_,sortDirection:this.fileListSortDirection_,columnConfig:{},listType:this.ui_.listContainer.currentListType,isAllAndroidFoldersVisible:this.directoryModel_.getFileFilter().isAllAndroidFoldersVisible()};const cm=this.ui_.listContainer.table.columnModel;prefs.columnConfig=cm.exportColumnConfig();const items={};items[this.viewOptionStorageKey_]=JSON.stringify(prefs);chrome.storage.local.set(items,(()=>{if(chrome.runtime.lastError){console.error("Failed to save view options: "+chrome.runtime.lastError.message)}}));if(window.appState){window.appState.viewOptions=prefs;appUtil.saveAppState()}}onFileListSorted_(){const currentDirectory=this.directoryModel_.getCurrentDirEntry();if(!currentDirectory){return}if(!util$3.isRecentRoot(currentDirectory)){const currentSortStatus=this.directoryModel_.getFileList().sortStatus;this.fileListSortField_=currentSortStatus.field;this.fileListSortDirection_=currentSortStatus.direction}this.saveViewOptions()}onFileFilterChanged_(){const isAllAndroidFoldersVisible=this.directoryModel_.getFileFilter().isAllAndroidFoldersVisible();if(this.viewOptions_.isAllAndroidFoldersVisible!==isAllAndroidFoldersVisible){this.viewOptions_.isAllAndroidFoldersVisible=isAllAndroidFoldersVisible;this.saveViewOptions()}}onDirectoryChanged_(event){if(!event.newDirEntry){return}const isOnRecent=util$3.isRecentRoot(event.newDirEntry);const isOnRecentBefore=event.previousDirEntry&&util$3.isRecentRoot(event.previousDirEntry);if(isOnRecent!=isOnRecentBefore){if(isOnRecent){this.directoryModel_.getFileList().sort(AppStateController.DEFAULT_SORT_FIELD,AppStateController.DEFAULT_SORT_DIRECTION)}else{this.directoryModel_.getFileList().sort(this.fileListSortField_,this.fileListSortDirection_)}}appUtil.updateAppState(this.directoryModel_.getCurrentDirEntry()?this.directoryModel_.getCurrentDirEntry().toURL():"","","")}}AppStateController.DEFAULT_SORT_FIELD="modificationTime";AppStateController.DEFAULT_SORT_DIRECTION="desc";// Copyright 2014 The Chromium Authors. All rights reserved.
class MainWindowComponent{constructor(dialogType,ui,volumeManager,directoryModel,fileFilter,selectionHandler,namingController,appStateController,taskController){this.dialogType_=dialogType;this.ui_=ui;this.volumeManager_=volumeManager;this.directoryModel_=directoryModel;this.fileFilter_=fileFilter;this.selectionHandler_=selectionHandler;this.namingController_=namingController;this.appStateController_=appStateController;this.taskController_=taskController;this.pressingTab_=false;ui.listContainer.element.addEventListener("keydown",this.onListKeyDown_.bind(this));ui.directoryTree.addEventListener("keydown",this.onDirectoryTreeKeyDown_.bind(this));ui.listContainer.element.addEventListener(ListContainer.EventType.TEXT_SEARCH,this.onTextSearch_.bind(this));ui.listContainer.table.list.addEventListener("dblclick",this.onDoubleClick_.bind(this));ui.listContainer.grid.addEventListener("dblclick",this.onDoubleClick_.bind(this));ui.listContainer.table.list.addEventListener("touchstart",this.handleTouchEvents_.bind(this));ui.listContainer.grid.addEventListener("touchstart",this.handleTouchEvents_.bind(this));ui.listContainer.table.list.addEventListener("touchend",this.handleTouchEvents_.bind(this));ui.listContainer.grid.addEventListener("touchend",this.handleTouchEvents_.bind(this));ui.listContainer.table.list.addEventListener("touchmove",this.handleTouchEvents_.bind(this));ui.listContainer.grid.addEventListener("touchmove",this.handleTouchEvents_.bind(this));ui.listContainer.table.list.addEventListener("focus",this.onFileListFocus_.bind(this));ui.listContainer.grid.addEventListener("focus",this.onFileListFocus_.bind(this));ui.locationLine.addEventListener("pathclick",this.onBreadcrumbClick_.bind(this));ui.toggleViewButton.addEventListener("click",this.onToggleViewButtonClick_.bind(this));directoryModel.addEventListener("directory-changed",this.onDirectoryChanged_.bind(this));volumeManager.addEventListener("drive-connection-changed",this.onDriveConnectionChanged_.bind(this));this.onDriveConnectionChanged_();document.addEventListener("keydown",this.onKeyDown_.bind(this));document.addEventListener("keyup",this.onKeyUp_.bind(this));window.addEventListener("focus",this.onWindowFocus_.bind(this));this.tapHandler_=new FileTapHandler}handleTouchEvents_(event){this.tapHandler_.handleTouchEvents(event,-1,((e,index,eventType)=>{if(eventType==FileTapHandler.TapEvent.TAP){if(e.target.classList.contains("detail-checkmark")){return false}return this.handleOpenDefault(event,true)}return false}))}onBreadcrumbClick_(event){this.directoryModel_.changeDirectoryEntry(event.entry)}onFileListFocus_(){if(this.pressingTab_){const selection=this.selectionHandler_.selection;if(selection&&selection.totalCount===0){const selectionModel=this.directoryModel_.getFileListSelection();const targetIndex=selectionModel.anchorIndex&&selectionModel.anchorIndex!==-1?selectionModel.anchorIndex:0;this.directoryModel_.selectIndex(targetIndex)}}}onDoubleClick_(event){this.handleOpenDefault(event,false)}handleOpenDefault(event,clearSelectionAfterLaunch){if(this.namingController_.isRenamingInProgress()){return false}const listItem=this.ui_.listContainer.findListItemForNode(event.touchedElement||event.srcElement);const selection=this.selectionHandler_.selection;if(!listItem||!listItem.selected||selection.totalCount!=1){return false}const entry=selection.entries[0];if(entry.isDirectory){this.directoryModel_.changeDirectoryEntry(entry)}else{return this.acceptSelection_(clearSelectionAfterLaunch)}return false}acceptSelection_(clearSelectionAfterLaunch){const selection=this.selectionHandler_.selection;if(this.dialogType_==DialogType.FULL_PAGE){this.taskController_.getFileTasks().then((tasks=>{tasks.executeDefault();if(clearSelectionAfterLaunch){this.directoryModel_.clearSelection()}})).catch((error=>{if(error){console.error(error.stack||error)}}));return true}if(!this.ui_.dialogFooter.okButton.disabled){this.ui_.dialogFooter.okButton.click();return true}return false}onToggleViewButtonClick_(event){const listType=this.ui_.listContainer.currentListType===ListContainer.ListType.DETAIL?ListContainer.ListType.THUMBNAIL:ListContainer.ListType.DETAIL;this.ui_.setCurrentListType(listType);const msgId=listType===ListContainer.ListType.DETAIL?"FILE_LIST_CHANGED_TO_LIST_VIEW":"FILE_LIST_CHANGED_TO_LIST_THUMBNAIL_VIEW";this.ui_.speakA11yMessage(str(msgId));this.appStateController_.saveViewOptions();this.ui_.listContainer.focus();metrics.recordEnum("ToggleFileListType",listType,ListContainer.ListTypesForUMA)}onKeyDown_(event){if(event.keyCode===9){this.pressingTab_=true}if(event.srcElement===this.ui_.listContainer.renameInput){return}switch(util$3.getKeyModifiers(event)+event.key){case"Escape":case"Ctrl-w":if(this.dialogType_!=DialogType.FULL_PAGE){event.preventDefault();this.ui_.dialogFooter.cancelButton.click()}break}}onKeyUp_(event){if(event.keyCode===9){this.pressingTab_=false}}onDirectoryTreeKeyDown_(event){if(util$3.getKeyModifiers(event)+event.key==="Enter"){const selectedItem=this.ui_.directoryTree.selectedItem;if(!selectedItem){return}selectedItem.activate();if(this.dialogType_!==DialogType.FULL_PAGE&&!selectedItem.hasAttribute("renaming")&&util$3.isSameEntry(this.directoryModel_.getCurrentDirEntry(),selectedItem.entry)&&!this.ui_.dialogFooter.okButton.disabled){this.ui_.dialogFooter.okButton.click()}}}onListKeyDown_(event){switch(util$3.getKeyModifiers(event)+event.key){case"Backspace":event.preventDefault();const components=this.ui_.locationLine.getCurrentPathComponents();if(components.length<2){break}const parentPathComponent=components[components.length-2];parentPathComponent.resolveEntry().then((parentEntry=>{this.directoryModel_.changeDirectoryEntry(parentEntry)}));break;case"Enter":const selection=this.selectionHandler_.selection;if(selection.totalCount===1&&selection.entries[0].isDirectory&&!DialogType.isFolderDialog(this.dialogType_)){const item=this.ui_.listContainer.currentList.getListItemByIndex(selection.indexes[0]);if(item&&!item.hasAttribute("renaming")){event.preventDefault();this.directoryModel_.changeDirectoryEntry(selection.entries[0])}}else if(this.acceptSelection_(false)){event.preventDefault()}break}}onTextSearch_(){const text=this.ui_.listContainer.textSearchState.text;const dm=this.directoryModel_.getFileList();for(let index=0;index<dm.length;++index){const name=dm.item(index).name;if(name.substring(0,text.length).toLowerCase()==text){this.ui_.listContainer.currentList.selectionModel.selectedIndexes=[index];return}}this.ui_.listContainer.textSearchState.text=""}onDirectoryChanged_(event){event=event;const newVolumeInfo=event.newDirEntry?this.volumeManager_.getVolumeInfo(event.newDirEntry):null;if(newVolumeInfo&&newVolumeInfo.error){this.ui_.element.setAttribute("unformatted","");if(newVolumeInfo.error===VolumeManagerCommon$3.VolumeError.UNSUPPORTED_FILESYSTEM){this.ui_.formatPanelError.textContent=str("UNSUPPORTED_FILESYSTEM_WARNING")}else{this.ui_.formatPanelError.textContent=str("UNKNOWN_FILESYSTEM_WARNING")}}else{this.ui_.element.removeAttribute("unformatted")}if(event.newDirEntry){this.ui_.locationLine.show(event.newDirEntry);if(this.dialogType_===DialogType.FULL_PAGE){const locationInfo=this.volumeManager_.getLocationInfo(event.newDirEntry);if(locationInfo){const label=util$3.getEntryLabel(locationInfo,event.newDirEntry);document.title=`${str("FILEMANAGER_APP_NAME")} - ${label}`}else{console.error("Could not find location info for entry: "+event.newDirEntry.fullPath)}}}else{this.ui_.locationLine.hide()}}onDriveConnectionChanged_(){const connection=this.volumeManager_.getDriveConnectionState();this.ui_.dialogContainer.setAttribute("connection",connection.type)}onWindowFocus_(){if(util$3.isRecentRootType(this.directoryModel_.getCurrentRootType())){this.directoryModel_.rescan(true)}}}// Copyright 2015 The Chromium Authors. All rights reserved.
Polymer({_template:html`<!--css-build:shadow--><!--_html_template_start_--><style scope="files-icon-button">:host {
  background-position: center;
        background-repeat: no-repeat;
        border-radius: 2px;
        cursor: pointer;
        display: inline-block;
        height: 32px;
        outline: none;  
        position: relative;
        width: 32px;
}

:host(.keyboard-focus) {
  box-shadow: 0 0 0 1px rgba(66, 133, 244, 0.5);
}

files-toggle-ripple {
  height: 28px;
        left: 2px;
        pointer-events: none;
        position: absolute;
        top: 2px;
        width: 28px;
}

</style>

    <files-ripple hidden="[[toggles]]"></files-ripple>
    <files-toggle-ripple activated="[[active]]"></files-toggle-ripple>
<!--_html_template_end_-->`,is:"files-icon-button",hostAttributes:{role:"button",tabindex:0},behaviors:[IronButtonState,IronControlState],observers:["_focusedChanged(receivedFocusFromKeyboard)"],_focusedChanged:function(receivedFocusFromKeyboard){if(receivedFocusFromKeyboard){this.classList.add("keyboard-focus")}else{this.classList.remove("keyboard-focus")}}});
// Copyright 2016 The Chromium Authors. All rights reserved.
Polymer({_template:html`<!--css-build:shadow--><!--_html_template_start_--><style scope="files-metadata-entry">div {
  margin: 0;
}

#box {
  display: flex;
        margin: 12px 0;
        min-height: 14px;
        width: 320px;
}

:host([files-ng]) #box {
  line-height: 20px;
        margin: 10px 0;
}

#box[hidden] {
  display: none;
}

#key {
  color: white;
        font-weight: 500;
        margin-inline-end: 16px;
        margin-inline-start: 32px;
        overflow-wrap: break-word;
        vertical-align: bottom;
        width: 96px;
}

#value {
  color: white;
        opacity: 0.8;
        overflow-wrap: break-word;
        vertical-align: bottom;
        width: 160px;
}

#value[loading]::after {
  animation: ellipsis 1s steps(4,end) 100ms infinite;
        content: '…';
        display: inline-block;
        overflow: hidden;
        transform: scale(2.5) translate(0, 1px);
        transform-origin: left bottom;
        vertical-align: bottom;
        width: 0;
}

#value span {
  display: inline-block;
        overflow-wrap: anywhere;
}

@keyframes ellipsis {
to {
  width: 0.93em;
}

}

@media only screen and (max-width: 720px) {
#box {
  width: 240px;
}

#key {
  margin-inline-end: 8px;
          margin-inline-start: 12px;
          width: 80px;
}

#value {
  width: 140px;
}

}

</style>
    <div id="box" hidden="[[!value]]">
      <div id="key">[[key]]</div>
      <div id="value" loading$="{{loading}}">
        <div id="valueContainer" hidden="[[loading]]"></div>
      </div>
    </div>
<!--_html_template_end_-->`,is:"files-metadata-entry",properties:{key:{type:String,reflectToAttribute:true},value:{type:String,reflectToAttribute:true,observer:"valueChanged_"},loading:{type:Boolean,reflectToAttribute:true,value:false},isPath:{type:Boolean,value:false}},created:function(){this.setAttribute("files-ng","")},valueChanged_:function(newValue){const container=this.$.valueContainer;if(!newValue){container.textContent="";return}if(this.isPath){container.textContent="";const components=newValue.split("/");for(let i=0;i<components.length;i++){const span=document.createElement("span");span.textContent=i<components.length-1?components[i]+"/":components[i];container.appendChild(span)}}else{container.textContent=newValue}}});
// Copyright 2016 The Chromium Authors. All rights reserved.
Polymer({_template:html`<!--css-build:shadow--><!--_html_template_start_--><style scope="files-metadata-box">div {
  margin: 0;
        padding: 0;
}

div[hidden] {
  display: none;
}

#box {
  display: block;
        margin: 0;
        overflow: auto;
        padding: 0;
        width: 320px;
}

:host([files-ng]) #box {
  padding-top: 16px;
}

:host(:not([files-ng])) .category {
  color: #E6E6E6;
        font-size: 108%;
        font-weight: 500;
        margin: 12px 32px;
        vertical-align: bottom;
}

:host([files-ng]) .category {
  color: var(--google-grey-200);
        font-family: 'Roboto Medium';
        font-size: 14px;
        line-height: 56px;
        margin-inline-start: 32px;
}

hr {
  border-color: white;
        margin-top: 31px;
        opacity: 0.24;
}

:host([files-ng]) hr {
  border-color: rgba(255, 255, 255, 0.2);
        border-top-width: 1px !important;
        border-width: 0;
        margin-bottom: 8px;
        margin-top: 16px;
}

@media only screen and (max-width: 720px) {
#box {
  width: 240px;
}

.category {
  margin: 12px 12px;
}

}

</style>
    <div id="box">
      <div class="category">General info</div>
      <files-metadata-entry key="Size" value="[[size]]" loading="[[isSizeLoading]]"></files-metadata-entry>
      <files-metadata-entry key="Date modified" value="[[modificationTime]]"></files-metadata-entry>
      <files-metadata-entry key="Type" value="[[mediaMimeType]]"></files-metadata-entry>
      <files-metadata-entry key="File location" value="[[fileLocation]]"></files-metadata-entry>

      <div hidden="[[!hasFileSpecificMetadata_]]">
        <hr>
        <div class="category" hidden="[[!isImage_(type)]]">Image info</div>
        <div class="category" hidden="[[!isAudio_(type)]]">Audio info</div>
        <div class="category" hidden="[[!isVideo_(type)]]">Video info</div>
        <files-metadata-entry key="Dimensions" value="[[dimension_(imageWidth, imageHeight)]]"></files-metadata-entry>
        <files-metadata-entry key="Album" value="[[mediaAlbum]]"></files-metadata-entry>
        <files-metadata-entry key="Title" value="[[mediaTitle]]"></files-metadata-entry>
        <files-metadata-entry key="Artist" value="[[mediaArtist]]"></files-metadata-entry>
        <files-metadata-entry key="Duration" value="[[time2string_(mediaDuration)]]"></files-metadata-entry>
        <files-metadata-entry key="Genre" value="[[mediaGenre]]"></files-metadata-entry>
        <files-metadata-entry key="Track" value="[[mediaTrack]]"></files-metadata-entry>
        <files-metadata-entry key="Device model" value="[[deviceModel_(ifd)]]"></files-metadata-entry>
        <files-metadata-entry key="Device settings" value="[[deviceSettings_(ifd)]]"></files-metadata-entry>
        <files-metadata-entry key="Geography" value="[[geography_(ifd)]]"></files-metadata-entry>
        <files-metadata-entry key="Year recorded" value="[[mediaYearRecorded]]"></files-metadata-entry>
      </div>
    </div>
<!--_html_template_end_-->`,is:"files-metadata-box",properties:{filePath:String,type:String,size:String,modificationTime:String,mediaMimeType:String,fileLocation:String,isSizeLoading:Boolean,ifd:Object,imageWidth:Number,imageHeight:Number,mediaAlbum:String,mediaArtist:String,mediaDuration:Number,mediaGenre:String,mediaTitle:String,mediaTrack:String,mediaYearRecorded:String,hasFileSpecificMetadata_:Boolean,metadata:{type:String,reflectToAttribute:true}},clear:function(keepSizeFields){const reset={type:"",filePath:"",modificationTime:"",hasFileSpecificMetadata_:false,mediaMimeType:"",fileLocation:"",ifd:null,imageWidth:0,imageHeight:0,mediaTitle:"",mediaArtist:"",mediaAlbum:"",mediaDuration:0,mediaGenre:"",mediaTrack:"",mediaYearRecorded:"",metadata:""};if(!keepSizeFields){reset.isSizeLoading=false;reset.size=""}this.setProperties(reset)},isImage_:function(type){return type==="image"},isVideo_:function(type){return type==="video"},isAudio_:function(type){return type==="audio"},setFileSpecificMetadata_:function(){this.hasFileSpecificMetadata_=!!(this.imageWidth&&this.imageHeight||this.mediaTitle||this.mediaArtist||this.mediaAlbum||this.mediaDuration||this.mediaGenre||this.mediaTrack||this.mediaYearRecorded||this.ifd);return this.hasFileSpecificMetadata_},setFileTypeInfo:function(type){this.type=this.setFileSpecificMetadata_()?type:""},metadataRendered:function(type){if(!type){this.metadata=""}else if(!this.metadata){this.metadata=type}else{this.metadata+=" "+type}},time2string_:function(time){if(!time){return""}time=parseInt(time,10);const seconds=time%60;const minutes=Math.floor(time/60)%60;const hours=Math.floor(time/60/60);if(hours===0){return minutes+":"+("0"+seconds).slice(-2)}return hours+":"+("0"+minutes).slice(-2)+("0"+seconds).slice(-2)},dimension_:function(imageWidth,imageHeight){if(imageWidth&&imageHeight){return imageWidth+" x "+imageHeight}return""},deviceModel_:function(ifd){if(!ifd){return""}if(ifd["raw"]){return ifd["raw"]["cameraModel"]||""}const id=272;const model=ifd.image&&ifd.image[id]&&ifd.image[id].value||"";return model.replace(/\0+$/,"").trim()},parseRational_:function(r){const num=parseInt(r[0],10);const den=parseInt(r[1],10);return num/den},geography_:function(ifd){const gps=ifd&&ifd.gps;if(!gps||!gps[1]||!gps[2]||!gps[3]||!gps[4]){return""}const computeCoordinate=value=>this.parseRational_(value[0])+this.parseRational_(value[1])/60+this.parseRational_(value[2])/3600;const latitude=computeCoordinate(gps[2].value)*(gps[1].value==="N\0"?1:-1);const longitude=computeCoordinate(gps[4].value)*(gps[3].value==="E\0"?1:-1);return Number(latitude).toFixed(3)+", "+Number(longitude).toFixed(3)},deviceSettings_:function(ifd){let result="";if(ifd&&ifd["raw"]){result=this.rawDeviceSettings_(ifd["raw"])}else if(ifd){result=this.ifdDeviceSettings_(ifd)}return result},rawDeviceSettings_:function(raw){let result="";const aperture=raw["aperture"]||0;if(aperture){result+="f/"+aperture+" "}const exposureTime=raw["exposureTime"]||0;if(exposureTime){result+=exposureTime+" "}const focalLength=raw["focalLength"]||0;if(focalLength){result+=focalLength+"mm "}const isoSpeed=raw["isoSpeed"]||0;if(isoSpeed){result+="ISO"+isoSpeed+" "}return result.trimEnd()},ifdDeviceSettings_:function(ifd){const exif=ifd["exif"];if(!exif){return""}function parseExifNumber(field){let number=0;if(field&&field.value){if(Array.isArray(field.value)){const denominator=parseInt(field.value[1],10);if(denominator){number=parseInt(field.value[0],10)/denominator}}else{number=parseInt(field.value,10)}if(Number.isNaN(number)){number=0}else if(!Number.isInteger(number)){number=Number(number.toFixed(3).replace(/0+$/,""))}}return number}let result="";const aperture=parseExifNumber(exif[33437]);if(aperture){result+="f/"+aperture+" "}const exposureTime=parseExifNumber(exif[33434]);if(exposureTime){result+=exposureTime+" "}const focalLength=parseExifNumber(exif[37386]);if(focalLength){result+=focalLength+"mm "}const isoSpeed=parseExifNumber(exif[34855]);if(isoSpeed){result+="ISO"+isoSpeed+" "}return result.trimEnd()}});
// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
const FILES_APP_ORIGIN="chrome-extension://hhaomjibdihmijegdhdafkllkbggdgoj";const FilesSafeMedia=Polymer({_template:html`<!--css-build:shadow--><!--_html_template_start_--><style scope="files-safe-media">#content {
  height: 100%;
        width: 100%;
}

#content.audio {
  height: 54px;
}

webview {
  display: inline-block;
        height: 100%;
        width: 100%;
}

</style>
    <div id="content" class$="[[type]]"></div>
<!--_html_template_end_-->`,is:"files-safe-media",properties:{src:{type:String,observer:"onSrcChange_",reflectToAttribute:true},type:{type:String,readonly:true}},listeners:{"src-changed":"onSrcChange_"},sourceFile_:function(){switch(this.type){case"image":return"foreground/elements/files_safe_img_webview_content.html";case"audio":return"foreground/elements/files_safe_audio_webview_content.html";case"video":return"foreground/elements/files_safe_video_webview_content.html";case"html":return"foreground/elements/files_safe_text_webview_content.html";default:console.error("Unsupported type: "+this.type);return""}},onSrcChange_:function(){if(!this.src&&this.webview_){this.$.content.removeChild(this.webview_);this.webview_=null}else if(this.src&&!this.webview_){const webview=document.createElement("webview");this.webview_=webview;webview.partition="trusted";webview.allowtransparency="true";this.$.content.appendChild(webview);webview.addEventListener("contentload",this.onSrcChange_.bind(this));webview.src=this.sourceFile_()}else if(this.src&&this.webview_.contentWindow){const data={};data.type=this.type;data.src=this.src;window.setTimeout((()=>{this.webview_.contentWindow.postMessage(data,FILES_APP_ORIGIN)}))}},created:function(){this.webview_=null},ready:function(){this.addEventListener("focus",(event=>{if(this.type==="audio"||this.type==="video"){if(this.webview_){this.webview_.focus()}}}));window.addEventListener("message",(event=>{if(event.origin!==FILES_APP_ORIGIN){console.log("Unknown origin.");return}if(event.data==="tap-inside"){this.fire("files-safe-media-tap-inside")}else if(event.data==="tap-outside"){this.fire("files-safe-media-tap-outside")}else if(event.data==="webview-loaded"){if(this.webview_){this.webview_.setAttribute("loaded","")}}else if(event.data==="webview-cleared"){if(this.webview_){this.webview_.removeAttribute("loaded")}}else if(event.data==="content-decode-failed"){this.fire("files-safe-media-load-error")}}))}});const template=html`<iron-iconset-svg name="files" size="24">
  <svg>
    <defs>
      <!--
      These icons are copied from Polymer's iron-icons and kept in sorted order.
      See http://goo.gl/Y1OdAq for instructions on adding additional icons.
      -->
      <g id="arrow-back"><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"></path></g>
      <g id="arrow-drop-down"><path d="M7 10l5 5 5-5z"></path></g>
      <g id="autorenew"><path d="M12 6v3l4-4-4-4v3c-4.42 0-8 3.58-8 8 0 1.57.46 3.03 1.24 4.26L6.7 14.8c-.45-.83-.7-1.79-.7-2.8 0-3.31 2.69-6 6-6zm6.76 1.74L17.3 9.2c.44.84.7 1.79.7 2.8 0 3.31-2.69 6-6 6v-3l-4 4 4 4v-3c4.42 0 8-3.58 8-8 0-1.57-.46-3.03-1.24-4.26z"></path></g>
      <g id="close"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path></g>
      <g id="cloud-done"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM10 17l-3.5-3.5 1.41-1.41L10 14.17 15.18 9l1.41 1.41L10 17z"></path></g>
      <g id="cloud-off"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4c-1.48 0-2.85.43-4.01 1.17l1.46 1.46C10.21 6.23 11.08 6 12 6c3.04 0 5.5 2.46 5.5 5.5v.5H19c1.66 0 3 1.34 3 3 0 1.13-.64 2.11-1.56 2.62l1.45 1.45C23.16 18.16 24 16.68 24 15c0-2.64-2.05-4.78-4.65-4.96zM3 5.27l2.75 2.74C2.56 8.15 0 10.77 0 14c0 3.31 2.69 6 6 6h11.73l2 2L21 20.73 4.27 4 3 5.27zM7.73 10l8 8H6c-2.21 0-4-1.79-4-4s1.79-4 4-4h1.73z"></path></g>
      <g id="cloud-queue"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM19 18H6c-2.21 0-4-1.79-4-4s1.79-4 4-4h.71C7.37 7.69 9.48 6 12 6c3.04 0 5.5 2.46 5.5 5.5v.5H19c1.66 0 3 1.34 3 3s-1.34 3-3 3z"></path></g>
      <g id="cloud-upload"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z"></path></g>
      <g id="photo"><path d="M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z"></path></g>
    </defs>
  </svg>
</iron-iconset-svg>
<iron-iconset-svg name="files16" size="16">
  <svg>
    <defs>
      <g id="eject"><path d="M14.04 11v2h-12v-2h12zm-6-8l6 6h-12l6-6z"></path></g>
      <g id="external-link"><path d="M12 12H4V4h3.2V2.4H4c-.8 0-1.6.8-1.6 1.6v8c0 .8.8 1.6 1.6 1.6h8c.8 0 1.6-.8 1.6-1.6V8.8H12V12zM8.8 2.4V4h2L5.6 9.2l1.2 1.2L12 5.2v2h1.6V2.4H8.8z"></path><g>
      <g id="arrow_up_small"><path d="M8.8 5.15l3.81 4.01.99-1.02L8 2.4 2.4 8.14l.99 1.02L7.2 5.15v8.45h1.6z"></path></g>
      <g id="arrow_down_small"><path d="M7.2 10.85L3.39 6.84 2.4 7.86 8 13.6l5.6-5.74-.99-1.02-3.81 4.01V2.4H7.2z"></path></g>
    </g></g></defs>
  </svg>
</iron-iconset-svg>
<iron-iconset-svg name="files20" size="20">
  <svg>
    <defs>
      <!-- ui -->
      <g id="eject"><path d="M15 12v2H5v-2h10zm-5-8l5 6H5l5-6z"></path></g>
      <g id="external-link"><path d="M15 15H5V5h4V3H5C4 3 3 4 3 5v10c0 1 1 2 2 2h10c1 0 2-1 2-2v-4h-2v4zM11 3v2h2.5L7 11.5 8.5 13 15 6.5V9h2V3h-6z"></path></g>
      <g id="list-check"><path fill="#1A73E8" d="M10 1c4.9706 0 9 4.0294 9 9s-4.0294 9-9 9-9-4.0294-9-9 4.0294-9 9-9zm4.1705 5.9545c-.4393-.4393-1.1517-.4393-1.591 0L8.875 10.659 7.4205 9.2045c-.4393-.4393-1.1517-.4393-1.591 0s-.4393 1.1517 0 1.591l2.25 2.25c.4393.4393 1.1517.4393 1.591 0l4.5-4.5c.4393-.4393.4393-1.1517 0-1.591z"></path></g>
      <!-- filetype -->
      <g id="archive"><path d="M15 3a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2V5c0-1.1.9-2 2-2zM8 5H5v10h10V5h-5v2H8V5zm4 6v2h-2v-2h2zm-2-2v2H8V9h2zm2-2v2h-2V7h2z"></path></g>
      <g id="audio"><path fill="#EA4335" d="M16 15a1 1 0 01-1 1h-1v-3h2v2zM6 16H5a1 1 0 01-1-1v-2h2v3zM2 9v6a3 3 0 003 3h3v-7H4V9c0-3.87 2.13-5 6-5s6 1.13 6 5v2h-4v7h3a3 3 0 003-3V9c0-4.97-3.03-7-8-7-4.97 0-8 2.03-8 7z"></path></g>
      <g id="chart"><path fill="#34A853" d="M15 3c1.1 0 2 .9 2 2v10c0 1.1-.9 2-2 2H5c-1.1 0-2-.9-2-2V5c0-1.1.9-2 2-2zm0 2H5v10h10V5zm-1 6v3h-2v-3h2zm-3-4v7H9V7h2zM8 9v5H6V9h2z"></path></g>
      <g id="excel"><path fill="#16A765" d="M5 3h10a2 2 0 012 1.85V15a2 2 0 01-1.85 2H5a2 2 0 01-2-1.85V5a2 2 0 011.85-2H15zm10 2H5v10h10V5zM8.5 7L10 8.8 11.5 7h2L11 10l2.5 3h-2L10 11.2 8.5 13h-2L9 10 6.5 7h2z"></path></g>
      <g id="folder-shared"><path d="M10 3l2 2h4c1.1 0 2 .9 2 2v8c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2l.01-10c0-1.1.89-2 1.99-2h6zm6 4H4v8h12V7zm-4 5c.998 0 3 .447 3 1.333V14H9v-.667C9 12.447 11.002 12 12 12zm0-3.5c.825 0 1.5.675 1.5 1.5s-.675 1.5-1.5 1.5-1.5-.675-1.5-1.5.675-1.5 1.5-1.5z"></path></g>
      <g id="folder"><path d="M16 5h-4l-2-2H4a2 2 0 00-1.99 2L2 15c0 1.1.9 2 2 2h12a2 2 0 002-2V7a2 2 0 00-2-2zm0 10H4V7h12v8z"></path></g>
      <g id="gdoc"><path fill="#4285F4" d="M15 3a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2V5c0-1.1.9-2 2-2zm0 2H5v10h10V5zm-4 5v2H7v-2h4zm2-3v2H7V7h6z"></path></g>
      <g id="gdraw"><path fill="#EA4335" d="M5 3h10a2 2 0 012 1.85V15a2 2 0 01-1.85 2H5a2 2 0 01-2-1.85V5a2 2 0 011.85-2H15zm10 2H5v10h10V5zm-1.5 5v3.5H10V10h3.5zm-5-3.5a2 2 0 110 4 2 2 0 010-4z"></path></g>
      <g id="generic"><path d="M11 2l5 5v10a1 1 0 01-1 1H5a1 1 0 01-1-1V3a1 1 0 011-1h6zm-1 2H6v12h8V8h-4V4z"></path></g>
      <g id="gform"><path fill="#34A853" d="M5 3h10a2 2 0 012 1.85V15a2 2 0 01-1.85 2H5a2 2 0 01-2-1.85V5a2 2 0 011.85-2H15zm10 2H5v10h10V5zm-1 5v2H9v-2h5zm-6 0v2H6v-2h2zm6-3v2H9V7h5zM8 7v2H6V7h2z"></path></g>
      <g id="gmap"><path fill="#EA4335" d="M15 3c1.1 0 2 .9 2 2v10c0 1.1-.9 2-2 2H5c-1.1 0-2-.9-2-2V5c0-1.1.9-2 2-2zm0 2H5v10h10V5zm-5 1c1.657 0 3 1.328 3 2.965 0 .967-.858 2.51-2.59 4.559l-.23.27L10 14l-.18-.206C7.935 11.61 7 9.974 7 8.965 7 7.328 8.343 6 10 6zm0 2a1 1 0 100 2 1 1 0 000-2z"></path></g>
      <g id="gsheet"><path fill="#34A853" d="M15 3a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2V5c0-1.1.9-2 2-2zm0 2H5v10h10V5zm-5 1v2h4v2h-4v4H8v-4H6V8h2V6h2z"></path></g>
      <g id="gsite"><path fill="#796EEE" d="M5 3h10a2 2 0 012 1.85V15a2 2 0 01-1.85 2H5a2 2 0 01-2-1.85V5a2 2 0 011.85-2H15zm10 2H5v10h10V5zm-5 5v3H6v-3h4zm4 0v3h-3v-3h3zm0-3v2H6V7h8z"></path></g>
      <g id="gslides"><path fill="#FBBC04" d="M15 3a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2V5c0-1.1.9-2 2-2zm0 2H5v10h10V5zm-1 2v6H6V7h8z"></path></g>
      <g id="gtable"><path fill="#34A853" d="M5 3h10a2 2 0 012 1.85V15a2 2 0 01-1.85 2H5a2 2 0 01-2-1.85V5a2 2 0 011.85-2H15zm10 2H5v10h10V5zm-1 2.01v2.5l-4 4-2-2-2 2V11l2-2 2 2 4-4z"></path></g>
      <g id="image"><path fill="#EA4335" d="M15 3H5a2 2 0 00-2 2v10c0 1.1.9 2 2 2h10a2 2 0 002-2V5a2 2 0 00-2-2zm0 12H5V5h10v10zm-3.67-6L9.5 12 8 10.6 6 14h8l-2.67-5z"></path></g>
      <g id="pdf"><path fill="#EA4335" d="M15 3c1.1 0 2 .9 2 2v10c0 1.1-.9 2-2 2H5c-1.1 0-2-.9-2-2V5c0-1.1.9-2 2-2zm0 2H5v10h10V5zM7.9 8a.5.5 0 0 1 .5.5v1.4a.5.5 0 0 1-.5.5H6.8V12H6V8.5a.5.5 0 0 1 .5-.5h1.4zm2.8 0a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5H8.8V8.5a.5.5 0 0 1 .5-.5h1.4zM14 8v.8h-1.601v.799l.801.001v.8h-.801L12.4 12h-.8V8.4A.4.4 0 0 1 12 8h2zm-3.6.8h-.8v2.4h.8V8.8zm-2.8 0h-.8v.8h.8v-.8z"></path></g>
      <g id="ppt"><path fill="#FF7537" d="M5 3h10a2 2 0 012 1.85V15a2 2 0 01-1.85 2H5a2 2 0 01-2-1.85V5a2 2 0 011.85-2H15zm10 2H5v10h10V5zm-4 2a2 2 0 012 2v.5a2 2 0 01-2 2H8.5V13H7V7h4zm0 1.5H8.5V10H11a.5.5 0 00.5-.5V9a.5.5 0 00-.5-.5z"></path></g>
      <g id="script"><path fill="#4285F4" d="M3 5a2 2 0 011.85-2H15a2 2 0 012 1.85V15a2 2 0 01-1.85 2H5a2 2 0 01-2-1.85V5zm2 10h10V5H5v4H9.7L7.76 7.13 8.9 6 13 10l-4.1 4-1.14-1.13L9.63 11H5v4z"></path></g>
      <g id="sites"><path fill="#796EEE" d="M16 3a2 2 0 012 2v10a2 2 0 01-2 2H4a2 2 0 01-2-2V5a2 2 0 012-2h12zm-5 9H4v3h7v-3zM4 7v3h7V7H4zm9 8h3V7h-3v8z"></path></g>
      <g id="team-drive"><path d="M15 2a2 2 0 012 2v12a2 2 0 01-2 2H5a2 2 0 01-2-2V4c0-1.1.9-2 2-2h10zm0 13H5v1h10v-1zm0-11H5v9h10V4zm-3.61 5h.11c.8 0 2.35.4 2.49 1.22l.01.11V11h-2v-.67c0-.52-.23-.97-.61-1.33h.11zM8.5 9c.83 0 2.5.45 2.5 1.33V11H6v-.67C6 9.45 7.67 9 8.5 9zm3-2.5a1 1 0 011 1 1 1 0 01-1 1 1 1 0 01-1-1 1 1 0 011-1zm-3 0a1 1 0 011 1 1 1 0 01-1 1 1 1 0 01-1-1 1 1 0 011-1z"></path></g>
      <g id="tini"><path fill="#4285F4" d="M5 3h10a2 2 0 012 1.85V15a2 2 0 01-1.85 2H5a2 2 0 01-2-1.85V5a2 2 0 011.85-2H15zm10 2H5v10h2.25l-.08-.23a5.63 5.63 0 01-.26-1.68.6.6 0 01-.51.02c-.56-.2-.43-.9-.23-1.52.17-.52.75-.9 1.03-.97C7.86 8.02 9.4 6 12 6c1.23 0 2.22.43 3 1.15V5zm-3 3.8c-.53 0-.9-1.17-1.34-1.06-1.5.37-2.4 2.48-2.4 4.57 0 1.14.21 2.05.7 2.69H15V9.14l-.1-.18a2.55 2.55 0 00-1.56-1.22c-.48-.11-.81 1.07-1.34 1.07zm.05 2.52l.06.02.85.39a.3.3 0 01.15.39l-.02.04-.03.04-.85.93c-.1.12-.29.13-.4.02h-.02v-.02l-.85-.94a.3.3 0 01.02-.41l.03-.03.04-.03.84-.38a.29.29 0 01.18-.02zm-1.91-1.6c.34 0 .62.29.62.64 0 .35-.28.64-.62.64a.63.63 0 01-.62-.64c0-.35.28-.64.62-.64zm3.72 0c.34 0 .62.29.62.64 0 .35-.28.64-.62.64a.63.63 0 01-.62-.64c0-.35.28-.64.62-.64z"></path></g>
      <g id="video"><path fill="#EA4335" d="M16 4h-2l1 3h-2l-1-3h-2l1 3H9L8 4H6l1 3H5L4 4C3 4 2 5 2 6v9c0 1 .9 2 2 2h12c1.1.05 2-.88 2-2V6c0-1-1-2-2-2zm0 11H4V9h12v6z"></path></g>
      <g id="word"><path fill="#4986E7" d="M5 3h10c1.05 0 1.918.82 1.994 1.851L17 5v10c0 1.05-.82 1.918-1.851 1.994L15 17H5c-1.05 0-1.918-.82-1.994-1.851L3 15V5c0-1.05.82-1.918 1.851-1.994L5 3h10zm10 2H5v10h10V5zM7.75 7l.75 3 .75-3h1.5l.75 3 .75-3h1.5l-1.5 6h-1.5L10 10l-.75 3h-1.5l-1.5-6h1.5z"></path></g>
    </defs>
  </svg>
</iron-iconset-svg>
<iron-iconset-svg name="files32" size="32">
  <svg>
    <defs>
      <g id="small-dragger"><path d="M14,19 C14.55,19 15,19.45 15,20 C15,20.55 14.55,21 14,21 C13.45,21 13,20.55 13,20 C13,19.45 13.45,19 14,19 Z M18,19 C18.55,19 19,19.45 19,20 C19,20.55 18.55,21 18,21 C17.45,21 17,20.55 17,20 C17,19.45 17.45,19 18,19 Z M14,15 C14.55,15 15,15.45 15,16 C15,16.55 14.55,17 14,17 C13.45,17 13,16.55 13,16 C13,15.45 13.45,15 14,15 Z M18,15 C18.55,15 19,15.45 19,16 C19,16.55 18.55,17 18,17 C17.45,17 17,16.55 17,16 C17,15.45 17.45,15 18,15 Z M14,11 C14.55,11 15,11.45 15,12 C15,12.55 14.55,13 14,13 C13.45,13 13,12.55 13,12 C13,11.45 13.45,11 14,11 Z M18,11 C18.55,11 19,11.45 19,12 C19,12.55 18.55,13 18,13 C17.45,13 17,12.55 17,12 C17,11.45 17.45,11 18,11 Z"></path> </g>
    </defs>
  </svg>
</iron-iconset-svg>
<iron-iconset-svg name="files36" size="36">
  <svg>
    <defs>
      <g id="success"><path fill="#34A853" d="M14 23.6L8.4 18l-1.9 1.9 7.5 7.4 16-16-1.9-1.8z"></path></g>
      <g id="failure" stroke="#EA4335" stroke-width="2.6"><circle cx="18" cy="18" r="12.1" fill="none"></circle><path d="M18 11v8.5m0 2.6v2.6"></path></g>
      <g id="hard-drive" transform="scale(1.8,1.8)" fill="#1A73E8C0"><path d="M15 2c1.1046 0 2 .8954 2 2v12c0 1.1046-.8954 2-2 2H5c-1.1046 0-2-.8954-2-2V4c0-1.1046.8954-2 2-2h10zm0 10H5v4h10v-4zm-2 1c.5523 0 1 .4477 1 1s-.4477 1-1 1-1-.4477-1-1 .4477-1 1-1zm2-9H5v6h10V4z"></path></g>
    </defs>
  </svg>
</iron-iconset-svg>
`;document.head.appendChild(template.content);// Copyright 2016 The Chromium Authors. All rights reserved.
const FilesQuickView=Polymer({_template:html`<!--css-build:shadow--><!--_html_template_start_--><link rel="stylesheet" href="chrome://resources/css/text_defaults.css">
    <link rel="stylesheet" href="foreground/css/common.css">
    <link rel="stylesheet" href="foreground/elements/files_quick_view.css">

    <dialog id="dialog" on-close="onDialogClose_">
      <div id="toolbar">
        <div class="buttons-group">
          <cr-button id="back-button" on-click="close" aria-label="Back" has-tooltip="" invert-tooltip="">
            <iron-icon icon="files:arrow-back"></iron-icon>
            <span class="icon"></span>
          </cr-button>
        </div>
        <div id="file-path">[[filePath]]</div>
        <div class="buttons-group">
          <cr-button id="open-button" on-click="onOpenInNewButtonTap" hidden$="[[!shouldShowOpenButton_(hasTask, isModal)]]" aria-label="Open" has-tooltip="" invert-tooltip="">
            <span class="icon">Open</span>
          </cr-button>
          <cr-button id="delete-button" on-click="onDeleteButtonTap" hidden$="[[!shouldShowDeleteButton_(canDelete, isModal)]]" aria-label="Delete" has-tooltip="" invert-tooltip="">
            <span class="icon"></span>
          </cr-button>
          <!-- TODO(files-ng): this fancy Polymer icon toggle button is not used in files-ng. Remove it. -->
          <files-icon-button toggles="" id="metadata-button" on-tap="onMetadataButtonTap_" active="{{metadataBoxActive}}" aria-label="File info" tabindex="0" has-tooltip="" invert-tooltip="">
          </files-icon-button>
          <cr-button id="info-button" on-click="onMetadataButtonTap_" aria-pressed="{{metadataBoxActive}}" aria-label="File info" has-tooltip="" invert-tooltip="">
            <span class="icon"></span>
          </cr-button>
        </div>
      </div>
      <div id="mainPanel">
        <div id="contentPanel" metadata-box-active$="[[metadataBoxActive]]" on-tap="onContentPanelTap_">
          <div id="innerContentPanel" type$="[[type]]">
            <!-- PDF, Text -->
            <template is="dom-if" if="[[browsable]]">
              <webview style="color: transparent; background: transparent;" on-contentload="applyTextCss" class="content text-content" src="[[contentUrl]]"></webview>
            </template>
            <!-- document/HTML -->
            <template is="dom-if" if="[[isHtml_(type, subtype)]]">
              <files-safe-media hidden="[[!contentUrl]]" type="html" class="content text-content" src="[[contentUrl]]"></files-safe-media>
              <template is="dom-if" if="[[!contentUrl]]">
                <div generic-thumbnail="[[type]]"></div>
                <div class="no-preview">[[noPreviewText]]</div>
              </template>
            </template>
            <!-- Image -->
            <template is="dom-if" if="[[isImage_(type)]]">
              <files-safe-media hidden="[[!contentUrl]]" type="image" class="content no-close-on-click" src="[[contentUrl]]"></files-safe-media>
              <template is="dom-if" if="[[!contentUrl]]">
                <div generic-thumbnail="image"></div>
                <div class="no-preview">[[noPreviewText]]</div>
              </template>
            </template>
            <!-- Video -->
            <template is="dom-if" if="[[isVideo_(type)]]">
              <template is="dom-if" if="[[!contentUrl]]">
                <div class="thumbnail" hidden="[[!videoPoster]]">
                  <files-safe-media type="image" id="video-poster" src="[[videoPoster]]"></files-safe-media>
                </div>
                <div hidden="[[videoPoster]]" generic-thumbnail="video"></div>
                <div class="no-preview">[[noPlaybackText]]</div>
              </template>
              <template is="dom-if" if="[[contentUrl]]">
                <files-safe-media id="videoSafeMedia" tabindex="0" type="video" class="content no-close-on-click" controls="" autoplay="[[autoplay]]" src="[[contentUrl]]" poster="[[videoPoster]]"></files-safe-media>
              </template>
            </template>
            <!-- Audio -->
            <template is="dom-if" if="[[isAudio_(type)]]">
              <files-safe-media type="image" id="audio-artwork" class="no-close-on-click" src="[[audioArtwork]]" hidden="[[!audioArtwork]]"></files-safe-media>
            </template>
            <div>
              <files-safe-media tabindex="0" type="audio" class="no-close-on-click" controls="" autoplay="[[autoplay]]" src="[[audioUrl_(contentUrl, type)]]" hidden="[[!isAudio_(type)]]"></files-safe-media>
            </div>
            <template is="dom-if" if="[[isAudio_(type)]]">
              <template is="dom-if" if="[[!contentUrl]]">
                <div generic-thumbnail="audio"></div>
                <div class="no-preview">[[noPlaybackText]]</div>
              </template>
            </template>
            <div hidden="[[!isUnsupported_(type, subtype, browsable)]]">
              <div generic-thumbnail$="[[type]]"></div>
              <div class="no-preview">[[noPreviewText]]</div>
            </div>
            </div> <!-- innerContentPanel -->
          </div> <!-- contentPanel -->
        <files-metadata-box id="metadata-box" hidden$="[[!metadataBoxActive]]"></files-metadata-box>
      </div> <!-- mainPanel -->
      <files-tooltip></files-tooltip>
    </dialog>
<!--_html_template_end_-->`,is:"files-quick-view",properties:{type:String,subtype:String,filePath:String,hasTask:Boolean,canDelete:Boolean,contentUrl:String,videoPoster:String,audioArtwork:String,autoplay:Boolean,browsable:Boolean,metadataBoxActive:{value:true,type:Boolean,notify:true},noPlaybackText:String,noPreviewText:String,isModal:Boolean},listeners:{"files-safe-media-tap-inside":"tapInside","files-safe-media-tap-outside":"close","files-safe-media-load-error":"loaderror"},applyTextCss:function(e){if(this.subtype==="PDF"){return}const webview=e.target;webview.insertCSS({file:"foreground/elements/files_safe_text_webview_content.css"})},clear:function(){this.setProperties({type:"",subtype:"",filePath:"",hasTask:false,canDelete:false,contentUrl:"",videoPoster:"",audioArtwork:"",autoplay:false,browsable:false});const video=this.$.contentPanel.querySelector("#videoSafeMedia");if(video){video.src="";video.fire("src-changed")}this.removeAttribute("load-error")},loaderror:function(){this.setAttribute("load-error","");this.contentUrl=""},isOpened:function(){return this.$.dialog.open},open:function(){if(!this.isOpened()){this.$.dialog.showModal();this.$.dialog.setAttribute("tabindex","0");this.$.dialog.focus();this.$.dialog.setAttribute("tabindex","-1")}},close:function(){if(this.isOpened()){this.$.dialog.close()}},tapInside:function(e){if(this.type==="image"){const dialog=this.shadowRoot.querySelector("#dialog");dialog.focus()}},getFilesMetadataBox:function(){return this.$["metadata-box"]},onOpenInNewButtonTap:function(event){},shouldShowOpenButton_:function(hasTask,isModal){return hasTask&&!isModal},onDeleteButtonTap:function(event){},shouldShowDeleteButton_:function(canDelete,isModal){return canDelete&&!isModal},onMetadataButtonTap_:function(event){if(this.hasAttribute("files-ng")){this.metadataBoxActive=!this.metadataBoxActive}},onContentPanelTap_:function(event){let target=event.detail.sourceEvent.target;while(target){if(target.classList.contains("no-close-on-click")){return}target=target.parentElement}this.close()},isHtml_:function(type,subtype){return type==="document"&&subtype==="HTML"},isImage_:function(type){return type==="image"},isVideo_:function(type){return type==="video"},isAudio_:function(type){return type==="audio"},audioUrl_:function(contentUrl,type){return this.isAudio_(type)?contentUrl:""},isUnsupported_:function(type,subtype,browsable){return!this.isImage_(type)&&!this.isVideo_(type)&&!this.isAudio_(type)&&!this.isHtml_(type,subtype)&&!browsable},onDialogClose_:function(e){assert(e.target===this.$.dialog);this.clear();this.fire("close")}});
// Copyright 2016 The Chromium Authors. All rights reserved.
class QuickViewModel extends NativeEventTarget{constructor(){super();this.selectedEntry_=null}getSelectedEntry(){return this.selectedEntry_}setSelectedEntry(entry){this.selectedEntry_=entry;dispatchSimpleEvent(this,"selected-entry-changed")}}// Copyright 2016 The Chromium Authors. All rights reserved.
class MetadataBoxController{constructor(metadataModel,quickViewModel,fileMetadataFormatter,volumeManager){this.metadataModel_=metadataModel;this.quickViewModel_=quickViewModel;this.metadataBox_=null;this.quickView_=null;this.fileMetadataFormatter_=fileMetadataFormatter;this.volumeManager_=volumeManager;this.previousEntry_=null;this.isDirectorySizeLoading_=false;this.onDirectorySizeLoaded_=null}init(quickView){this.quickView_=quickView;this.fileMetadataFormatter_.addEventListener("date-time-format-changed",this.updateView_.bind(this));this.quickView_.addEventListener("metadata-box-active-changed",this.updateView_.bind(this));this.quickViewModel_.addEventListener("selected-entry-changed",this.updateView_.bind(this));this.metadataBox_=this.quickView_.getFilesMetadataBox();this.metadataBox_.clear(false);if(util$3.isFilesNg()){this.metadataBox_.setAttribute("files-ng","")}}updateView_(event){if(!this.quickView_.metadataBoxActive){return}const entry=this.quickViewModel_.getSelectedEntry();const isSameEntry=util$3.isSameEntry(entry,this.previousEntry_);this.previousEntry_=entry;if(!entry){this.metadataBox_.clear(false);return}if(event.type==="date-time-format-changed"){this.metadataModel_.get([entry],["modificationTime"]).then(this.updateModificationTime_.bind(this,entry));return}this.metadataBox_.clear(isSameEntry);const metadata=MetadataBoxController.GENERAL_METADATA_NAMES.concat(["alternateUrl","externalFileUrl","hosted"]);this.metadataModel_.get([entry],metadata).then(this.onGeneralMetadataLoaded_.bind(this,entry,isSameEntry))}onGeneralMetadataLoaded_(entry,isSameEntry,items){const type=FileType.getType(entry).type;const item=items[0];if(entry.isDirectory){const directory=entry;this.setDirectorySize_(directory,isSameEntry)}else if(item.size){this.metadataBox_.size=this.fileMetadataFormatter_.formatSize(item.size,item.hosted,true);this.metadataBox_.metadataRendered("size")}this.updateModificationTime_(entry,items);if(!entry.isDirectory){let media=[];let sniffMimeType="mediaMimeType";if(item.externalFileUrl||item.alternateUrl){sniffMimeType="contentMimeType"}else if(type==="video"){media=MetadataBoxController.EXTRA_METADATA_NAMES}this.metadataModel_.get([entry],[sniffMimeType].concat(media)).then((items=>{this.metadataBox_.mediaMimeType=items[0][sniffMimeType]||"";this.metadataBox_.metadataRendered("mime")})).then((()=>{this.metadataBox_.fileLocation=this.getFileLocationLabel_(entry);this.metadataBox_.metadataRendered("location")}))}if(["image","video","audio"].includes(type)){if(item.externalFileUrl||item.alternateUrl){const data=["imageHeight","imageWidth"];this.metadataModel_.get([entry],data).then((items=>{this.metadataBox_.imageWidth=items[0].imageWidth||0;this.metadataBox_.imageHeight=items[0].imageHeight||0;this.metadataBox_.setFileTypeInfo(type);this.metadataBox_.metadataRendered("meta")}))}else{const data=MetadataBoxController.EXTRA_METADATA_NAMES;this.metadataModel_.get([entry],data).then((items=>{const item=items[0];this.metadataBox_.setProperties({ifd:item.ifd||null,imageHeight:item.imageHeight||0,imageWidth:item.imageWidth||0,mediaAlbum:item.mediaAlbum||"",mediaArtist:item.mediaArtist||"",mediaDuration:item.mediaDuration||0,mediaGenre:item.mediaGenre||"",mediaTitle:item.mediaTitle||"",mediaTrack:item.mediaTrack||"",mediaYearRecorded:item.mediaYearRecorded||""});this.metadataBox_.setFileTypeInfo(type);this.metadataBox_.metadataRendered("meta")}))}}else if(type==="raw"){const data=["ifd"];this.metadataModel_.get([entry],data).then((items=>{const raw=items[0].ifd?items[0].ifd:{};this.metadataBox_.ifd=items[0].ifd?{raw:raw}:null;this.metadataBox_.imageWidth=raw.width||0;this.metadataBox_.imageHeight=raw.height||0;this.metadataBox_.setFileTypeInfo("image");this.metadataBox_.metadataRendered("meta")}))}}updateModificationTime_(entry,items){const item=items[0];if(item.modificationTime){this.metadataBox_.modificationTime=this.fileMetadataFormatter_.formatModDate(item.modificationTime)}else{this.metadataBox_.modificationTime=""}}setDirectorySize_(entry,isSameEntry){assert(entry.isDirectory);if(this.metadataBox_.size===""){this.metadataBox_.size=" "}if(this.isDirectorySizeLoading_){if(!isSameEntry){this.metadataBox_.isSizeLoading=true}this.onDirectorySizeLoaded_=lastEntry=>{this.setDirectorySize_(entry,util$3.isSameEntry(entry,lastEntry))};return}this.metadataBox_.isSizeLoading=!isSameEntry;this.isDirectorySizeLoading_=true;chrome.fileManagerPrivate.getDirectorySize(entry,(size=>{this.isDirectorySizeLoading_=false;if(this.onDirectorySizeLoaded_){setTimeout(this.onDirectorySizeLoaded_.bind(null,entry));this.onDirectorySizeLoaded_=null;return}if(this.quickViewModel_.getSelectedEntry()!=entry){return}if(chrome.runtime.lastError){console.error(chrome.runtime.lastError);size=undefined}this.metadataBox_.size=this.fileMetadataFormatter_.formatSize(size,true,true);this.metadataBox_.isSizeLoading=false;this.metadataBox_.metadataRendered("size")}))}getFileLocationLabel_(entry){const components=PathComponent.computeComponentsFromEntry(entry,this.volumeManager_);return components.map((c=>c.name)).join("/")}}MetadataBoxController.GENERAL_METADATA_NAMES=["size","modificationTime"];MetadataBoxController.EXTRA_METADATA_NAMES=["ifd","imageHeight","imageWidth","mediaAlbum","mediaArtist","mediaDuration","mediaGenre","mediaTitle","mediaTrack","mediaYearRecorded"];// Copyright 2016 The Chromium Authors. All rights reserved.
class QuickViewUma{constructor(volumeManager,dialogType){this.volumeManager_=volumeManager;this.dialogType_=dialogType}exportFileType_(entry,name){let extension=FileType.getExtension(entry).toLowerCase();if(entry.isDirectory){extension="directory"}else if(extension===""){extension="no extension"}else if(FileTasks.UMA_INDEX_KNOWN_EXTENSIONS.indexOf(extension)<0){extension="unknown extension"}metrics.recordEnum(name,extension,FileTasks.UMA_INDEX_KNOWN_EXTENSIONS)}onEntryChanged(entry){this.exportFileType_(entry,"QuickView.FileType")}onOpened(entry,wayToOpen){this.exportFileType_(entry,"QuickView.FileTypeOnLaunch");metrics.recordEnum("QuickView.WayToOpen",wayToOpen,QuickViewUma.WayToOpenValues_);const volumeType=this.volumeManager_.getVolumeInfo(entry).volumeType;if(QuickViewUma.VolumeType.includes(assert(volumeType))){metrics.recordEnum("QuickView.VolumeType",volumeType,QuickViewUma.VolumeType)}else{console.error("Unknown volume type: "+volumeType)}metrics.recordEnum("QuickView.DialogType",this.dialogType_,[DialogType.SELECT_FOLDER,DialogType.SELECT_UPLOAD_FOLDER,DialogType.SELECT_SAVEAS_FILE,DialogType.SELECT_OPEN_FILE,DialogType.SELECT_OPEN_MULTI_FILE,DialogType.FULL_PAGE])}}QuickViewUma.WayToOpen={CONTEXT_MENU:"contextMenu",SPACE_KEY:"spaceKey",SELECTION_MENU:"selectionMenu"};QuickViewUma.WayToOpenValues_=[QuickViewUma.WayToOpen.CONTEXT_MENU,QuickViewUma.WayToOpen.SPACE_KEY,QuickViewUma.WayToOpen.SELECTION_MENU];QuickViewUma.VolumeType=[VolumeManagerCommon$3.VolumeType.DRIVE,VolumeManagerCommon$3.VolumeType.DOWNLOADS,VolumeManagerCommon$3.VolumeType.REMOVABLE,VolumeManagerCommon$3.VolumeType.ARCHIVE,VolumeManagerCommon$3.VolumeType.PROVIDED,VolumeManagerCommon$3.VolumeType.MTP,VolumeManagerCommon$3.VolumeType.MEDIA_VIEW,VolumeManagerCommon$3.VolumeType.CROSTINI,VolumeManagerCommon$3.VolumeType.ANDROID_FILES,VolumeManagerCommon$3.VolumeType.DOCUMENTS_PROVIDER,VolumeManagerCommon$3.VolumeType.SMB];// Copyright (c) 2016 The Chromium Authors. All rights reserved.
class QuickViewController{constructor(fileManager,metadataModel,selectionHandler,listContainer,selectionMenuButton,quickViewModel,taskController,fileListSelectionModel,quickViewUma,metadataBoxController,dialogType,volumeManager,dialogDom){this.fileManager_=fileManager;this.quickView_=null;this.selectionHandler_=selectionHandler;this.listContainer_=listContainer;this.quickViewModel_=quickViewModel;this.quickViewUma_=quickViewUma;this.metadataModel_=metadataModel;this.taskController_=taskController;this.fileListSelectionModel_=fileListSelectionModel;this.metadataBoxController_=metadataBoxController;this.dialogType_=dialogType;this.volumeManager_=volumeManager;this.deleteConfirmDialog_=null;this.entries_=[];this.tasks_=null;this.currentSelection_=0;this.checkSelectMode_=false;this.selectionHandler_.addEventListener(FileSelectionHandler.EventType.CHANGE,this.onFileSelectionChanged_.bind(this));this.listContainer_.element.addEventListener("keydown",this.onKeyDownToOpen_.bind(this));dialogDom.addEventListener("command",(event=>{if(event.command.id==="get-info"){event.stopPropagation();this.display_(QuickViewUma.WayToOpen.SELECTION_MENU)}}));this.listContainer_.element.addEventListener("command",(event=>{if(event.command.id==="get-info"){event.stopPropagation();this.display_(QuickViewUma.WayToOpen.CONTEXT_MENU)}}));selectionMenuButton.addEventListener("command",(event=>{if(event.command.id==="get-info"){event.stopPropagation();this.display_(QuickViewUma.WayToOpen.SELECTION_MENU)}}))}init_(quickView){this.quickView_=quickView;this.quickView_.isModal=DialogType.isModal(this.dialogType_);if(util$3.isFilesNg()){this.quickView_.setAttribute("files-ng","")}this.metadataBoxController_.init(quickView);document.body.addEventListener("keydown",this.onQuickViewKeyDown_.bind(this));this.quickView_.addEventListener("close",(()=>{this.listContainer_.focus()}));this.quickView_.onOpenInNewButtonTap=this.onOpenInNewButtonTap_.bind(this);this.quickView_.onDeleteButtonTap=this.onDeleteButtonTap_.bind(this);const toolTipElements=this.quickView_.$$("#toolbar").querySelectorAll("[has-tooltip]");this.quickView_.$$("files-tooltip").addTargets(toolTipElements)}createQuickView_(){return new Promise(((resolve,reject)=>{const quickView=document.querySelector("#quick-view");if(window.Polymer&&window.Polymer.Base);else{resolve(quickView)}}))}onOpenInNewButtonTap_(event){this.tasks_&&this.tasks_.executeDefault();this.quickView_.close()}onDeleteButtonTap_(event){this.deleteSelectedEntry_()}onKeyDownToOpen_(event){if(event.key===" "){event.preventDefault();event.stopImmediatePropagation();this.display_(QuickViewUma.WayToOpen.SPACE_KEY)}}onQuickViewKeyDown_(event){if(this.quickView_.isOpened()){switch(event.key){case" ":case"Escape":event.preventDefault();event.stopImmediatePropagation();this.quickView_.close();break;case"ArrowRight":case"ArrowDown":if(this.fileListSelectionModel_.getCheckSelectMode()){this.changeCheckSelectModeSelection_(true)}else{this.changeSingleSelectModeSelection_(true)}break;case"ArrowLeft":case"ArrowUp":if(this.fileListSelectionModel_.getCheckSelectMode()){this.changeCheckSelectModeSelection_()}else{this.changeSingleSelectModeSelection_()}break;case"Delete":this.deleteSelectedEntry_();break}}}changeSingleSelectModeSelection_(down=false){let index;if(down){index=this.fileListSelectionModel_.selectedIndex+1;if(index>=this.fileListSelectionModel_.length){index=0}}else{index=this.fileListSelectionModel_.selectedIndex-1;if(index<0){index=this.fileListSelectionModel_.length-1}}this.fileListSelectionModel_.selectedIndex=index}changeCheckSelectModeSelection_(down=false){if(down){this.currentSelection_=this.currentSelection_+1;if(this.currentSelection_>=this.fileListSelectionModel_.selectedIndexes.length){this.currentSelection_=0}}else{this.currentSelection_=this.currentSelection_-1;if(this.currentSelection_<0){this.currentSelection_=this.fileListSelectionModel_.selectedIndexes.length-1}}this.onFileSelectionChanged_(null)}deleteSelectedEntry_(){const entry=this.entries_[this.currentSelection_];if(!this.deleteConfirmDialog_){const dialogElement=document.createElement("dialog");this.quickView_.shadowRoot.appendChild(dialogElement);dialogElement.id="delete-confirm-dialog";this.deleteConfirmDialog_=new FilesConfirmDialog(dialogElement);this.deleteConfirmDialog_.setOkLabel(str("DELETE_BUTTON_LABEL"));dialogElement.addEventListener("keydown",(event=>{event.stopPropagation()}));this.deleteConfirmDialog_.showModalElement=()=>{dialogElement.showModal()};this.deleteConfirmDialog_.doneCallback=()=>{dialogElement.close()}}this.checkSelectMode_=this.fileListSelectionModel_.getCheckSelectMode();CommandHandler.getCommand("delete").deleteEntries([entry],this.fileManager_,this.deleteConfirmDialog_)}canDeleteEntry_(entry){const deleteCommand=CommandHandler.getCommand("delete");return Promise.resolve(deleteCommand.canDeleteEntries([entry],this.fileManager_))}display_(wayToOpen){this.currentSelection_=0;this.checkSelectMode_=this.fileListSelectionModel_.getCheckSelectMode();this.updateQuickView_().then((()=>{if(!this.quickView_.isOpened()){this.quickView_.open();this.quickViewUma_.onOpened(this.entries_[0],wayToOpen)}}))}onFileSelectionChanged_(event){if(event){this.entries_=event.target.selection.entries;if(!this.entries_||!this.entries_.length){if(this.quickView_&&this.quickView_.isOpened()){this.quickView_.close()}return}if(this.currentSelection_>=this.entries_.length){this.currentSelection_=this.entries_.length-1}else if(this.currentSelection_<0){this.currentSelection_=0}const checkSelectModeExited=this.checkSelectMode_!==this.fileListSelectionModel_.getCheckSelectMode();if(checkSelectModeExited){if(this.quickView_&&this.quickView_.isOpened()){this.quickView_.close();return}}}if(this.quickView_&&this.quickView_.isOpened()){assert(this.entries_.length>0);const entry=this.entries_[this.currentSelection_];if(!util$3.isSameEntry(entry,this.quickViewModel_.getSelectedEntry())){this.updateQuickView_()}}}updateQuickView_(){if(!this.quickView_){return this.createQuickView_().then(this.init_.bind(this)).then(this.updateQuickView_.bind(this)).catch(console.error)}assert(this.entries_.length>0);const entry=this.entries_[this.currentSelection_];this.quickViewModel_.setSelectedEntry(entry);this.tasks_=null;requestIdleCallback((()=>{this.quickViewUma_.onEntryChanged(entry)}));return Promise.all([this.metadataModel_.get([entry],["thumbnailUrl"]),this.taskController_.getEntryFileTasks(entry),this.canDeleteEntry_(entry)]).then((values=>{const items=values[0];const tasks=values[1];const canDelete=values[2];return this.onMetadataLoaded_(entry,items,tasks,canDelete)})).catch((error=>{if(error){console.error(error.stack||error)}}))}onMetadataLoaded_(entry,items,fileTasks,canDelete){const tasks=fileTasks.getTaskItems();return this.getQuickViewParameters_(entry,items,tasks,canDelete).then((params=>{if(this.quickViewModel_.getSelectedEntry()!=entry){return}this.quickView_.setProperties({type:params.type||"",subtype:params.subtype||"",filePath:params.filePath||"",hasTask:params.hasTask||false,canDelete:params.canDelete||false,contentUrl:params.contentUrl||"",videoPoster:params.videoPoster||"",audioArtwork:params.audioArtwork||"",autoplay:params.autoplay||false,browsable:params.browsable||false});if(params.hasTask){this.tasks_=fileTasks}}))}getQuickViewParameters_(entry,items,tasks,canDelete){const item=items[0];const typeInfo=FileType.getType(entry);const type=typeInfo.type;const locationInfo=this.volumeManager_.getLocationInfo(entry);const label=util$3.getEntryLabel(locationInfo,entry);const entryIsOnDrive=locationInfo&&locationInfo.isDriveBased;const params={type:type,subtype:typeInfo.subtype,filePath:label,hasTask:tasks.length>0,canDelete:canDelete};const volumeInfo=this.volumeManager_.getVolumeInfo(entry);let localFile=volumeInfo&&QuickViewController.LOCAL_VOLUME_TYPES_.indexOf(assert(volumeInfo.volumeType))>=0;if(entryIsOnDrive&&(type==="audio"||type==="video")){localFile=true}if(!localFile){if(item.thumbnailUrl){return this.loadThumbnailFromDrive_(item.thumbnailUrl).then((result=>{if(result.status===LoadImageResponseStatus.SUCCESS){if(params.type=="video"){params.videoPoster=result.data}else if(params.type=="image"){params.contentUrl=result.data}else{params.type="image";params.contentUrl=result.data}}return params}))}return Promise.resolve(params)}if(type==="raw"){return this.loadRawFileThumbnailFromImageLoader_(entry).then((result=>{if(result.status===LoadImageResponseStatus.SUCCESS){params.contentUrl=result.data;params.type="image"}return params})).catch((e=>{console.error(e);return params}))}if(type===".folder"){return Promise.resolve(params)}return new Promise(((resolve,reject)=>{entry.file(resolve,reject)})).then((file=>{switch(type){case"image":if(QuickViewController.UNSUPPORTED_IMAGE_SUBTYPES_.indexOf(typeInfo.subtype)!==-1){params.contentUrl=""}else{params.contentUrl=URL.createObjectURL(file)}return params;case"video":params.contentUrl=URL.createObjectURL(file);params.autoplay=true;if(item.thumbnailUrl){params.videoPoster=item.thumbnailUrl}return params;case"audio":params.contentUrl=URL.createObjectURL(file);params.autoplay=true;return this.metadataModel_.get([entry],["contentThumbnailUrl"]).then((items=>{const item=items[0];if(item.contentThumbnailUrl){params.audioArtwork=item.contentThumbnailUrl}return params}));case"document":if(typeInfo.subtype==="HTML"){params.contentUrl=URL.createObjectURL(file);return params}else{break}case"text":if(typeInfo.subtype==="TXT"){return file.text().then((text=>new Blob([text],{type:"text/plain;charset=utf-8"}))).then((blob=>{params.contentUrl=URL.createObjectURL(blob);params.browsable=true;return params})).catch((e=>{console.error(e);return params}))}else{break}}params.browsable=tasks.some((task=>{const verb=task.taskId.split("|")[2];return["view-in-browser","view-pdf"].includes(verb)}));if(params.browsable){params.contentUrl=URL.createObjectURL(file);if(params.subtype==="PDF"){params.contentUrl+="#view=FitH"}}return params})).catch((e=>{console.error(e);return params}))}loadThumbnailFromDrive_(url){return new Promise((resolve=>{ImageLoaderClient.getInstance().load(LoadImageRequest.createForUrl(url),resolve)}))}loadRawFileThumbnailFromImageLoader_(entry){return new Promise(((resolve,reject)=>{entry.file((function requestFileThumbnail(file){const request=LoadImageRequest.createForUrl(entry.toURL());request.maxWidth=ThumbnailLoader.THUMBNAIL_MAX_WIDTH;request.maxHeight=ThumbnailLoader.THUMBNAIL_MAX_HEIGHT;request.timestamp=file.lastModified;request.cache=true;request.priority=0;ImageLoaderClient.getInstance().load(request,resolve)}),reject)}))}}QuickViewController.LOCAL_VOLUME_TYPES_=[VolumeManagerCommon$3.VolumeType.ARCHIVE,VolumeManagerCommon$3.VolumeType.DOWNLOADS,VolumeManagerCommon$3.VolumeType.REMOVABLE,VolumeManagerCommon$3.VolumeType.ANDROID_FILES,VolumeManagerCommon$3.VolumeType.CROSTINI,VolumeManagerCommon$3.VolumeType.MEDIA_VIEW,VolumeManagerCommon$3.VolumeType.DOCUMENTS_PROVIDER,VolumeManagerCommon$3.VolumeType.SMB];QuickViewController.UNSUPPORTED_IMAGE_SUBTYPES_=["TIFF"];// Copyright 2017 The Chromium Authors. All rights reserved.
class LastModifiedController{constructor(fileTable,directoryModel){this.fileTable_=fileTable;this.directoryModel_=directoryModel;this.directoryModel_.addEventListener("scan-started",this.onScanStarted_.bind(this))}onScanStarted_(){const useModificationByMeTime=util$3.isRecentRootType(this.directoryModel_.getCurrentRootType());this.fileTable_.setUseModificationByMeTime(useModificationByMeTime);this.directoryModel_.getFileList().setUseModificationByMeTime(useModificationByMeTime)}}// Copyright 2015 The Chromium Authors. All rights reserved.
class EmptyFolderController{constructor(emptyFolder,directoryModel,alertDialog){this.emptyFolder_=emptyFolder;this.directoryModel_=directoryModel;this.alertDialog_=alertDialog;this.dataModel_=assert(this.directoryModel_.getFileList());this.isScanning_=false;this.directoryModel_.addEventListener("scan-started",this.onScanStarted_.bind(this));this.directoryModel_.addEventListener("scan-failed",this.onScanFailed_.bind(this));this.directoryModel_.addEventListener("scan-cancelled",this.onScanFinished_.bind(this));this.directoryModel_.addEventListener("scan-completed",this.onScanFinished_.bind(this));this.directoryModel_.addEventListener("rescan-completed",this.onScanFinished_.bind(this));this.dataModel_.addEventListener("splice",this.onSplice_.bind(this))}onSplice_(){this.update_()}onScanStarted_(){this.isScanning_=true;this.update_()}onScanFailed_(event){this.isScanning_=false;if(event.error.name==constants.CROSTINI_CONNECT_ERR){this.alertDialog_.showWithTitle(str("ERROR_LINUX_FILES_CONNECTION"),event.error.message)}this.update_()}onScanFinished_(){this.isScanning_=false;this.update_()}update_(){if(!this.isScanning_&&this.dataModel_.length===0){const query=this.directoryModel_.getLastSearchQuery();let html="";if(query){html=strf("SEARCH_NO_MATCHING_FILES_HTML",util$3.htmlEscape(query))}else{html=str("EMPTY_FOLDER")}this.emptyFolder_.setMessage(html);this.emptyFolder_.show()}else{this.emptyFolder_.hide()}}}// Copyright 2015 The Chromium Authors. All rights reserved.
class ToolbarController{constructor(toolbar,navigationList,listContainer,locationLine,selectionHandler,directoryModel,volumeManager,a11y){this.toolbar_=toolbar;this.cancelSelectionButton_=queryRequiredElement("#cancel-selection-button",this.toolbar_);this.cancelSelectionButtonWrapper_=queryRequiredElement("#cancel-selection-button-wrapper",this.toolbar_);this.filesSelectedLabel_=queryRequiredElement("#files-selected-label",this.toolbar_);this.deleteButton_=queryRequiredElement("#delete-button",this.toolbar_);this.restoreFromTrashButton_=queryRequiredElement("#restore-from-trash-button",this.toolbar_);this.readOnlyIndicator_=queryRequiredElement("#read-only-indicator",this.toolbar_);this.pinnedToggleWrapper_=queryRequiredElement("#pinned-toggle-wrapper",this.toolbar_);this.pinnedToggle_=queryRequiredElement("#pinned-toggle",this.toolbar_);this.deleteCommand_=assertInstanceof(queryRequiredElement("#delete",assert(this.toolbar_.ownerDocument.body)),Command);this.restoreFromTrashCommand_=assertInstanceof(queryRequiredElement("#restore-from-trash",assert(this.toolbar_.ownerDocument.body)),Command);this.refreshCommand_=assertInstanceof(queryRequiredElement("#refresh",assert(this.toolbar_.ownerDocument.body)),Command);this.newFolderCommand_=assertInstanceof(queryRequiredElement("#new-folder",assert(this.toolbar_.ownerDocument.body)),Command);this.invokeSharesheetCommand_=assertInstanceof(queryRequiredElement("#invoke-sharesheet",assert(this.toolbar_.ownerDocument.body)),Command);this.togglePinnedCommand_=assertInstanceof(queryRequiredElement("#toggle-pinned",assert(this.toolbar_.ownerDocument.body)),Command);this.navigationList_=navigationList;this.listContainer_=listContainer;this.locationLine_=locationLine;this.selectionHandler_=selectionHandler;this.directoryModel_=directoryModel;this.volumeManager_=volumeManager;this.a11y_=a11y;this.selectionHandler_.addEventListener(FileSelectionHandler.EventType.CHANGE,this.onSelectionChanged_.bind(this));this.selectionHandler_.addEventListener(FileSelectionHandler.EventType.CHANGE_THROTTLED,this.updateSharesheetCommand_.bind(this));chrome.fileManagerPrivate.onAppsUpdated.addListener(this.updateSharesheetCommand_.bind(this));this.cancelSelectionButton_.addEventListener("click",this.onCancelSelectionButtonClicked_.bind(this));this.deleteButton_.addEventListener("click",this.onDeleteButtonClicked_.bind(this));this.restoreFromTrashButton_.addEventListener("click",this.onRestoreFromTrashButtonClicked_.bind(this));if(util$3.isFilesNg()){this.togglePinnedCommand_.addEventListener("checkedChange",this.updatePinnedToggle_.bind(this));this.togglePinnedCommand_.addEventListener("disabledChange",this.updatePinnedToggle_.bind(this));this.togglePinnedCommand_.addEventListener("hiddenChange",this.updatePinnedToggle_.bind(this));this.pinnedToggle_.addEventListener("change",this.onPinnedToggleChanged_.bind(this))}if(!util$3.isFilesNg()){this.navigationList_.addEventListener("relayout",this.onNavigationListRelayout_.bind(this))}this.directoryModel_.addEventListener("directory-changed",this.updateCurrentDirectoryButtons_.bind(this));const observer=new MutationObserver(this.onToolbarButtonsMutated_.bind(this));const toolbarButtons=this.toolbar_.querySelectorAll(".icon-button, .combobutton");for(let i=0;i<toolbarButtons.length;i++){observer.observe(toolbarButtons[i],{attributes:true})}}updateCurrentDirectoryButtons_(){this.updateRefreshCommand_();this.newFolderCommand_.canExecuteChange(this.listContainer_.currentList);const currentDirectory=this.directoryModel_.getCurrentDirEntry();const locationInfo=currentDirectory&&this.volumeManager_.getLocationInfo(currentDirectory);this.readOnlyIndicator_.hidden=!(locationInfo&&locationInfo.isReadOnly&&locationInfo.rootType!==VolumeManagerCommon$3.RootType.CROSTINI)}updateRefreshCommand_(){const volumeInfo=this.directoryModel_.getCurrentVolumeInfo();this.refreshCommand_.canExecuteChange(this.listContainer_.currentList)}onSelectionChanged_(){const selection=this.selectionHandler_.selection;this.updateRefreshCommand_();let text;if(selection.totalCount===0){text=""}else if(selection.totalCount===1){if(selection.directoryCount==0){text=str("ONE_FILE_SELECTED")}else if(selection.fileCount==0){text=str("ONE_DIRECTORY_SELECTED")}}else{if(selection.directoryCount==0){text=strf("MANY_FILES_SELECTED",selection.fileCount)}else if(selection.fileCount==0){text=strf("MANY_DIRECTORIES_SELECTED",selection.directoryCount)}else{text=strf("MANY_ENTRIES_SELECTED",selection.totalCount)}}this.filesSelectedLabel_.textContent=text;this.deleteButton_.hidden=selection.totalCount===0||!this.directoryModel_.canDeleteEntries()||selection.hasReadOnlyEntry()||selection.entries.some((entry=>util$3.isNonModifiable(this.volumeManager_,entry)));this.restoreFromTrashButton_.hidden=selection.totalCount==0||this.directoryModel_.getCurrentRootType()!==VolumeManagerCommon$3.RootType.TRASH;if(util$3.isFilesNg()){this.togglePinnedCommand_.canExecuteChange(this.listContainer_.currentList)}if(this.directoryModel_.getFileListSelection().multiple){const bodyClassList=this.filesSelectedLabel_.ownerDocument.body.classList;bodyClassList.toggle("selecting",selection.totalCount>0);if(bodyClassList.contains("check-select")!=this.directoryModel_.getFileListSelection().getCheckSelectMode()){bodyClassList.toggle("check-select")}}}onCancelSelectionButtonClicked_(){this.directoryModel_.selectEntries([]);this.a11y_.speakA11yMessage(str("SELECTION_CANCELLATION"))}onDeleteButtonClicked_(){this.deleteCommand_.canExecuteChange(this.listContainer_.currentList);this.deleteCommand_.execute(this.listContainer_.currentList)}onRestoreFromTrashButtonClicked_(){this.restoreFromTrashCommand_.canExecuteChange(this.listContainer_.currentList);this.restoreFromTrashCommand_.execute(this.listContainer_.currentList)}onNavigationListRelayout_(){if(!util$3.isFilesNg()){const navWidth=parseFloat(window.getComputedStyle(this.navigationList_).width);this.cancelSelectionButtonWrapper_.style.width=navWidth+"px"}}onToolbarButtonsMutated_(){this.locationLine_.truncate()}updateSharesheetCommand_(){this.invokeSharesheetCommand_.canExecuteChange(this.listContainer_.currentList)}updatePinnedToggle_(){this.pinnedToggleWrapper_.hidden=this.togglePinnedCommand_.hidden;this.pinnedToggle_.checked=this.togglePinnedCommand_.checked;this.pinnedToggle_.disabled=this.togglePinnedCommand_.disabled}onPinnedToggleChanged_(){this.togglePinnedCommand_.execute(this.listContainer_.currentList);this.togglePinnedCommand_.checked=this.pinnedToggle_.checked}}// Copyright 2017 The Chromium Authors. All rights reserved.
class SelectionMenuController{constructor(selectionMenuButton,menu){this.toggleRipple_=queryRequiredElement("files-toggle-ripple",selectionMenuButton);this.menu_=menu;selectionMenuButton.addEventListener("menushow",this.onShowMenu_.bind(this));selectionMenuButton.addEventListener("menuhide",this.onHideMenu_.bind(this))}onShowMenu_(){this.menu_.classList.toggle("toolbar-menu",true);this.toggleRipple_.activated=true;document.querySelector("files-tooltip").hideTooltip()}onHideMenu_(){if(!this.menu_.classList.contains("animating")){this.menu_.classList.toggle("toolbar-menu",false)}this.toggleRipple_.activated=false}}// Copyright 2014 The Chromium Authors. All rights reserved.
class GearMenuController{constructor(gearButton,toggleRipple,gearMenu,providersMenu,directoryModel,commandHandler,providersModel){this.gearButton_=gearButton;this.toggleRipple_=toggleRipple;this.gearMenu_=gearMenu;this.providersMenu_=providersMenu;this.directoryModel_=directoryModel;this.commandHandler_=commandHandler;this.providersModel_=providersModel;gearButton.addEventListener("menushow",this.onShowGearMenu_.bind(this));gearButton.addEventListener("menuhide",this.onHideGearMenu_.bind(this));directoryModel.addEventListener("directory-changed",this.onDirectoryChanged_.bind(this));chrome.fileManagerPrivate.onPreferencesChanged.addListener(this.onPreferencesChanged_.bind(this));this.onPreferencesChanged_()}onShowGearMenu_(){this.toggleRipple_.activated=true;this.refreshRemainingSpace_(false);this.providersModel_.getMountableProviders().then((providers=>{const shouldHide=providers.length==0;if(!shouldHide){this.providersMenu_.updateSubMenu()}this.gearMenu_.updateShowProviders(shouldHide)}))}onHideGearMenu_(){this.toggleRipple_.activated=false}onDirectoryChanged_(event){event=event;if(event.volumeChanged){this.refreshRemainingSpace_(true)}if(this.gearButton_.isMenuShown()){this.gearButton_.menu.updateCommands(this.gearButton_)}}refreshRemainingSpace_(showLoadingCaption){const currentDirectory=this.directoryModel_.getCurrentDirEntry();if(!currentDirectory||util$3.isRecentRoot(currentDirectory)){this.gearMenu_.setSpaceInfo(null,false);return}const currentVolumeInfo=this.directoryModel_.getCurrentVolumeInfo();if(!currentVolumeInfo){return}if(currentVolumeInfo.volumeType==VolumeManagerCommon$3.VolumeType.PROVIDED||currentVolumeInfo.volumeType==VolumeManagerCommon$3.VolumeType.MEDIA_VIEW||currentVolumeInfo.volumeType==VolumeManagerCommon$3.VolumeType.ARCHIVE){this.gearMenu_.setSpaceInfo(null,false);return}if(currentVolumeInfo.volumeType==VolumeManagerCommon$3.VolumeType.DRIVE){this.gearMenu_.setSpaceInfo(null,false);return}this.gearMenu_.setSpaceInfo(new Promise((fulfill=>{chrome.fileManagerPrivate.getSizeStats(currentVolumeInfo.volumeId,fulfill)})),true)}onPreferencesChanged_(){chrome.fileManagerPrivate.getPreferences((prefs=>{if(chrome.runtime.lastError){return}if(prefs.cellularDisabled){this.gearMenu_.syncButton.setAttribute("checked","")}else{this.gearMenu_.syncButton.removeAttribute("checked")}}))}}// Copyright 2015 The Chromium Authors. All rights reserved.
class SortMenuController{constructor(sortButton,toggleRipple,fileListModel){this.toggleRipple_=toggleRipple;this.fileListModel_=fileListModel;this.sortByNameButton_=queryRequiredElement("#sort-menu-sort-by-name",sortButton.menu);this.sortBySizeButton_=queryRequiredElement("#sort-menu-sort-by-size",sortButton.menu);this.sortByTypeButton_=queryRequiredElement("#sort-menu-sort-by-type",sortButton.menu);this.sortByDateButton_=queryRequiredElement("#sort-menu-sort-by-date",sortButton.menu);sortButton.addEventListener("menushow",this.updateCheckmark_.bind(this));sortButton.addEventListener("menuhide",this.onHideSortMenu_.bind(this))}updateCheckmark_(){this.toggleRipple_.activated=true;const sortField=this.fileListModel_.sortStatus.field;this.setCheckStatus_(this.sortByNameButton_,sortField==="name");this.setCheckStatus_(this.sortBySizeButton_,sortField==="size");this.setCheckStatus_(this.sortByTypeButton_,sortField==="type");this.setCheckStatus_(this.sortByDateButton_,sortField==="modificationTime")}onHideSortMenu_(){this.toggleRipple_.activated=false}setCheckStatus_(menuItem,checked){if(checked){menuItem.setAttribute("checked","")}else{menuItem.removeAttribute("checked")}}}// Copyright 2014 The Chromium Authors. All rights reserved.
class ScanController{constructor(directoryModel,listContainer,spinnerController,commandHandler,selectionHandler){this.directoryModel_=directoryModel;this.listContainer_=listContainer;this.spinnerController_=spinnerController;this.commandHandler_=commandHandler;this.selectionHandler_=selectionHandler;this.scanInProgress_=false;this.scanUpdatedTimer_=0;this.spinnerHideCallback_=null;this.directoryModel_.addEventListener("scan-started",this.onScanStarted_.bind(this));this.directoryModel_.addEventListener("scan-completed",this.onScanCompleted_.bind(this));this.directoryModel_.addEventListener("scan-failed",this.onScanCancelled_.bind(this));this.directoryModel_.addEventListener("scan-cancelled",this.onScanCancelled_.bind(this));this.directoryModel_.addEventListener("scan-updated",this.onScanUpdated_.bind(this));this.directoryModel_.addEventListener("rescan-completed",this.onRescanCompleted_.bind(this))}onScanStarted_(){if(this.scanInProgress_){this.listContainer_.endBatchUpdates()}if(window.IN_TEST){this.listContainer_.element.removeAttribute("scan-completed");this.listContainer_.element.setAttribute("scan-started",this.directoryModel_.getCurrentDirName())}this.listContainer_.startBatchUpdates();this.scanInProgress_=true;if(this.scanUpdatedTimer_){clearTimeout(this.scanUpdatedTimer_);this.scanUpdatedTimer_=0}this.hideSpinner_();this.spinnerHideCallback_=this.spinnerController_.showWithDelay(500,this.onSpinnerShown_.bind(this))}onScanCompleted_(){if(!this.scanInProgress_){console.error("Scan-completed event received. But scan is not started.");return}if(window.IN_TEST){this.listContainer_.element.removeAttribute("scan-started");this.listContainer_.element.setAttribute("scan-completed",this.directoryModel_.getCurrentDirName())}this.hideSpinner_();if(this.scanUpdatedTimer_){clearTimeout(this.scanUpdatedTimer_);this.scanUpdatedTimer_=0}this.scanInProgress_=false;this.listContainer_.endBatchUpdates()}onScanUpdated_(){if(!this.scanInProgress_){console.error("Scan-updated event received. But scan is not started.");return}if(this.scanUpdatedTimer_){return}this.scanUpdatedTimer_=setTimeout((()=>{this.hideSpinner_();if(this.scanInProgress_){this.listContainer_.endBatchUpdates();this.listContainer_.startBatchUpdates()}this.scanUpdatedTimer_=0}),200)}onScanCancelled_(){if(!this.scanInProgress_){console.error("Scan-cancelled event received. But scan is not started.");return}this.hideSpinner_();if(this.scanUpdatedTimer_){clearTimeout(this.scanUpdatedTimer_);this.scanUpdatedTimer_=0}this.scanInProgress_=false;this.listContainer_.endBatchUpdates()}onRescanCompleted_(){this.selectionHandler_.onFileSelectionChanged()}onSpinnerShown_(){if(this.scanInProgress_){this.listContainer_.endBatchUpdates();this.listContainer_.startBatchUpdates()}}hideSpinner_(){if(this.spinnerHideCallback_){this.spinnerHideCallback_();this.spinnerHideCallback_=null}}}// Copyright 2021 The Chromium Authors. All rights reserved.
class DriveDialogController{constructor(ui){this.dialog_=new FilesConfirmDialog(ui.element);this.open_=false;chrome.fileManagerPrivate.onMountCompleted.addListener(this.onMountCompleted_.bind(this))}get open(){return this.open_}onResult_(result){this.open_=false;chrome.fileManagerPrivate.notifyDriveDialogResult(result?chrome.fileManagerPrivate.DriveDialogResult.ACCEPT:chrome.fileManagerPrivate.DriveDialogResult.REJECT)}showDialog(event){this.open_=true;let message="";switch(event.type){case chrome.fileManagerPrivate.DriveConfirmDialogType.ENABLE_DOCS_OFFLINE:message=loadTimeData.getString("OFFLINE_ENABLE_MESSAGE");this.dialog_.setOkLabel(loadTimeData.getString("OFFLINE_ENABLE_ACCEPT"));this.dialog_.setCancelLabel(loadTimeData.getString("OFFLINE_ENABLE_REJECT"));break}this.dialog_.show(message,(()=>this.onResult_(true)),(()=>this.onResult_(false)))}onMountCompleted_(event){if(event.eventType===chrome.fileManagerPrivate.MountCompletedEventType.UNMOUNT&&event.volumeMetadata.volumeType===chrome.fileManagerPrivate.VolumeType.DRIVE){this.dialog_.hide()}}}// Copyright 2014 The Chromium Authors. All rights reserved.
importer.ActivityState={READY:"ready",HIDDEN:"hidden",IMPORTING:"importing",INSUFFICIENT_CLOUD_SPACE:"insufficient-cloud-space",INSUFFICIENT_LOCAL_SPACE:"insufficient-local-space",NO_MEDIA:"no-media",SCANNING:"scanning"};importer.ImportController=class{constructor(environment,scanner,importRunner,commandWidget){this.environment_=environment;this.storage_=importer.ChromeLocalStorage.getInstance();this.importRunner_=importRunner;this.scanner_=scanner;this.commandWidget_=commandWidget;this.scanManager_=new importer.ScanManager(environment,scanner);this.activeImport_=null;this.previousImport_=null;this.lastActivityState_=importer.ActivityState.HIDDEN;this.isRightAfterPluggingMedia_=false;const listener=this.onScanEvent_.bind(this);this.scanner_.addObserver(listener);window.addEventListener("pagehide",(()=>{this.scanner_.removeObserver(listener)}));this.environment_.addWindowCloseListener(this.onWindowClosing_.bind(this));this.environment_.addVolumeUnmountListener(this.onVolumeUnmounted_.bind(this));this.environment_.addDirectoryChangedListener(this.onDirectoryChanged_.bind(this));this.environment_.addSelectionChangedListener(this.onSelectionChanged_.bind(this));this.commandWidget_.addClickListener(this.onClick_.bind(this));this.storage_.get(importer.Setting.HAS_COMPLETED_IMPORT,false).then((importCompleted=>{this.commandWidget_.setDetailsBannerVisible(!importCompleted)}))}onScanEvent_(event,scan){if(!this.scanManager_.isActiveScan(scan)){return}switch(event){case importer.ScanEvent.INVALIDATED:this.onScanInvalidated_();case importer.ScanEvent.FINALIZED:case importer.ScanEvent.UPDATED:this.checkState_(scan);break}}onWindowClosing_(){this.scanManager_.reset()}onVolumeUnmounted_(volumeId){if(this.activeImport_){this.activeImport_.task.requestCancel();this.finalizeActiveImport_();metrics.recordBoolean("ImportController.DeviceYanked")}this.scanManager_.reset();this.checkState_()}onDirectoryChanged_(event){this.isRightAfterPluggingMedia_=!event.previousDirEntry;this.scanManager_.reset();if(this.isCurrentDirectoryScannable_()){this.checkState_(this.scanManager_.getDirectoryScan(importer.ScanMode.HISTORY))}else{this.checkState_()}}onSelectionChanged_(){if(!this.scanManager_.hasSelectionScan()&&this.environment_.getSelection().length===0){return}this.scanManager_.clearSelectionScan();if(this.environment_.getSelection().length===0&&this.isCurrentDirectoryScannable_()){this.checkState_(this.scanManager_.getDirectoryScan(importer.ScanMode.HISTORY))}else{this.checkState_()}}onImportFinished_(task){this.finalizeActiveImport_();this.scanManager_.reset();this.storage_.set(importer.Setting.HAS_COMPLETED_IMPORT,true);this.commandWidget_.setDetailsBannerVisible(false);this.checkState_()}onScanInvalidated_(){this.scanManager_.reset();if(this.environment_.getSelection().length===0&&this.isCurrentDirectoryScannable_()){this.checkState_(this.scanManager_.getDirectoryScan(importer.ScanMode.HISTORY))}else{this.checkState_()}}finalizeActiveImport_(){console.assert(!!this.activeImport_,"Cannot finish import when none is running.");this.previousImport_=this.activeImport_;this.activeImport_=null}onClick_(source){switch(source){case importer.ClickSource.MAIN:if(this.lastActivityState_===importer.ActivityState.READY){this.commandWidget_.performMainButtonRippleAnimation();this.execute_()}else{this.commandWidget_.toggleDetails()}break;case importer.ClickSource.IMPORT:this.execute_();break;case importer.ClickSource.CANCEL:this.cancel_();break;case importer.ClickSource.DESTINATION:if(this.activeImport_){this.environment_.showImportDestination(this.activeImport_.started)}else if(this.previousImport_){this.environment_.showImportDestination(this.previousImport_.started)}else{this.environment_.showImportRoot()}break;case importer.ClickSource.SIDE:break;default:assertNotReached("Unhandled click source: "+source)}}startImportTask_(){console.assert(!this.activeImport_,"Cannot execute while an import task is already active.");const scan=this.scanManager_.getActiveScan();assert(scan!=null);const startDate=new Date;const importTask=this.importRunner_.importFromScanResult(scan,importer.Destination.GOOGLE_DRIVE,this.environment_.getImportDestination(startDate));this.activeImport_={scan:scan,task:importTask,started:startDate};const taskFinished=this.onImportFinished_.bind(this,importTask);importTask.whenFinished.then(taskFinished).catch(taskFinished)}execute_(){this.startImportTask_();this.checkState_()}cancel_(){if(this.activeImport_){this.activeImport_.task.requestCancel();this.finalizeActiveImport_();metrics.recordBoolean("ImportController.ImportCancelled")}this.scanManager_.reset();this.checkState_()}checkState_(opt_scan){if(!this.environment_.isGoogleDriveMounted()){this.updateUi_(importer.ActivityState.HIDDEN);return}if(this.activeImport_){this.updateUi_(importer.ActivityState.IMPORTING,this.activeImport_.scan);return}if(!opt_scan){const scan=this.tryScan_(importer.ScanMode.HISTORY);if(!scan){this.updateUi_(importer.ActivityState.HIDDEN)}return}if(!opt_scan.isFinal()){this.updateUi_(importer.ActivityState.SCANNING,opt_scan);return}if(opt_scan.getFileEntries().length===0){if(opt_scan.getDuplicateFileEntries().length===0){this.updateUi_(importer.ActivityState.NO_MEDIA);return}this.startImportTask_();this.updateUi_(importer.ActivityState.IMPORTING,this.activeImport_.scan);return}Promise.all([this.environment_.getFreeStorageSpace(VolumeManagerCommon$3.VolumeType.DOWNLOADS),this.environment_.getFreeStorageSpace(VolumeManagerCommon$3.VolumeType.DRIVE)]).then((availableSpace=>{if(availableSpace[0]<opt_scan.getStatistics().sizeBytes){this.updateUi_(importer.ActivityState.INSUFFICIENT_LOCAL_SPACE,opt_scan,availableSpace[0]);return}if(availableSpace[1]!==-1&&availableSpace[1]<opt_scan.getStatistics().sizeBytes){this.updateUi_(importer.ActivityState.INSUFFICIENT_CLOUD_SPACE,opt_scan,availableSpace[1]);return}this.updateUi_(importer.ActivityState.READY,opt_scan);if(this.isRightAfterPluggingMedia_){this.isRightAfterPluggingMedia_=false;this.commandWidget_.setDetailsVisible(true)}})).catch((error=>{importer.getLogger().catcher("import-controller-check-state")(error);this.updateUi_(importer.ActivityState.HIDDEN)}))}updateUi_(activityState,opt_scan,opt_destinationSizeBytes){this.lastActivityState_=activityState;this.commandWidget_.update(activityState,opt_scan,opt_destinationSizeBytes)}isCurrentDirectoryScannable_(){const directory=this.environment_.getCurrentDirectory();return!!directory&&importer.isMediaDirectory(directory,this.environment_.volumeManager)}tryScan_(mode){const entries=this.environment_.getSelection();if(entries.length){if(entries.every(importer.isEligibleEntry.bind(null,this.environment_.volumeManager))){return this.scanManager_.getSelectionScan(entries,mode)}}else if(this.isCurrentDirectoryScannable_()){return this.scanManager_.getDirectoryScan(mode)}return null}};importer.CommandWidget=class{addClickListener(listener){}update(activityState,opt_scan,opt_destinationSizeBytes){}setDetailsVisible(visible){}performMainButtonRippleAnimation(){}toggleDetails(){}setDetailsBannerVisible(visible){}};importer.ClickSource={CANCEL:"cancel",DESTINATION:"destination",IMPORT:"import",MAIN:"main",SIDE:"side"};importer.RuntimeCommandWidget=class{constructor(){this.detailsPanel_=queryRequiredElement("#cloud-import-details");this.detailsPanel_.addEventListener("transitionend",this.onDetailsTransitionEnd_.bind(this),false);document.onclick=this.onDetailsFocusLost_.bind(this);this.detailsPanel_.onclick=event=>{event.stopPropagation()};this.comboButton_=getRequiredElement("cloud-import-combo-button");this.mainButton_=queryRequiredElement("#cloud-import-button",this.comboButton_);this.mainButton_.onclick=this.onButtonClicked_.bind(this,importer.ClickSource.MAIN);this.mainButtonRipple_=queryRequiredElement(".ripples > paper-ripple",this.comboButton_);this.sideButton_=queryRequiredElement("#cloud-import-details-button",this.comboButton_);this.sideButton_.onclick=this.onButtonClicked_.bind(this,importer.ClickSource.SIDE);this.sideButtonRipple_=queryRequiredElement(".ripples > files-toggle-ripple",this.comboButton_);this.importButton_=queryRequiredElement("#cloud-import-details cr-button.import");this.importButton_.onclick=this.onButtonClicked_.bind(this,importer.ClickSource.IMPORT);this.cancelButton_=queryRequiredElement("#cloud-import-details cr-button.cancel");this.cancelButton_.onclick=this.onButtonClicked_.bind(this,importer.ClickSource.CANCEL);this.statusContent_=queryRequiredElement("#cloud-import-details .status .content");this.statusContent_.onclick=this.onButtonClicked_.bind(this,importer.ClickSource.DESTINATION);this.toolbarIcon_=queryRequiredElement("#cloud-import-button iron-icon");this.statusIcon_=queryRequiredElement("#cloud-import-details .status iron-icon");this.detailsBanner_=queryRequiredElement("#cloud-import-details .banner");this.progressContainer_=queryRequiredElement("#cloud-import-details .progress");this.progressBar_=queryRequiredElement("#cloud-import-details .progress .value");this.clickListener_;document.addEventListener("keydown",this.onKeyDown_.bind(this));this.cloudImportButtonTabIndex_=queryRequiredElement("#cloud-import-button").tabIndex}onKeyDown_(event){switch(util$3.getKeyModifiers(event)+event.key){case"Escape":this.setDetailsVisible(false)}}static ensureTransitionEndEvent(element,timeout){let fired=false;element.addEventListener("transitionend",(function f(e){element.removeEventListener("transitionend",f);fired=true}));window.setTimeout((()=>{if(!fired){dispatchSimpleEvent(element,"transitionend",true)}}),timeout)}addClickListener(listener){this.clickListener_=listener}onButtonClicked_(source,event){console.assert(!!this.clickListener_,"Listener not set.");if(source===importer.ClickSource.MAIN){this.mainButton_.blur()}switch(source){case importer.ClickSource.MAIN:case importer.ClickSource.IMPORT:case importer.ClickSource.CANCEL:this.clickListener_(source);break;case importer.ClickSource.DESTINATION:if(event.target.classList.contains("destination-link")){this.clickListener_(source)}case importer.ClickSource.SIDE:this.toggleDetails();break;default:assertNotReached("Unhandled click source: "+source)}event.stopPropagation()}performMainButtonRippleAnimation(){this.mainButtonRipple_.simulatedRipple()}toggleDetails(){this.setDetailsVisible(this.detailsPanel_.className==="hidden")}setDetailsBannerVisible(visible){this.detailsBanner_.hidden=!visible}setDetailsVisible(visible){this.sideButtonRipple_.activated=visible;if(visible){if(document.documentElement.getAttribute("dir")==="rtl"){const anchorLeft=this.comboButton_.getBoundingClientRect().left;if(anchorLeft){this.detailsPanel_.style.left=anchorLeft+"px"}}else{const availableWidth=document.body.getBoundingClientRect().width;const anchorRight=this.comboButton_.getBoundingClientRect().right;if(anchorRight){this.detailsPanel_.style.right=availableWidth-anchorRight+"px"}}this.detailsPanel_.hidden=false;this.detailsPanel_.scrollTop+=0;this.detailsPanel_.className=""}else{this.detailsPanel_.className="hidden";importer.RuntimeCommandWidget.ensureTransitionEndEvent(this.detailsPanel_,400)}}onDetailsTransitionEnd_(){if(this.detailsPanel_.className==="hidden"){this.detailsPanel_.hidden=true}}onDetailsFocusLost_(){this.setDetailsVisible(false)}static updateTabIndexOfAnchors_(root,newTabIndex){const anchors=root.querySelectorAll("a");anchors.forEach((element=>{element.tabIndex=newTabIndex}))}update(activityState,opt_scan,opt_destinationSizeBytes){let photosText;if(opt_scan){const detectedFilesCount=opt_scan.getFileEntries().length;if(detectedFilesCount){photosText=detectedFilesCount==1?strf("CLOUD_IMPORT_ONE_FILE"):strf("CLOUD_IMPORT_MULTIPLE_FILES",detectedFilesCount)}else{photosText=""}}switch(activityState){case importer.ActivityState.HIDDEN:this.setDetailsVisible(false);this.comboButton_.hidden=true;this.toolbarIcon_.setAttribute("icon","files:cloud-off");this.statusIcon_.setAttribute("icon","files:cloud-off");break;case importer.ActivityState.IMPORTING:console.assert(!!opt_scan,"Scan not defined, but is required.");this.setDetailsVisible(false);this.mainButton_.setAttribute("aria-label",strf("CLOUD_IMPORT_TOOLTIP_IMPORTING",photosText));this.statusContent_.innerHTML=strf("CLOUD_IMPORT_STATUS_IMPORTING",photosText);this.comboButton_.hidden=false;this.importButton_.hidden=true;this.cancelButton_.hidden=false;this.progressContainer_.hidden=true;this.toolbarIcon_.setAttribute("icon","files:autorenew");this.statusIcon_.setAttribute("icon","files:autorenew");break;case importer.ActivityState.INSUFFICIENT_CLOUD_SPACE:case importer.ActivityState.INSUFFICIENT_LOCAL_SPACE:console.assert(!!opt_scan,"Scan not defined, but is required.");{let attrLabel;let messageLabel;if(activityState===importer.ActivityState.INSUFFICIENT_CLOUD_SPACE){attrLabel="CLOUD_IMPORT_TOOLTIP_INSUFFICIENT_CLOUD_SPACE";messageLabel="CLOUD_IMPORT_STATUS_INSUFFICIENT_CLOUD_SPACE"}else{attrLabel="CLOUD_IMPORT_TOOLTIP_INSUFFICIENT_LOCAL_SPACE";messageLabel="CLOUD_IMPORT_STATUS_INSUFFICIENT_LOCAL_SPACE"}this.mainButton_.setAttribute("aria-label",strf(attrLabel));this.statusContent_.innerHTML=strf(messageLabel,photosText,util$3.bytesToString(opt_scan.getStatistics().sizeBytes-opt_destinationSizeBytes))}this.comboButton_.hidden=false;this.importButton_.hidden=true;this.cancelButton_.hidden=true;this.progressContainer_.hidden=true;this.toolbarIcon_.setAttribute("icon","files:cloud-off");this.statusIcon_.setAttribute("icon","files:photo");break;case importer.ActivityState.NO_MEDIA:this.mainButton_.setAttribute("aria-label",str("CLOUD_IMPORT_TOOLTIP_NO_MEDIA"));this.statusContent_.innerHTML=str("CLOUD_IMPORT_STATUS_NO_MEDIA");this.comboButton_.hidden=false;this.importButton_.hidden=true;this.cancelButton_.hidden=true;this.progressContainer_.hidden=true;this.toolbarIcon_.setAttribute("icon","files:cloud-done");this.statusIcon_.setAttribute("icon","files:cloud-done");break;case importer.ActivityState.READY:console.assert(!!opt_scan,"Scan not defined, but is required.");this.mainButton_.setAttribute("aria-label",strf("CLOUD_IMPORT_TOOLTIP_READY",photosText));this.statusContent_.innerHTML=strf("CLOUD_IMPORT_STATUS_READY",photosText);this.comboButton_.hidden=false;this.importButton_.hidden=false;this.cancelButton_.hidden=true;this.progressContainer_.hidden=true;this.toolbarIcon_.setAttribute("icon","files:cloud-upload");this.statusIcon_.setAttribute("icon","files:photo");break;case importer.ActivityState.SCANNING:console.assert(!!opt_scan,"Scan not defined, but is required.");this.mainButton_.setAttribute("aria-label",str("CLOUD_IMPORT_TOOLTIP_SCANNING"));this.statusContent_.innerHTML=strf("CLOUD_IMPORT_STATUS_SCANNING",photosText);this.comboButton_.hidden=false;this.importButton_.hidden=true;this.cancelButton_.hidden=true;this.progressContainer_.hidden=false;const stats=opt_scan.getStatistics();this.progressBar_.style.width=stats.progress+"%";this.toolbarIcon_.setAttribute("icon","files:autorenew");this.statusIcon_.setAttribute("icon","files:autorenew");break;default:assertNotReached("Unrecognized response id: "+activityState)}if(this.cloudImportButtonTabIndex_){importer.RuntimeCommandWidget.updateTabIndexOfAnchors_(this.statusContent_,this.cloudImportButtonTabIndex_)}}};importer.ScanManager=class{constructor(environment,scanner){this.environment_=environment;this.scanner_=scanner;this.selectionScan_=null;this.directoryScan_=null}reset(){this.clearSelectionScan();this.clearDirectoryScan()}hasSelectionScan(){return!!this.selectionScan_}clearSelectionScan(){if(this.selectionScan_){this.selectionScan_.cancel()}this.selectionScan_=null}clearDirectoryScan(){if(this.directoryScan_){this.directoryScan_.cancel()}this.directoryScan_=null}getActiveScan(){return this.selectionScan_||this.directoryScan_}isActiveScan(scan){return scan===this.selectionScan_||scan===this.directoryScan_}getSelectionScan(entries,mode){console.assert(!this.selectionScan_,"Cannot create new selection scan with another in the cache.");this.selectionScan_=this.scanner_.scanFiles(entries,mode);return this.selectionScan_}getDirectoryScan(mode){if(!this.directoryScan_){const directory=this.environment_.getCurrentDirectory();if(directory){this.directoryScan_=this.scanner_.scanDirectory(directory,mode)}}return this.directoryScan_}};importer.ControllerEnvironment=class{constructor(){this.volumeManager}getSelection(){}getCurrentDirectory(){}setCurrentDirectory(entry){}getVolumeInfo(entry){}isGoogleDriveMounted(){}getFreeStorageSpace(volumeType){}addWindowCloseListener(listener){}addVolumeUnmountListener(listener){}addDirectoryChangedListener(listener){}addSelectionChangedListener(listener){}showImportRoot(){}getImportDestination(date){}showImportDestination(date){}};importer.RuntimeControllerEnvironment=class{constructor(fileManager,selectionHandler){this.volumeManager=fileManager.volumeManager;this.fileManager_=fileManager;this.selectionHandler_=selectionHandler}getSelection(){return this.fileManager_.getSelection().entries}getCurrentDirectory(){return this.fileManager_.getCurrentDirectoryEntry()}setCurrentDirectory(entry){this.fileManager_.directoryModel.activateDirectoryEntry(entry)}getVolumeInfo(entry){return this.fileManager_.volumeManager.getVolumeInfo(entry)}isGoogleDriveMounted(){const drive=this.fileManager_.volumeManager.getCurrentProfileVolumeInfo(VolumeManagerCommon$3.VolumeType.DRIVE);return!!drive}getFreeStorageSpace(volumeType){const volumeInfo=assert(this.fileManager_.volumeManager.getCurrentProfileVolumeInfo(volumeType));return new Promise(((resolve,reject)=>{chrome.fileManagerPrivate.getSizeStats(volumeInfo.volumeId,(stats=>{if(chrome.runtime.lastError){reject("Failed to ascertain available free space: "+chrome.runtime.lastError.message);return}if(!stats){resolve(-1)}resolve(stats.remainingSize)}))}))}addWindowCloseListener(listener){window.addEventListener("pagehide",listener)}addVolumeUnmountListener(listener){chrome.fileManagerPrivate.onMountCompleted.addListener((event=>{if(event.eventType==="unmount"){listener(event.volumeMetadata.volumeId)}}))}addDirectoryChangedListener(listener){this.fileManager_.directoryModel.addEventListener("directory-changed",listener)}addSelectionChangedListener(listener){this.selectionHandler_.addEventListener(FileSelectionHandler.EventType.CHANGE_THROTTLED,listener)}revealDirectory_(directory){this.fileManager_.launchFileManager({currentDirectoryURL:directory.toURL()})}getDriveRoot_(){const drive=this.fileManager_.volumeManager.getCurrentProfileVolumeInfo(VolumeManagerCommon$3.VolumeType.DRIVE);return drive.resolveDisplayRoot()}demandCloudFolder_(root){return importer.demandChildDirectory(root,str("CLOUD_IMPORT_DESTINATION_FOLDER"))}showImportRoot(){return this.getDriveRoot_().then(this.demandCloudFolder_.bind(this)).then(this.revealDirectory_.bind(this)).catch(importer.getLogger().catcher("import-root-provision-and-reveal"))}getImportDestination(date){return this.getDriveRoot_().then(this.demandCloudFolder_.bind(this)).then((root=>importer.demandChildDirectory(root,importer.getDirectoryNameForDate(date)))).catch(importer.getLogger().catcher("import-destination-provision"))}showImportDestination(date){return this.getImportDestination(date).then(this.revealDirectory_.bind(this)).catch(importer.getLogger().catcher("import-destination-reveal"))}};// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
function importElements(){const startTime=Date.now();return new Promise(((resolve,reject)=>{const script=document.createElement("script");script.type="module";script.src="./foreground/js/deferred_elements.m.js";script.onload=()=>{console.log("Elements imported.");chrome.metricsPrivate.recordTime("FileBrowser.Load.ImportElements",Date.now()-startTime);resolve()};script.onerror=error=>{console.error(error);reject(error)};document.head.appendChild(script)}))}window.importElements=importElements;// Copyright (c) 2012 The Chromium Authors. All rights reserved.
class FileManager extends NativeEventTarget{constructor(){super();this.volumeManager_;this.historyLoader_=null;this.crostini_=null;this.crostiniController_=null;this.importHistory_=null;this.onHistoryChangedBound_=this.onHistoryChanged_.bind(this);this.mediaScanner_=null;this.importController_=null;this.mediaImportHandler_=null;this.metadataModel_=null;this.fileMetadataFormatter_=new FileMetadataFormatter;this.thumbnailModel_=null;this.fileOperationManager_=null;this.fileFilter_=null;this.directoryModel_=null;this.folderShortcutsModel_=null;this.androidAppListModel_=null;this.providersModel_=null;this.quickViewModel_=null;this.actionsController_=null;this.driveDialogController_=null;this.commandHandler_=null;this.selectionHandler_=null;this.ui_=null;this.dialogType=DialogType.FULL_PAGE;this.launchParams_=null;this.fileTransferController_=null;this.namingController_=null;this.directoryTreeNamingController_=null;this.searchController_=null;this.scanController_=null;this.spinnerController_=null;this.sortMenuController_=null;this.gearMenuController_=null;this.selectionMenuController_=null;this.toolbarController_=null;this.emptyFolderController_=null;this.appStateController_=null;this.dialogActionController_=null;this.metadataUpdateController_=null;this.lastModifiedController_=null;this.mainWindowComponent_=null;this.taskController_=null;this.columnVisibilityController_=null;this.quickViewUma_=null;this.quickViewController_=null;this.fileTypeFiltersController_=null;this.navigationUma_=null;this.backgroundPage_=null;this.fileBrowserBackground_=null;this.dialogDom_=null;this.document_=null;this.initSettingsPromise_=null;this.initBackgroundPagePromise_=null;this.commandLineFlags_={};this.driveEnabled_=false;this.fakeDriveItem_=null;this.recentEntry_=null}get progressCenter(){return assert(this.fileBrowserBackground_.progressCenter)}get directoryModel(){return this.directoryModel_}get directoryTreeNamingController(){return this.directoryTreeNamingController_}get fileFilter(){return this.fileFilter_}get folderShortcutsModel(){return this.folderShortcutsModel_}get actionsController(){return this.actionsController_}get commandHandler(){return this.commandHandler_}get providersModel(){return this.providersModel_}get metadataModel(){return this.metadataModel_}get selectionHandler(){return this.selectionHandler_}get directoryTree(){return this.ui_.directoryTree}get document(){return this.document_}get fileTransferController(){return this.fileTransferController_}get namingController(){return this.namingController_}get taskController(){return this.taskController_}get spinnerController(){return this.spinnerController_}get fileOperationManager(){return this.fileOperationManager_}get volumeManager(){return this.volumeManager_}get importController(){return this.importController_}get historyLoader(){return this.historyLoader_}get crostini(){return this.crostini_}get mediaImportHandler(){return this.mediaImportHandler_}get ui(){return this.ui_}launchFileManager(appState){this.fileBrowserBackground_.launchFileManager(appState)}getLastVisitedURL(){return util$3.getLastVisitedURL()}async startInitSettings_(){metrics.startInterval("Load.InitSettings");this.appStateController_=new AppStateController(this.dialogType);await this.appStateController_.loadInitialViewOptions();metrics.recordInterval("Load.InitSettings")}async initFileSystemUI_(){this.ui_.listContainer.startBatchUpdates();const fileListPromise=this.initFileList_();const currentDirectoryPromise=this.setupCurrentDirectory_();const self=this;let listBeingUpdated=null;this.directoryModel_.addEventListener("begin-update-files",(()=>{self.ui_.listContainer.currentList.startBatchUpdates();listBeingUpdated=self.ui_.listContainer.currentList}));this.directoryModel_.addEventListener("end-update-files",(()=>{self.namingController_.restoreItemBeingRenamed();listBeingUpdated.endBatchUpdates();listBeingUpdated=null}));this.volumeManager_.addEventListener(VolumeManagerCommon$3.ARCHIVE_OPENED_EVENT_TYPE,(event=>{assert(event.detail.mountPoint);if(window.isFocused()){this.directoryModel_.changeDirectoryEntry(event.detail.mountPoint)}}));this.directoryModel_.addEventListener("directory-changed",(event=>{this.navigationUma_.onDirectoryChanged(event.newDirEntry)}));this.initCommands_();assert(this.directoryModel_);assert(this.spinnerController_);assert(this.commandHandler_);assert(this.selectionHandler_);assert(this.launchParams_);assert(this.volumeManager_);assert(this.dialogDom_);assert(this.fileFilter_);this.scanController_=new ScanController(this.directoryModel_,this.ui_.listContainer,this.spinnerController_,this.commandHandler_,this.selectionHandler_);this.sortMenuController_=new SortMenuController(this.ui_.sortButton,this.ui_.sortButtonToggleRipple,assert(this.directoryModel_.getFileList()));this.gearMenuController_=new GearMenuController(this.ui_.gearButton,this.ui_.gearButtonToggleRipple,this.ui_.gearMenu,this.ui_.providersMenu,this.directoryModel_,this.commandHandler_,assert(this.providersModel_));this.selectionMenuController_=new SelectionMenuController(this.ui_.selectionMenuButton,util$3.queryDecoratedElement("#file-context-menu",Menu));this.toolbarController_=new ToolbarController(this.ui_.toolbar,this.ui_.dialogNavigationList,this.ui_.listContainer,assert(this.ui_.locationLine),this.selectionHandler_,this.directoryModel_,this.volumeManager_,this.ui_);this.emptyFolderController_=new EmptyFolderController(this.ui_.emptyFolder,this.directoryModel_,this.ui_.alertDialog);this.actionsController_=new ActionsController(this.volumeManager_,assert(this.metadataModel_),this.directoryModel_,assert(this.folderShortcutsModel_),this.fileBrowserBackground_.driveSyncHandler,this.selectionHandler_,assert(this.ui_));if(this.dialogType===DialogType.FULL_PAGE){this.driveDialogController_=new DriveDialogController(this.ui_);this.fileBrowserBackground_.driveSyncHandler.addDialog(window.appID,this.driveDialogController_)}this.lastModifiedController_=new LastModifiedController(this.ui_.listContainer.table,this.directoryModel_);this.quickViewModel_=new QuickViewModel;const fileListSelectionModel=this.directoryModel_.getFileListSelection();this.quickViewUma_=new QuickViewUma(assert(this.volumeManager_),assert(this.dialogType));const metadataBoxController=new MetadataBoxController(this.metadataModel_,this.quickViewModel_,this.fileMetadataFormatter_,assert(this.volumeManager_));this.quickViewController_=new QuickViewController(this,assert(this.metadataModel_),assert(this.selectionHandler_),assert(this.ui_.listContainer),assert(this.ui_.selectionMenuButton),assert(this.quickViewModel_),assert(this.taskController_),fileListSelectionModel,assert(this.quickViewUma_),metadataBoxController,this.dialogType,assert(this.volumeManager_),this.dialogDom_);if(this.dialogType===DialogType.FULL_PAGE){this.importController_=new importer.ImportController(new importer.RuntimeControllerEnvironment(this,assert(this.selectionHandler_)),assert(this.mediaScanner_),assert(this.mediaImportHandler_),new importer.RuntimeCommandWidget)}assert(this.fileFilter_);assert(this.namingController_);assert(this.appStateController_);assert(this.taskController_);this.mainWindowComponent_=new MainWindowComponent(this.dialogType,this.ui_,this.volumeManager_,this.directoryModel_,this.fileFilter_,this.selectionHandler_,this.namingController_,this.appStateController_,this.taskController_);this.initDataTransferOperations_();fileListPromise.then((()=>{this.taskController_.setFileTransferController(this.fileTransferController_)}));this.selectionHandler_.onFileSelectionChanged();this.ui_.listContainer.endBatchUpdates();this.ui_.initBanners(new Banners(this.directoryModel_,this.volumeManager_,this.document_,this.dialogType===DialogType.FULL_PAGE));this.ui_.attachFilesTooltip();this.ui_.decorateFilesMenuItems();this.ui_.selectionMenuButton.hidden=false;await Promise.all([fileListPromise,currentDirectoryPromise])}initDataTransferOperations_(){if(this.dialogType!==DialogType.FULL_PAGE){return}this.fileTransferController_=new FileTransferController(assert(this.document_),assert(this.ui_.listContainer),assert(this.ui_.directoryTree),this.ui_.showConfirmationDialog.bind(this.ui_),this.progressCenter,assert(this.fileOperationManager_),assert(this.metadataModel_),assert(this.thumbnailModel_),assert(this.directoryModel_),assert(this.volumeManager_),assert(this.selectionHandler_))}initCommands_(){assert(this.ui_.textContextMenu);this.commandHandler_=new CommandHandler(this,assert(this.selectionHandler_));for(const button of this.dialogDom_.querySelectorAll("button[command]")){CommandButton.decorate(button)}for(const crButton of this.dialogDom_.querySelectorAll("cr-button[command]")){CommandButton.decorate(crButton)}for(const input of this.getDomInputs_()){this.setContextMenuForInput_(input)}this.setContextMenuForInput_(this.ui_.listContainer.renameInput);this.setContextMenuForInput_(this.directoryTreeNamingController_.getInputElement());this.document_.addEventListener("command",this.ui_.listContainer.clearHover.bind(this.ui_.listContainer));CommandHandler.registerUndoDeleteToast(this)}getDomInputs_(){return this.dialogDom_.querySelectorAll("input[type=text], input[type=search], textarea, cr-input")}setContextMenuForInput_(input){let touchInduced=false;input.addEventListener("touchstart",(e=>{touchInduced=true}));input.addEventListener("contextmenu",(e=>{if(touchInduced){e.stopImmediatePropagation()}touchInduced=false}));input.addEventListener("click",(e=>{touchInduced=false}));contextMenuHandler.setContextMenu(input,this.ui_.textContextMenu);this.registerInputCommands_(input)}registerInputCommands_(node){CommandUtil.forceDefaultHandler(node,"cut");CommandUtil.forceDefaultHandler(node,"copy");CommandUtil.forceDefaultHandler(node,"paste");CommandUtil.forceDefaultHandler(node,"delete");node.addEventListener("keydown",(e=>{const key=util$3.getKeyModifiers(e)+e.keyCode;if(key==="190"||key==="191"){e.stopPropagation()}}))}initializeCore(){this.initGeneral_();this.initSettingsPromise_=this.startInitSettings_();this.initBackgroundPagePromise_=this.startInitBackgroundPage_();this.initBackgroundPagePromise_.then((()=>this.initVolumeManager_()));window.addEventListener("pagehide",this.onUnload_.bind(this))}async initializeUI(dialogDom){console.warn("Files app starting up");this.dialogDom_=dialogDom;this.document_=this.dialogDom_.ownerDocument;metrics.startInterval("Load.InitDocuments");if(window.importElementsPromise){await Promise.all([this.initBackgroundPagePromise_,window.importElementsPromise])}else if(window.importElements){await this.initBackgroundPagePromise_;await window.importElements()}metrics.recordInterval("Load.InitDocuments");metrics.startInterval("Load.InitUI");this.document_.documentElement.classList.add("files-ng");this.dialogDom_.classList.add("files-ng");this.dialogDom_.classList.toggle("camera-folder-enabled",util$3.isFilesCameraFolderEnabled());chrome.fileManagerPrivate.isTabletModeEnabled(this.onTabletModeChanged_.bind(this));chrome.fileManagerPrivate.onTabletModeChanged.addListener(this.onTabletModeChanged_.bind(this));this.initEssentialUI_();this.initAdditionalUI_();await this.initSettingsPromise_;const fileSystemUIPromise=this.initFileSystemUI_();this.initUIFocus_();metrics.recordInterval("Load.InitUI");return fileSystemUIPromise}initGeneral_(){if(window.isSWA){this.initAdapters_()}if(window.appState){const params={};for(const name in window.appState){params[name]=window.appState[name]}for(const name in window.appState.params){params[name]=window.appState.params[name]}this.launchParams_=new LaunchParam(params)}else{const json=location.search?JSON.parse(decodeURIComponent(location.search.substr(1))):{};this.launchParams_=new LaunchParam(json instanceof Object?json:{})}this.dialogType=this.launchParams_.type}async startInitBackgroundPage_(){metrics.startInterval("Load.InitBackgroundPage");this.backgroundPage_=await new Promise((resolve=>{if(window.isSWA){resolve(window)}else{chrome.runtime.getBackgroundPage(resolve)}}));assert(this.backgroundPage_);this.fileBrowserBackground_=this.backgroundPage_.background;await new Promise((resolve=>this.fileBrowserBackground_.ready(resolve)));loadTimeData.data=this.fileBrowserBackground_.stringData;if(util$3.runningInBrowser()){this.fileBrowserBackground_.registerDialog(window)}this.fileOperationManager_=this.fileBrowserBackground_.fileOperationManager;this.mediaImportHandler_=this.fileBrowserBackground_.mediaImportHandler;this.mediaScanner_=this.fileBrowserBackground_.mediaScanner;this.historyLoader_=this.fileBrowserBackground_.historyLoader;this.crostini_=this.fileBrowserBackground_.crostini;metrics.recordInterval("Load.InitBackgroundPage")}initVolumeManager_(){const allowedPaths=this.getAllowedPaths_();const writableOnly=this.launchParams_.type===DialogType.SELECT_SAVEAS_FILE;this.volumeManager_=new FilteredVolumeManager(allowedPaths,writableOnly,this.fileBrowserBackground_.getVolumeManager())}initAdapters_(){window.chrome.storage=new StorageAdapter}initEssentialUI_(){metrics.recordEnum("Create",this.dialogType,[DialogType.SELECT_FOLDER,DialogType.SELECT_UPLOAD_FOLDER,DialogType.SELECT_SAVEAS_FILE,DialogType.SELECT_OPEN_FILE,DialogType.SELECT_OPEN_MULTI_FILE,DialogType.FULL_PAGE]);if(util$3.isFilesJsModulesEnabled()){ContentMetadataProvider.configure("foreground/js/metadata_dispatcher.m.js",true)}else if(window.isSWA){ContentMetadataProvider.configure("foreground/js/metadata/metadata_dispatcher.js")}assert(this.volumeManager_);this.metadataModel_=MetadataModel.create(this.volumeManager_);this.thumbnailModel_=new ThumbnailModel(this.metadataModel_);this.providersModel_=new ProvidersModel(this.volumeManager_);this.fileFilter_=new FileFilter(this.volumeManager_);const dialogHeader=queryRequiredElement(".dialog-header");if(util$3.isFilesNg()){dialogHeader.classList.add("files-ng");const dialogMain=queryRequiredElement(".dialog-main");dialogMain.insertBefore(dialogHeader,dialogMain.firstChild)}else{dialogHeader.classList.remove("files-ng")}assert(this.dialogDom_);assert(this.launchParams_);this.ui_=new FileManagerUI(assert(this.providersModel_),this.dialogDom_,this.launchParams_)}initAdditionalUI_(){assert(this.metadataModel_);assert(this.volumeManager_);assert(this.historyLoader_);assert(this.dialogDom_);assert(this.ui_);const dom=this.dialogDom_;assert(dom);const table=queryRequiredElement(".detail-table",dom);FileTable.decorate(table,this.metadataModel_,this.volumeManager_,this.historyLoader_,this.ui_,this.dialogType==DialogType.FULL_PAGE);const grid=queryRequiredElement(".thumbnail-grid",dom);FileGrid.decorate(grid,this.metadataModel_,this.volumeManager_,this.historyLoader_,this.ui_);this.addHistoryObserver_();this.ui_.initAdditionalUI(assertInstanceof(table,FileTable),assertInstanceof(grid,FileGrid),this.volumeManager_);this.progressCenter.addPanel(this.ui_.progressCenterPanel);util$3.addIsFocusedMethod();this.ui_.listContainer.table.setImportStatusVisible(false);this.ui_.listContainer.table.normalizeColumns();this.ui_.listContainer.table.redraw()}initUIFocus_(){this.ui_.initUIFocus()}addHistoryObserver_(){this.historyLoader_.addHistoryLoadedListener((history=>{this.importHistory_=history;history.addObserver(this.onHistoryChangedBound_)}))}onHistoryChanged_(event){util$3.isChildEntry(event.entry,this.getCurrentDirectoryEntry()).then((isChild=>{if(isChild){this.ui_.listContainer.grid.updateListItemsMetadata("import-history",[event.entry]);this.ui_.listContainer.table.updateListItemsMetadata("import-history",[event.entry])}}))}async initFileList_(){const singleSelection=this.dialogType==DialogType.SELECT_OPEN_FILE||this.dialogType==DialogType.SELECT_FOLDER||this.dialogType==DialogType.SELECT_UPLOAD_FOLDER||this.dialogType==DialogType.SELECT_SAVEAS_FILE;assert(this.volumeManager_);assert(this.fileOperationManager_);assert(this.metadataModel_);this.directoryModel_=new DirectoryModel(singleSelection,this.fileFilter_,this.metadataModel_,this.volumeManager_,this.fileOperationManager_);this.folderShortcutsModel_=new FolderShortcutsDataModel(this.volumeManager_);this.androidAppListModel_=new AndroidAppListModel(this.launchParams_.showAndroidPickerApps,this.launchParams_.includeAllFiles,this.launchParams_.typeList);this.recentEntry_=new FakeEntryImpl(str("RECENT_ROOT_LABEL"),VolumeManagerCommon$3.RootType.RECENT,this.getSourceRestriction_());assert(this.launchParams_);this.selectionHandler_=new FileSelectionHandler(assert(this.directoryModel_),assert(this.fileOperationManager_),assert(this.ui_.listContainer),assert(this.metadataModel_),assert(this.volumeManager_),this.launchParams_.allowedPaths);this.directoryModel_.getFileListSelection().addEventListener("change",this.selectionHandler_.onFileSelectionChanged.bind(this.selectionHandler_));const directoryTreePromise=this.initDirectoryTree_();this.ui_.listContainer.listThumbnailLoader=new ListThumbnailLoader(this.directoryModel_,assert(this.thumbnailModel_),this.volumeManager_);this.ui_.listContainer.dataModel=this.directoryModel_.getFileList();this.ui_.listContainer.emptyDataModel=this.directoryModel_.getEmptyFileList();this.ui_.listContainer.selectionModel=this.directoryModel_.getFileListSelection();this.appStateController_.initialize(this.ui_,this.directoryModel_);if(this.dialogType===DialogType.FULL_PAGE){this.columnVisibilityController_=new ColumnVisibilityController(this.ui_,this.directoryModel_,this.volumeManager_)}this.metadataUpdateController_=new MetadataUpdateController(this.ui_.listContainer,this.directoryModel_,this.metadataModel_,this.fileMetadataFormatter_);this.namingController_=new NamingController(this.ui_.listContainer,assert(this.ui_.alertDialog),assert(this.ui_.confirmDialog),this.directoryModel_,assert(this.fileFilter_),this.selectionHandler_);this.taskController_=new TaskController(this.dialogType,this.volumeManager_,this.ui_,this.metadataModel_,this.directoryModel_,this.selectionHandler_,this.metadataUpdateController_,this.namingController_,assert(this.crostini_),this.progressCenter);this.searchController_=new SearchController(this.ui_.searchBox,assert(this.ui_.locationLine),this.directoryModel_,this.volumeManager_,assert(this.taskController_),assert(this.ui_));this.directoryTreeNamingController_=new DirectoryTreeNamingController(this.directoryModel_,assert(this.ui_.directoryTree),this.ui_.alertDialog);this.spinnerController_=new SpinnerController(this.ui_.listContainer.spinner);this.spinnerController_.blink();this.dialogActionController_=new DialogActionController(this.dialogType,this.ui_.dialogFooter,this.directoryModel_,this.metadataModel_,this.volumeManager_,this.fileFilter_,this.namingController_,this.selectionHandler_,this.launchParams_);if(util$3.isRecentsFilterEnabled()){this.fileTypeFiltersController_=new FileTypeFiltersController(this.ui_.fileTypeFilterContainer,this.directoryModel_,this.recentEntry_)}return directoryTreePromise}async initDirectoryTree_(){const directoryTree=this.dialogDom_.querySelector("#directory-tree");const fakeEntriesVisible=this.dialogType!==DialogType.SELECT_SAVEAS_FILE;this.navigationUma_=new NavigationUma(assert(this.volumeManager_));DirectoryTree.decorate(directoryTree,assert(this.directoryModel_),assert(this.volumeManager_),assert(this.metadataModel_),assert(this.fileOperationManager_),fakeEntriesVisible);directoryTree.dataModel=new NavigationListModel(assert(this.volumeManager_),assert(this.folderShortcutsModel_),fakeEntriesVisible&&!DialogType.isFolderDialog(this.launchParams_.type)?new NavigationModelFakeItem(str("RECENT_ROOT_LABEL"),NavigationModelItemType.RECENT,assert(this.recentEntry_)):null,assert(this.directoryModel_),assert(this.androidAppListModel_));this.ui_.initDirectoryTree(directoryTree);chrome.fileManagerPrivate.onPreferencesChanged.addListener((()=>{this.onPreferencesChanged_()}));this.onPreferencesChanged_();chrome.fileManagerPrivate.onCrostiniChanged.addListener(this.onCrostiniChanged_.bind(this));this.crostiniController_=new CrostiniController(assert(this.crostini_),this.document_.querySelector("#files-message"),this.directoryModel_,assert(this.directoryTree));await this.crostiniController_.redraw();const maybeShowToast=this.dialogType===DialogType.FULL_PAGE;return this.crostiniController_.loadSharedPaths(maybeShowToast,this.ui_.toast)}async onCrostiniChanged_(event){switch(event.eventType){case chrome.fileManagerPrivate.CrostiniEventType.ENABLE:this.crostini_.setEnabled(event.vmName,true);return this.crostiniController_.redraw();case chrome.fileManagerPrivate.CrostiniEventType.DISABLE:this.crostini_.setEnabled(event.vmName,false);return this.crostiniController_.redraw();case chrome.fileManagerPrivate.CrostiniEventType.DROP_FAILED_PLUGIN_VM_DIRECTORY_NOT_SHARED:if(this.ui_.dragInProcess){FileTasks.showPluginVmMoveDialog(this.selectionHandler.selection.entries,this.volumeManager_,assert(this.ui_),"Windows",this.fileTransferController_,assert(this.directoryModel_))}break}}async setupCurrentDirectory_(){const tracker=this.directoryModel_.createDirectoryChangeTracker();tracker.start();await new Promise((resolve=>this.volumeManager_.ensureInitialized(resolve)));let nextCurrentDirEntry;let selectionEntry;if(this.launchParams_.selectionURL){try{const inEntry=await new Promise(((resolve,reject)=>{window.webkitResolveLocalFileSystemURL(this.launchParams_.selectionURL,resolve,reject)}));const locationInfo=this.volumeManager_.getLocationInfo(inEntry);if(locationInfo){if(locationInfo.isRootEntry){nextCurrentDirEntry=inEntry}if(inEntry.isDirectory){nextCurrentDirEntry=inEntry}if(!nextCurrentDirEntry){selectionEntry=inEntry}}}catch(error){console.warn(error.stack||error)}}const searchQuery=this.launchParams_.searchQuery;if(searchQuery){metrics.startInterval("Load.ProcessInitialSearchQuery");this.searchController_.setSearchQuery(searchQuery);const hideSpinnerCallback=this.spinnerController_.show();const queryMatchedDirEntry=await crossoverSearchUtils.findQueryMatchedDirectoryEntry(this.directoryTree.dataModel_,this.directoryModel_,searchQuery);if(queryMatchedDirEntry){nextCurrentDirEntry=queryMatchedDirEntry}hideSpinnerCallback();metrics.recordInterval("Load.ProcessInitialSearchQuery")}if(!nextCurrentDirEntry&&this.launchParams_.currentDirectoryURL){try{const inEntry=await new Promise(((resolve,reject)=>{window.webkitResolveLocalFileSystemURL(this.launchParams_.currentDirectoryURL,resolve,reject)}));const locationInfo=this.volumeManager_.getLocationInfo(inEntry);if(locationInfo){nextCurrentDirEntry=inEntry}}catch(error){console.warn(error.stack||error)}}if(!nextCurrentDirEntry&&selectionEntry){nextCurrentDirEntry=await new Promise((resolve=>{selectionEntry.getParent(resolve)}))}if(nextCurrentDirEntry){const locationInfo=this.volumeManager_.getLocationInfo(nextCurrentDirEntry);if(!locationInfo){nextCurrentDirEntry=null}else{if(locationInfo.isRootEntry&&locationInfo.rootType===VolumeManagerCommon$3.RootType.DRIVE_OTHER){const volumeInfo=this.volumeManager_.getVolumeInfo(nextCurrentDirEntry);if(!volumeInfo){nextCurrentDirEntry=null}else{try{nextCurrentDirEntry=await volumeInfo.resolveDisplayRoot()}catch(error){console.error(error.stack||error);nextCurrentDirEntry=null}}}}}if(!nextCurrentDirEntry){nextCurrentDirEntry=await new Promise((resolve=>{this.volumeManager_.getDefaultDisplayRoot(resolve)}))}if(!selectionEntry&&nextCurrentDirEntry&&this.launchParams_.targetName){try{selectionEntry=await new Promise(((resolve,reject)=>{nextCurrentDirEntry.getFile(this.launchParams_.targetName,{},resolve,reject)}))}catch(error1){try{selectionEntry=await new Promise(((resolve,reject)=>{nextCurrentDirEntry.getDirectory(this.launchParams_.targetName,{},resolve,reject)}))}catch(error2){console.error(error1.stack||error1);console.error(error2.stack||error2)}}}if(!nextCurrentDirEntry&&this.directoryTree.dataModel.myFilesModel_){nextCurrentDirEntry=this.directoryTree.dataModel.myFilesModel_.entry}tracker.stop();if(!tracker.hasChanged){await this.finishSetupCurrentDirectory_(nextCurrentDirEntry,selectionEntry,this.launchParams_.targetName)}}async finishSetupCurrentDirectory_(directoryEntry,opt_selectionEntry,opt_suggestedName){const promise=(async()=>{console.warn("Files app has started");if(directoryEntry){await new Promise((resolve=>{this.directoryModel_.changeDirectoryEntry(assert(directoryEntry),resolve)}));if(opt_selectionEntry){this.directoryModel_.selectEntry(opt_selectionEntry)}if(this.launchParams_.searchQuery){this.searchController_.setSearchQuery(this.launchParams_.searchQuery)}}else{console.warn("No entry for finishSetupCurrentDirectory_")}this.ui_.addLoadedAttribute()})();if(this.dialogType===DialogType.SELECT_SAVEAS_FILE){this.ui_.dialogFooter.filenameInput.value=opt_suggestedName||"";this.ui_.dialogFooter.selectTargetNameInFilenameInput()}return promise}getCurrentDirectoryEntry(){return this.directoryModel_&&this.directoryModel_.getCurrentDirEntry()}onUnload_(){if(this.importHistory_){this.importHistory_.removeObserver(this.onHistoryChangedBound_)}if(this.directoryModel_){this.directoryModel_.dispose()}if(this.volumeManager_){this.volumeManager_.dispose()}if(this.fileTransferController_){for(const taskId of assert(this.fileTransferController_.pendingTaskIds)){const item=this.progressCenter.getItemById(taskId);item.message="";item.state=ProgressItemState.CANCELED;this.progressCenter.updateItem(item)}}if(this.ui_&&this.ui_.progressCenterPanel){this.progressCenter.removePanel(this.ui_.progressCenterPanel)}if(this.driveDialogController_){this.fileBrowserBackground_.driveSyncHandler.removeDialog(window.appID)}}getAllowedPaths_(){let allowedPaths=this.launchParams_.allowedPaths;if(allowedPaths===AllowedPaths$1.NATIVE_PATH&&!DialogType.isFolderDialog(this.launchParams_.type)){if(this.launchParams_.type==DialogType.SELECT_SAVEAS_FILE){allowedPaths=AllowedPaths$1.NATIVE_PATH}else{allowedPaths=AllowedPaths$1.ANY_PATH}}return allowedPaths}getSourceRestriction_(){const allowedPaths=this.getAllowedPaths_();if(allowedPaths==AllowedPaths$1.NATIVE_PATH){return chrome.fileManagerPrivate.SourceRestriction.NATIVE_SOURCE}return chrome.fileManagerPrivate.SourceRestriction.ANY_SOURCE}getSelection(){return this.selectionHandler_.selection}getFileList(){return this.directoryModel_.getFileList()}getCurrentList(){return this.ui.listContainer.currentList}onPreferencesChanged_(){chrome.fileManagerPrivate.getPreferences((prefs=>{if(chrome.runtime.lastError||this.driveEnabled_===prefs.driveEnabled){return}this.driveEnabled_=prefs.driveEnabled;if(prefs.driveEnabled){if(!this.fakeDriveItem_){this.fakeDriveItem_=new NavigationModelFakeItem(str("DRIVE_DIRECTORY_LABEL"),NavigationModelItemType.DRIVE,new FakeEntryImpl(str("DRIVE_DIRECTORY_LABEL"),VolumeManagerCommon$3.RootType.DRIVE_FAKE_ROOT))}this.directoryTree.dataModel.fakeDriveItem=this.fakeDriveItem_}else{this.directoryTree.dataModel.fakeDriveItem=null;if(this.directoryModel_.getCurrentDirEntry()===this.fakeDriveItem_.entry){this.volumeManager_.getDefaultDisplayRoot((displayRoot=>{if(this.directoryModel_.getCurrentDirEntry()===this.fakeDriveItem_.entry&&displayRoot){this.directoryModel_.changeDirectoryEntry(displayRoot)}}))}}this.directoryTree.redraw(false)}))}onTabletModeChanged_(enabled){this.dialogDom_.classList.toggle("tablet-mode-enabled",enabled)}}// Copyright 2021 The Chromium Authors. All rights reserved.
const fileManager=new FileManager;window.fileManager=fileManager;fileManager.initializeCore();fileManager.initializeUI(document.body).then((()=>util$3.testSendMessage("ready")));
